/* tslint:disable */
/* eslint-disable */
import type { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by @jlowcs/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
 * Versions are commonly referred to by their handle (for example, `2021-10`).
 * 
 */
export interface ApiVersion {
  
  /**
   * The human-readable name of the version.
   */
  displayName: string;
  
  /**
   * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
   */
  handle: string;
  
  /**
   * Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
   */
  supported: boolean;
}

/**
 * The input fields for submitting Apple Pay payment method information for checkout.
 * 
 */
export interface ApplePayWalletContentInput {
  
  /**
   * The customer's billing address.
   */
  billingAddress: MailingAddressInput;
  
  /**
   * The data for the Apple Pay wallet.
   */
  data: string;
  
  /**
   * The header data for the Apple Pay wallet.
   */
  header: ApplePayWalletHeaderInput;
  
  /**
   * The last digits of the card used to create the payment.
   */
  lastDigits?: string;
  
  /**
   * The signature for the Apple Pay wallet.
   */
  signature: string;
  
  /**
   * The version for the Apple Pay wallet.
   */
  version: string;
}

/**
 * The input fields for submitting wallet payment method information for checkout.
 * 
 */
export interface ApplePayWalletHeaderInput {
  
  /**
   * The application data for the Apple Pay wallet.
   */
  applicationData?: string;
  
  /**
   * The ephemeral public key for the Apple Pay wallet.
   */
  ephemeralPublicKey: string;
  
  /**
   * The public key hash for the Apple Pay wallet.
   */
  publicKeyHash: string;
  
  /**
   * The transaction ID for the Apple Pay wallet.
   */
  transactionId: string;
}

/**
 * Details about the gift card used on the checkout.
 */
export interface AppliedGiftCard extends Node {
  
  /**
   * The amount that was taken from the gift card by applying it.
   */
  amountUsed: MoneyV2;
  
  /**
   * The amount that was taken from the gift card by applying it.
   * @deprecated Use `amountUsed` instead.
   */
  amountUsedV2: MoneyV2;
  
  /**
   * The amount left on the gift card.
   */
  balance: MoneyV2;
  
  /**
   * The amount left on the gift card.
   * @deprecated Use `balance` instead.
   */
  balanceV2: MoneyV2;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The last characters of the gift card.
   */
  lastCharacters: string;
  
  /**
   * The amount that was applied to the checkout in its currency.
   */
  presentmentAmountUsed: MoneyV2;
}

/**
 * An article in an online store blog.
 */
export interface Article extends HasMetafields, Node, OnlineStorePublishable, Trackable {
  
  /**
   * The article's author.
   * @deprecated Use `authorV2` instead.
   */
  author: ArticleAuthor;
  
  /**
   * The article's author.
   */
  authorV2?: ArticleAuthor;
  
  /**
   * The blog that the article belongs to.
   */
  blog: Blog;
  
  /**
   * List of comments posted on the article.
   */
  comments: CommentConnection;
  
  /**
   * Stripped content of the article, single line with HTML tags removed.
   */
  content: string;
  
  /**
   * The content of the article, complete with HTML formatting.
   */
  contentHtml: HTML;
  
  /**
   * Stripped excerpt of the article, single line with HTML tags removed.
   */
  excerpt?: string;
  
  /**
   * The excerpt of the article, complete with HTML formatting.
   */
  excerptHtml?: HTML;
  
  /**
   * A human-friendly unique string for the Article automatically generated from its title.
   * 
   */
  handle: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated with the article.
   */
  image?: Image;
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
  
  /**
   * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
   */
  onlineStoreUrl?: URL;
  
  /**
   * The date and time when the article was published.
   */
  publishedAt: DateTime;
  
  /**
   * The article’s SEO information.
   */
  seo?: SEO;
  
  /**
   * A categorization that a article can be tagged with.
   */
  tags: Array<string>;
  
  /**
   * The article’s name.
   */
  title: string;
  
  /**
   * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
   */
  trackingParameters?: string;
}

/**
 * The author of an article.
 */
export interface ArticleAuthor {
  
  /**
   * The author's bio.
   */
  bio?: string;
  
  /**
   * The author’s email.
   */
  email: string;
  
  /**
   * The author's first name.
   */
  firstName: string;
  
  /**
   * The author's last name.
   */
  lastName: string;
  
  /**
   * The author's full name.
   */
  name: string;
}

/**
 * An auto-generated type for paginating through multiple Articles.
 * 
 */
export interface ArticleConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ArticleEdge>;
  
  /**
   * A list of the nodes contained in ArticleEdge.
   */
  nodes: Array<Article>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Article and a cursor during pagination.
 * 
 */
export interface ArticleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ArticleEdge.
   */
  node: Article;
}

/**
 * The set of valid sort keys for the Article query.
 */
export const enum ArticleSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `blog_title` value.
   */
  BLOG_TITLE = 'BLOG_TITLE',
  
  /**
   * Sort by the `author` value.
   */
  AUTHOR = 'AUTHOR',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `published_at` value.
   */
  PUBLISHED_AT = 'PUBLISHED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * Represents a generic custom attribute.
 */
export interface Attribute {
  
  /**
   * Key or name of the attribute.
   */
  key: string;
  
  /**
   * Value of the attribute.
   */
  value?: string;
}

/**
 * The input fields for an attribute.
 */
export interface AttributeInput {
  
  /**
   * Key or name of the attribute.
   */
  key: string;
  
  /**
   * Value of the attribute.
   */
  value: string;
}

/**
 * Automatic discount applications capture the intentions of a discount that was automatically applied.
 * 
 */
export interface AutomaticDiscountApplication extends DiscountApplication {
  
  /**
   * The method by which the discount's value is allocated to its entitled items.
   */
  allocationMethod: DiscountApplicationAllocationMethod;
  
  /**
   * Which lines of targetType that the discount is allocated over.
   */
  targetSelection: DiscountApplicationTargetSelection;
  
  /**
   * The type of line that the discount is applicable towards.
   */
  targetType: DiscountApplicationTargetType;
  
  /**
   * The title of the application.
   */
  title: string;
  
  /**
   * The value of the discount application.
   */
  value: PricingValue;
}

/**
 * A collection of available shipping rates for a checkout.
 */
export interface AvailableShippingRates {
  
  /**
   * Whether or not the shipping rates are ready.
   * The `shippingRates` field is `null` when this value is `false`.
   * This field should be polled until its value becomes `true`.
   * 
   */
  ready: boolean;
  
  /**
   * The fetched shipping rates. `null` until the `ready` field is `true`.
   */
  shippingRates?: Array<ShippingRate>;
}

/**
 * Represents a cart line common fields.
 */
export interface BaseCartLine {
  
  /**
   * An attribute associated with the cart line.
   */
  attribute?: Attribute;
  
  /**
   * The attributes associated with the cart line. Attributes are represented as key-value pairs.
   */
  attributes: Array<Attribute>;
  
  /**
   * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change and changes will be reflected at checkout.
   */
  cost: CartLineCost;
  
  /**
   * The discounts that have been applied to the cart line.
   */
  discountAllocations: Array<CartDiscountAllocation>;
  
  /**
   * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout.
   * @deprecated Use `cost` instead.
   */
  estimatedCost: CartLineEstimatedCost;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The merchandise that the buyer intends to purchase.
   */
  merchandise: Merchandise;
  
  /**
   * The quantity of the merchandise that the customer intends to purchase.
   */
  quantity: number;
  
  /**
   * The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased.
   */
  sellingPlanAllocation?: SellingPlanAllocation;
}

/** Use this to resolve interface type BaseCartLine */
export type PossibleBaseCartLineTypeNames = 'CartLine';

export interface BaseCartLineNameMap {
  BaseCartLine: BaseCartLine;
  CartLine: CartLine;
}

/**
 * An auto-generated type for paginating through multiple BaseCartLines.
 * 
 */
export interface BaseCartLineConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<BaseCartLineEdge>;
  
  /**
   * A list of the nodes contained in BaseCartLineEdge.
   */
  nodes: Array<BaseCartLine>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one BaseCartLine and a cursor during pagination.
 * 
 */
export interface BaseCartLineEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of BaseCartLineEdge.
   */
  node: BaseCartLine;
}

/**
 * An online store blog.
 */
export interface Blog extends HasMetafields, Node, OnlineStorePublishable {
  
  /**
   * Find an article by its handle.
   */
  articleByHandle?: Article;
  
  /**
   * List of the blog's articles.
   */
  articles: ArticleConnection;
  
  /**
   * The authors who have contributed to the blog.
   */
  authors: Array<ArticleAuthor>;
  
  /**
   * A human-friendly unique string for the Blog automatically generated from its title.
   * 
   */
  handle: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
  
  /**
   * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
   */
  onlineStoreUrl?: URL;
  
  /**
   * The blog's SEO information.
   */
  seo?: SEO;
  
  /**
   * The blogs’s title.
   */
  title: string;
}

/**
 * An auto-generated type for paginating through multiple Blogs.
 * 
 */
export interface BlogConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<BlogEdge>;
  
  /**
   * A list of the nodes contained in BlogEdge.
   */
  nodes: Array<Blog>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Blog and a cursor during pagination.
 * 
 */
export interface BlogEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of BlogEdge.
   */
  node: Blog;
}

/**
 * The set of valid sort keys for the Blog query.
 */
export const enum BlogSortKeys {
  
  /**
   * Sort by the `handle` value.
   */
  HANDLE = 'HANDLE',
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * The store's [branding configuration](https://help.shopify.com/en/manual/promoting-marketing/managing-brand-assets).
 * 
 */
export interface Brand {
  
  /**
   * The colors of the store's brand.
   */
  colors: BrandColors;
  
  /**
   * The store's cover image.
   */
  coverImage?: MediaImage;
  
  /**
   * The store's default logo.
   */
  logo?: MediaImage;
  
  /**
   * The store's short description.
   */
  shortDescription?: string;
  
  /**
   * The store's slogan.
   */
  slogan?: string;
  
  /**
   * The store's preferred logo for square UI elements.
   */
  squareLogo?: MediaImage;
}

/**
 * A group of related colors for the shop's brand.
 * 
 */
export interface BrandColorGroup {
  
  /**
   * The background color.
   */
  background?: Color;
  
  /**
   * The foreground color.
   */
  foreground?: Color;
}

/**
 * The colors of the shop's brand.
 * 
 */
export interface BrandColors {
  
  /**
   * The shop's primary brand colors.
   */
  primary: Array<BrandColorGroup>;
  
  /**
   * The shop's secondary brand colors.
   */
  secondary: Array<BrandColorGroup>;
}

/**
 * Card brand, such as Visa or Mastercard, which can be used for payments.
 */
export const enum CardBrand {
  
  /**
   * Visa.
   */
  VISA = 'VISA',
  
  /**
   * Mastercard.
   */
  MASTERCARD = 'MASTERCARD',
  
  /**
   * Discover.
   */
  DISCOVER = 'DISCOVER',
  
  /**
   * American Express.
   */
  AMERICAN_EXPRESS = 'AMERICAN_EXPRESS',
  
  /**
   * Diners Club.
   */
  DINERS_CLUB = 'DINERS_CLUB',
  
  /**
   * JCB.
   */
  JCB = 'JCB'
}

/**
 * A cart represents the merchandise that a buyer intends to purchase,
 * and the estimated cost associated with the cart. Learn how to
 * [interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * during a customer's session.
 * 
 */
export interface Cart extends HasMetafields, Node {
  
  /**
   * An attribute associated with the cart.
   */
  attribute?: Attribute;
  
  /**
   * The attributes associated with the cart. Attributes are represented as key-value pairs.
   */
  attributes: Array<Attribute>;
  
  /**
   * Information about the buyer that is interacting with the cart.
   */
  buyerIdentity: CartBuyerIdentity;
  
  /**
   * The URL of the checkout for the cart.
   */
  checkoutUrl: URL;
  
  /**
   * The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
   */
  cost: CartCost;
  
  /**
   * The date and time when the cart was created.
   */
  createdAt: DateTime;
  
  /**
   * The delivery groups available for the cart, based on the buyer identity default
   * delivery address preference or the default address of the logged-in customer.
   * 
   */
  deliveryGroups: CartDeliveryGroupConnection;
  
  /**
   * The discounts that have been applied to the entire cart.
   */
  discountAllocations: Array<CartDiscountAllocation>;
  
  /**
   * The case-insensitive discount codes that the customer added at checkout.
   * 
   */
  discountCodes: Array<CartDiscountCode>;
  
  /**
   * The estimated costs that the buyer will pay at checkout.
   * The estimated costs are subject to change and changes will be reflected at checkout.
   * The `estimatedCost` field uses the `buyerIdentity` field to determine
   * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
   * 
   * @deprecated Use `cost` instead.
   */
  estimatedCost: CartEstimatedCost;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A list of lines containing information about the items the customer intends to purchase.
   */
  lines: BaseCartLineConnection;
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
  
  /**
   * A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
   */
  note?: string;
  
  /**
   * The total number of items in the cart.
   */
  totalQuantity: number;
  
  /**
   * The date and time when the cart was updated.
   */
  updatedAt: DateTime;
}

/**
 * Return type for `cartAttributesUpdate` mutation.
 */
export interface CartAttributesUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The discounts automatically applied to the cart line based on prerequisites that have been met.
 */
export interface CartAutomaticDiscountAllocation extends CartDiscountAllocation {
  
  /**
   * The discounted amount that has been applied to the cart line.
   */
  discountedAmount: MoneyV2;
  
  /**
   * The title of the allocated discount.
   */
  title: string;
}

/**
 * Represents information about the buyer that is interacting with the cart.
 */
export interface CartBuyerIdentity {
  
  /**
   * The country where the buyer is located.
   */
  countryCode?: CountryCode;
  
  /**
   * The customer account associated with the cart.
   */
  customer?: Customer;
  
  /**
   * An ordered set of delivery addresses tied to the buyer that is interacting with the cart.
   * The rank of the preferences is determined by the order of the addresses in the array. Preferences
   * can be used to populate relevant fields in the checkout flow.
   * 
   */
  deliveryAddressPreferences: Array<DeliveryAddress>;
  
  /**
   * The email address of the buyer that is interacting with the cart.
   */
  email?: string;
  
  /**
   * The phone number of the buyer that is interacting with the cart.
   */
  phone?: string;
  
  /**
   * A set of wallet preferences tied to the buyer that is interacting with the cart.
   * Preferences can be used to populate relevant payment fields in the checkout flow.
   * 
   */
  walletPreferences: Array<string>;
}

/**
 * Specifies the input fields to update the buyer information associated with a cart.
 * Buyer identity is used to determine
 * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * and should match the customer's shipping address.
 * 
 */
export interface CartBuyerIdentityInput {
  
  /**
   * The email address of the buyer that is interacting with the cart.
   */
  email?: string;
  
  /**
   * The phone number of the buyer that is interacting with the cart.
   */
  phone?: string;
  
  /**
   * The country where the buyer is located.
   */
  countryCode?: CountryCode;
  
  /**
   * The access token used to identify the customer associated with the cart.
   */
  customerAccessToken?: string;
  
  /**
   * An ordered set of delivery addresses tied to the buyer that is interacting with the cart.
   * The rank of the preferences is determined by the order of the addresses in the array. Preferences
   * can be used to populate relevant fields in the checkout flow.
   * 
   */
  deliveryAddressPreferences?: Array<DeliveryAddressInput>;
  
  /**
   * A set of wallet preferences tied to the buyer that is interacting with the cart.
   * Preferences can be used to populate relevant payment fields in the checkout flow.
   *   Accepted value: `["shop_pay"]`.
   * 
   */
  walletPreferences?: Array<string>;
}

/**
 * Return type for `cartBuyerIdentityUpdate` mutation.
 */
export interface CartBuyerIdentityUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * Represents how credit card details are provided for a direct payment.
 * 
 */
export const enum CartCardSource {
  
  /**
   * The credit card was provided by a third party and vaulted on their system.
   * Using this value requires a separate permission from Shopify.
   * 
   */
  SAVED_CREDIT_CARD = 'SAVED_CREDIT_CARD'
}

/**
 * The discount that has been applied to the cart line using a discount code.
 */
export interface CartCodeDiscountAllocation extends CartDiscountAllocation {
  
  /**
   * The code used to apply the discount.
   */
  code: string;
  
  /**
   * The discounted amount that has been applied to the cart line.
   */
  discountedAmount: MoneyV2;
}

/**
 * The completion action to checkout a cart.
 */
export type CartCompletionAction = CompletePaymentChallenge;

/** Use this to resolve union type CartCompletionAction */
export type PossibleCartCompletionActionTypeNames = 'CompletePaymentChallenge';

export interface CartCompletionActionNameMap {
  CartCompletionAction: CartCompletionAction;
  CompletePaymentChallenge: CompletePaymentChallenge;
}

/**
 * The required completion action to checkout a cart.
 */
export interface CartCompletionActionRequired {
  
  /**
   * The action required to complete the cart completion attempt.
   */
  action?: CartCompletionAction;
  
  /**
   * The ID of the cart completion attempt.
   */
  id: string;
}

/**
 * The result of a cart completion attempt.
 */
export type CartCompletionAttemptResult =
CartCompletionActionRequired |
CartCompletionFailed |
CartCompletionProcessing |
CartCompletionSuccess;

/** Use this to resolve union type CartCompletionAttemptResult */
export type PossibleCartCompletionAttemptResultTypeNames =
'CartCompletionActionRequired' |
'CartCompletionFailed' |
'CartCompletionProcessing' |
'CartCompletionSuccess';

export interface CartCompletionAttemptResultNameMap {
  CartCompletionAttemptResult: CartCompletionAttemptResult;
  CartCompletionActionRequired: CartCompletionActionRequired;
  CartCompletionFailed: CartCompletionFailed;
  CartCompletionProcessing: CartCompletionProcessing;
  CartCompletionSuccess: CartCompletionSuccess;
}

/**
 * A failed completion to checkout a cart.
 */
export interface CartCompletionFailed {
  
  /**
   * The errors that caused the checkout to fail.
   */
  errors: Array<CompletionError>;
  
  /**
   * The ID of the cart completion attempt.
   */
  id: string;
}

/**
 * A cart checkout completion that's still processing.
 */
export interface CartCompletionProcessing {
  
  /**
   * The ID of the cart completion attempt.
   */
  id: string;
  
  /**
   * The number of milliseconds to wait before polling again.
   */
  pollDelay: number;
}

/**
 * A successful completion to checkout a cart and a created order.
 */
export interface CartCompletionSuccess {
  
  /**
   * The date and time when the job completed.
   */
  completedAt?: DateTime;
  
  /**
   * The ID of the cart completion attempt.
   */
  id: string;
  
  /**
   * The ID of the order that's created in Shopify.
   */
  orderId: string;
  
  /**
   * The URL of the order confirmation in Shopify.
   */
  orderUrl: URL;
}

/**
 * The costs that the buyer will pay at checkout.
 * The cart cost uses [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to determine
 * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
 * 
 */
export interface CartCost {
  
  /**
   * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to `subtotalAmount`.
   */
  checkoutChargeAmount: MoneyV2;
  
  /**
   * The amount, before taxes and cart-level discounts, for the customer to pay.
   */
  subtotalAmount: MoneyV2;
  
  /**
   * Whether the subtotal amount is estimated.
   */
  subtotalAmountEstimated: boolean;
  
  /**
   * The total amount for the customer to pay.
   */
  totalAmount: MoneyV2;
  
  /**
   * Whether the total amount is estimated.
   */
  totalAmountEstimated: boolean;
  
  /**
   * The duty amount for the customer to pay at checkout.
   */
  totalDutyAmount?: MoneyV2;
  
  /**
   * Whether the total duty amount is estimated.
   */
  totalDutyAmountEstimated: boolean;
  
  /**
   * The tax amount for the customer to pay at checkout.
   */
  totalTaxAmount?: MoneyV2;
  
  /**
   * Whether the total tax amount is estimated.
   */
  totalTaxAmountEstimated: boolean;
}

/**
 * Return type for `cartCreate` mutation.
 */
export interface CartCreatePayload {
  
  /**
   * The new cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The discounts automatically applied to the cart line based on prerequisites that have been met.
 */
export interface CartCustomDiscountAllocation extends CartDiscountAllocation {
  
  /**
   * The discounted amount that has been applied to the cart line.
   */
  discountedAmount: MoneyV2;
  
  /**
   * The title of the allocated discount.
   */
  title: string;
}

/**
 * Information about the options available for one or more line items to be delivered to a specific address.
 */
export interface CartDeliveryGroup {
  
  /**
   * A list of cart lines for the delivery group.
   */
  cartLines: BaseCartLineConnection;
  
  /**
   * The destination address for the delivery group.
   */
  deliveryAddress: MailingAddress;
  
  /**
   * The delivery options available for the delivery group.
   */
  deliveryOptions: Array<CartDeliveryOption>;
  
  /**
   * The ID for the delivery group.
   */
  id: string;
  
  /**
   * The selected delivery option for the delivery group.
   */
  selectedDeliveryOption?: CartDeliveryOption;
}

/**
 * An auto-generated type for paginating through multiple CartDeliveryGroups.
 * 
 */
export interface CartDeliveryGroupConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CartDeliveryGroupEdge>;
  
  /**
   * A list of the nodes contained in CartDeliveryGroupEdge.
   */
  nodes: Array<CartDeliveryGroup>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CartDeliveryGroup and a cursor during pagination.
 * 
 */
export interface CartDeliveryGroupEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CartDeliveryGroupEdge.
   */
  node: CartDeliveryGroup;
}

/**
 * Information about a delivery option.
 */
export interface CartDeliveryOption {
  
  /**
   * The code of the delivery option.
   */
  code?: string;
  
  /**
   * The method for the delivery option.
   */
  deliveryMethodType: DeliveryMethodType;
  
  /**
   * The description of the delivery option.
   */
  description?: string;
  
  /**
   * The estimated cost for the delivery option.
   */
  estimatedCost: MoneyV2;
  
  /**
   * The unique identifier of the delivery option.
   */
  handle: string;
  
  /**
   * The title of the delivery option.
   */
  title?: string;
}

/**
 * The input fields for submitting direct payment method information for checkout.
 * 
 */
export interface CartDirectPaymentMethodInput {
  
  /**
   * The customer's billing address.
   */
  billingAddress: MailingAddressInput;
  
  /**
   * The session ID for the direct payment method used to create the payment.
   */
  sessionId: string;
  
  /**
   * The source of the credit card payment.
   */
  cardSource?: CartCardSource;
}

/**
 * The discounts that have been applied to the cart line.
 */
export interface CartDiscountAllocation {
  
  /**
   * The discounted amount that has been applied to the cart line.
   */
  discountedAmount: MoneyV2;
}

/** Use this to resolve interface type CartDiscountAllocation */
export type PossibleCartDiscountAllocationTypeNames =
'CartAutomaticDiscountAllocation' |
'CartCodeDiscountAllocation' |
'CartCustomDiscountAllocation';

export interface CartDiscountAllocationNameMap {
  CartDiscountAllocation: CartDiscountAllocation;
  CartAutomaticDiscountAllocation: CartAutomaticDiscountAllocation;
  CartCodeDiscountAllocation: CartCodeDiscountAllocation;
  CartCustomDiscountAllocation: CartCustomDiscountAllocation;
}

/**
 * The discount codes applied to the cart.
 */
export interface CartDiscountCode {
  
  /**
   * Whether the discount code is applicable to the cart's current contents.
   */
  applicable: boolean;
  
  /**
   * The code for the discount.
   */
  code: string;
}

/**
 * Return type for `cartDiscountCodesUpdate` mutation.
 */
export interface CartDiscountCodesUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * Possible error codes that can be returned by `CartUserError`.
 */
export const enum CartErrorCode {
  
  /**
   * The input value is invalid.
   */
  INVALID = 'INVALID',
  
  /**
   * The input value should be less than the maximum value allowed.
   */
  LESS_THAN = 'LESS_THAN',
  
  /**
   * Merchandise line was not found in cart.
   */
  INVALID_MERCHANDISE_LINE = 'INVALID_MERCHANDISE_LINE',
  
  /**
   * Missing discount code.
   */
  MISSING_DISCOUNT_CODE = 'MISSING_DISCOUNT_CODE',
  
  /**
   * Missing note.
   */
  MISSING_NOTE = 'MISSING_NOTE',
  
  /**
   * Delivery group was not found in cart.
   */
  INVALID_DELIVERY_GROUP = 'INVALID_DELIVERY_GROUP',
  
  /**
   * Delivery option was not valid.
   */
  INVALID_DELIVERY_OPTION = 'INVALID_DELIVERY_OPTION',
  
  /**
   * The payment wasn't valid.
   */
  INVALID_PAYMENT = 'INVALID_PAYMENT',
  
  /**
   * The payment method is not supported.
   */
  PAYMENT_METHOD_NOT_SUPPORTED = 'PAYMENT_METHOD_NOT_SUPPORTED',
  
  /**
   * Cannot update payment on an empty cart
   */
  INVALID_PAYMENT_EMPTY_CART = 'INVALID_PAYMENT_EMPTY_CART',
  
  /**
   * The metafields were not valid.
   */
  INVALID_METAFIELDS = 'INVALID_METAFIELDS'
}

/**
 * The estimated costs that the buyer will pay at checkout.
 * The estimated cost uses
 * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity)
 * to determine
 * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
 * 
 */
export interface CartEstimatedCost {
  
  /**
   * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to`subtotal_amount`.
   */
  checkoutChargeAmount: MoneyV2;
  
  /**
   * The estimated amount, before taxes and discounts, for the customer to pay.
   */
  subtotalAmount: MoneyV2;
  
  /**
   * The estimated total amount for the customer to pay.
   */
  totalAmount: MoneyV2;
  
  /**
   * The estimated duty amount for the customer to pay at checkout.
   */
  totalDutyAmount?: MoneyV2;
  
  /**
   * The estimated tax amount for the customer to pay at checkout.
   */
  totalTaxAmount?: MoneyV2;
}

/**
 * The input fields for submitting a billing address without a selected payment method.
 * 
 */
export interface CartFreePaymentMethodInput {
  
  /**
   * The customer's billing address.
   */
  billingAddress: MailingAddressInput;
}

/**
 * The input fields to create a cart.
 */
export interface CartInput {
  
  /**
   * An array of key-value pairs that contains additional information about the cart.
   */
  attributes?: Array<AttributeInput>;
  
  /**
   * A list of merchandise lines to add to the cart.
   */
  lines?: Array<CartLineInput>;
  
  /**
   * The case-insensitive discount codes that the customer added at checkout.
   * 
   */
  discountCodes?: Array<string>;
  
  /**
   * A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
   */
  note?: string;
  
  /**
   * The customer associated with the cart. Used to determine [international pricing]
   * (https://shopify.dev/custom-storefronts/internationalization/international-pricing).
   * Buyer identity should match the customer's shipping address.
   * 
   */
  buyerIdentity?: CartBuyerIdentityInput;
  
  /**
   * The metafields to associate with this cart.
   */
  metafields?: Array<CartInputMetafieldInput>;
}

/**
 * The input fields for a cart metafield value to set.
 */
export interface CartInputMetafieldInput {
  
  /**
   * The key name of the metafield.
   */
  key: string;
  
  /**
   * The data to store in the cart metafield. The data is always stored as a string, regardless of the metafield's type.
   * 
   */
  value: string;
  
  /**
   * The type of data that the cart metafield stores.
   * The type of data must be a [supported type](https://shopify.dev/apps/metafields/types).
   * 
   */
  type: string;
}

/**
 * Represents information about the merchandise in the cart.
 */
export interface CartLine extends BaseCartLine, Node {
  
  /**
   * An attribute associated with the cart line.
   */
  attribute?: Attribute;
  
  /**
   * The attributes associated with the cart line. Attributes are represented as key-value pairs.
   */
  attributes: Array<Attribute>;
  
  /**
   * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change and changes will be reflected at checkout.
   */
  cost: CartLineCost;
  
  /**
   * The discounts that have been applied to the cart line.
   */
  discountAllocations: Array<CartDiscountAllocation>;
  
  /**
   * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout.
   * @deprecated Use `cost` instead.
   */
  estimatedCost: CartLineEstimatedCost;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The merchandise that the buyer intends to purchase.
   */
  merchandise: Merchandise;
  
  /**
   * The quantity of the merchandise that the customer intends to purchase.
   */
  quantity: number;
  
  /**
   * The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased.
   */
  sellingPlanAllocation?: SellingPlanAllocation;
}

/**
 * The cost of the merchandise line that the buyer will pay at checkout.
 */
export interface CartLineCost {
  
  /**
   * The amount of the merchandise line.
   */
  amountPerQuantity: MoneyV2;
  
  /**
   * The compare at amount of the merchandise line.
   */
  compareAtAmountPerQuantity?: MoneyV2;
  
  /**
   * The cost of the merchandise line before line-level discounts.
   */
  subtotalAmount: MoneyV2;
  
  /**
   * The total cost of the merchandise line.
   */
  totalAmount: MoneyV2;
}

/**
 * The estimated cost of the merchandise line that the buyer will pay at checkout.
 */
export interface CartLineEstimatedCost {
  
  /**
   * The amount of the merchandise line.
   */
  amount: MoneyV2;
  
  /**
   * The compare at amount of the merchandise line.
   */
  compareAtAmount?: MoneyV2;
  
  /**
   * The estimated cost of the merchandise line before discounts.
   */
  subtotalAmount: MoneyV2;
  
  /**
   * The estimated total cost of the merchandise line.
   */
  totalAmount: MoneyV2;
}

/**
 * The input fields to create a merchandise line on a cart.
 */
export interface CartLineInput {
  
  /**
   * An array of key-value pairs that contains additional information about the merchandise line.
   */
  attributes?: Array<AttributeInput>;
  
  /**
   * The quantity of the merchandise.
   */
  quantity?: number;
  
  /**
   * The ID of the merchandise that the buyer intends to purchase.
   */
  merchandiseId: string;
  
  /**
   * The ID of the selling plan that the merchandise is being purchased with.
   */
  sellingPlanId?: string;
}

/**
 * The input fields to update a line item on a cart.
 */
export interface CartLineUpdateInput {
  
  /**
   * The ID of the merchandise line.
   */
  id: string;
  
  /**
   * The quantity of the line item.
   */
  quantity?: number;
  
  /**
   * The ID of the merchandise for the line item.
   */
  merchandiseId?: string;
  
  /**
   * An array of key-value pairs that contains additional information about the merchandise line.
   */
  attributes?: Array<AttributeInput>;
  
  /**
   * The ID of the selling plan that the merchandise is being purchased with.
   */
  sellingPlanId?: string;
}

/**
 * Return type for `cartLinesAdd` mutation.
 */
export interface CartLinesAddPayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * Return type for `cartLinesRemove` mutation.
 */
export interface CartLinesRemovePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * Return type for `cartLinesUpdate` mutation.
 */
export interface CartLinesUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The input fields to delete a cart metafield.
 */
export interface CartMetafieldDeleteInput {
  
  /**
   * The ID of the cart resource.
   */
  ownerId: string;
  
  /**
   * The key name of the cart metafield.
   */
  key: string;
}

/**
 * Return type for `cartMetafieldDelete` mutation.
 */
export interface CartMetafieldDeletePayload {
  
  /**
   * The ID of the deleted cart metafield.
   */
  deletedId?: string;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<MetafieldDeleteUserError>;
}

/**
 * The input fields for a cart metafield value to set.
 */
export interface CartMetafieldsSetInput {
  
  /**
   * The ID of the cart resource.
   */
  ownerId: string;
  
  /**
   * The key name of the cart metafield.
   */
  key: string;
  
  /**
   * The data to store in the cart metafield. The data is always stored as a string, regardless of the metafield's type.
   * 
   */
  value: string;
  
  /**
   * The type of data that the cart metafield stores.
   * The type of data must be a [supported type](https://shopify.dev/apps/metafields/types).
   * 
   */
  type: string;
}

/**
 * Return type for `cartMetafieldsSet` mutation.
 */
export interface CartMetafieldsSetPayload {
  
  /**
   * The list of cart metafields that were set.
   */
  metafields?: Array<Metafield>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<MetafieldsSetUserError>;
}

/**
 * Return type for `cartNoteUpdate` mutation.
 */
export interface CartNoteUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The input fields for updating the payment method that will be used to checkout.
 * 
 */
export interface CartPaymentInput {
  
  /**
   * The amount that the customer will be charged at checkout.
   */
  amount: MoneyInput;
  
  /**
   * An ID of the order placed on the originating platform.
   * Note that this value doesn't correspond to the Shopify Order ID.
   * 
   */
  sourceIdentifier?: string;
  
  /**
   * The input fields to use to checkout a cart without providing a payment method.
   * Use this payment method input if the total cost of the cart is 0.
   * 
   */
  freePaymentMethod?: CartFreePaymentMethodInput;
  
  /**
   * The input fields to use when checking out a cart with a direct payment method (like a credit card).
   * 
   */
  directPaymentMethod?: CartDirectPaymentMethodInput;
  
  /**
   * The input fields to use when checking out a cart with a wallet payment method (like Shop Pay or Apple Pay).
   * 
   */
  walletPaymentMethod?: CartWalletPaymentMethodInput;
}

/**
 * Return type for `cartPaymentUpdate` mutation.
 */
export interface CartPaymentUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The input fields for updating the selected delivery options for a delivery group.
 * 
 */
export interface CartSelectedDeliveryOptionInput {
  
  /**
   * The ID of the cart delivery group.
   */
  deliveryGroupId: string;
  
  /**
   * The handle of the selected delivery option.
   */
  deliveryOptionHandle: string;
}

/**
 * Return type for `cartSelectedDeliveryOptionsUpdate` mutation.
 */
export interface CartSelectedDeliveryOptionsUpdatePayload {
  
  /**
   * The updated cart.
   */
  cart?: Cart;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * Return type for `cartSubmitForCompletion` mutation.
 */
export interface CartSubmitForCompletionPayload {
  
  /**
   * The result of cart submission for completion.
   */
  result?: CartSubmitForCompletionResult;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CartUserError>;
}

/**
 * The result of cart submit completion.
 */
export type CartSubmitForCompletionResult =
SubmitAlreadyAccepted |
SubmitFailed |
SubmitSuccess |
SubmitThrottled;

/** Use this to resolve union type CartSubmitForCompletionResult */
export type PossibleCartSubmitForCompletionResultTypeNames =
'SubmitAlreadyAccepted' |
'SubmitFailed' |
'SubmitSuccess' |
'SubmitThrottled';

export interface CartSubmitForCompletionResultNameMap {
  CartSubmitForCompletionResult: CartSubmitForCompletionResult;
  SubmitAlreadyAccepted: SubmitAlreadyAccepted;
  SubmitFailed: SubmitFailed;
  SubmitSuccess: SubmitSuccess;
  SubmitThrottled: SubmitThrottled;
}

/**
 * Represents an error that happens during execution of a cart mutation.
 */
export interface CartUserError extends DisplayableError {
  
  /**
   * The error code.
   */
  code?: CartErrorCode;
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/**
 * The input fields for submitting wallet payment method information for checkout.
 * 
 */
export interface CartWalletPaymentMethodInput {
  
  /**
   * The payment method information for the Apple Pay wallet.
   */
  applePayWalletContent?: ApplePayWalletContentInput;
  
  /**
   * The payment method information for the Shop Pay wallet.
   */
  shopPayWalletContent?: ShopPayWalletContentInput;
}

/**
 * A container for all the information required to checkout items and pay.
 */
export interface Checkout extends Node {
  
  /**
   * The gift cards used on the checkout.
   */
  appliedGiftCards: Array<AppliedGiftCard>;
  
  /**
   * The available shipping rates for this Checkout.
   * Should only be used when checkout `requiresShipping` is `true` and
   * the shipping address is valid.
   * 
   */
  availableShippingRates?: AvailableShippingRates;
  
  /**
   * The identity of the customer associated with the checkout.
   */
  buyerIdentity: CheckoutBuyerIdentity;
  
  /**
   * The date and time when the checkout was completed.
   */
  completedAt?: DateTime;
  
  /**
   * The date and time when the checkout was created.
   */
  createdAt: DateTime;
  
  /**
   * The currency code for the checkout.
   */
  currencyCode: CurrencyCode;
  
  /**
   * A list of extra information that is added to the checkout.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * Discounts that have been applied on the checkout.
   */
  discountApplications: DiscountApplicationConnection;
  
  /**
   * The email attached to this checkout.
   */
  email?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A list of line item objects, each one containing information about an item in the checkout.
   */
  lineItems: CheckoutLineItemConnection;
  
  /**
   * The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
   */
  lineItemsSubtotalPrice: MoneyV2;
  
  /**
   * The note associated with the checkout.
   */
  note?: string;
  
  /**
   * The resulting order from a paid checkout.
   */
  order?: Order;
  
  /**
   * The Order Status Page for this Checkout, null when checkout is not completed.
   */
  orderStatusUrl?: URL;
  
  /**
   * The amount left to be paid. This is equal to the cost of the line items, taxes, and shipping, minus discounts and gift cards.
   */
  paymentDue: MoneyV2;
  
  /**
   * The amount left to be paid. This is equal to the cost of the line items, duties, taxes, and shipping, minus discounts and gift cards.
   * @deprecated Use `paymentDue` instead.
   */
  paymentDueV2: MoneyV2;
  
  /**
   * Whether or not the Checkout is ready and can be completed. Checkouts may
   * have asynchronous operations that can take time to finish. If you want
   * to complete a checkout or ensure all the fields are populated and up to
   * date, polling is required until the value is true.
   * 
   */
  ready: boolean;
  
  /**
   * States whether or not the fulfillment requires shipping.
   */
  requiresShipping: boolean;
  
  /**
   * The shipping address to where the line items will be shipped.
   */
  shippingAddress?: MailingAddress;
  
  /**
   * The discounts that have been allocated onto the shipping line by discount applications.
   * 
   */
  shippingDiscountAllocations: Array<DiscountAllocation>;
  
  /**
   * Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
   */
  shippingLine?: ShippingRate;
  
  /**
   * The price at checkout before shipping and taxes.
   */
  subtotalPrice: MoneyV2;
  
  /**
   * The price at checkout before duties, shipping, and taxes.
   * @deprecated Use `subtotalPrice` instead.
   */
  subtotalPriceV2: MoneyV2;
  
  /**
   * Whether the checkout is tax exempt.
   */
  taxExempt: boolean;
  
  /**
   * Whether taxes are included in the line item and shipping line prices.
   */
  taxesIncluded: boolean;
  
  /**
   * The sum of all the duties applied to the line items in the checkout.
   */
  totalDuties?: MoneyV2;
  
  /**
   * The sum of all the prices of all the items in the checkout, including taxes and duties.
   */
  totalPrice: MoneyV2;
  
  /**
   * The sum of all the prices of all the items in the checkout, including taxes and duties.
   * @deprecated Use `totalPrice` instead.
   */
  totalPriceV2: MoneyV2;
  
  /**
   * The sum of all the taxes applied to the line items and shipping lines in the checkout.
   */
  totalTax: MoneyV2;
  
  /**
   * The sum of all the taxes applied to the line items and shipping lines in the checkout.
   * @deprecated Use `totalTax` instead.
   */
  totalTaxV2: MoneyV2;
  
  /**
   * The date and time when the checkout was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The url pointing to the checkout accessible from the web.
   */
  webUrl: URL;
}

/**
 * The input fields required to update a checkout's attributes.
 */
export interface CheckoutAttributesUpdateV2Input {
  
  /**
   * The text of an optional note that a shop owner can attach to the checkout.
   */
  note?: string;
  
  /**
   * A list of extra information that is added to the checkout.
   */
  customAttributes?: Array<AttributeInput>;
  
  /**
   * Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
   * The required attributes are city, province, and country.
   * Full validation of the addresses is still done at completion time. Defaults to `false` with 
   * each operation.
   * 
   */
  allowPartialAddresses?: boolean;
}

/**
 * Return type for `checkoutAttributesUpdateV2` mutation.
 */
export interface CheckoutAttributesUpdateV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * The identity of the customer associated with the checkout.
 */
export interface CheckoutBuyerIdentity {
  
  /**
   * The country code for the checkout. For example, `CA`.
   */
  countryCode?: CountryCode;
}

/**
 * The input fields for the identity of the customer associated with the checkout.
 */
export interface CheckoutBuyerIdentityInput {
  
  /**
   * The country code of one of the shop's
   * [enabled countries](https://help.shopify.com/en/manual/payments/shopify-payments/multi-currency/setup).
   * For example, `CA`. Including this field creates a checkout in the specified country's currency.
   * 
   */
  countryCode: CountryCode;
}

/**
 * Return type for `checkoutCompleteFree` mutation.
 */
export interface CheckoutCompleteFreePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutCompleteWithCreditCardV2` mutation.
 */
export interface CheckoutCompleteWithCreditCardV2Payload {
  
  /**
   * The checkout on which the payment was applied.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * A representation of the attempted payment.
   */
  payment?: Payment;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutCompleteWithTokenizedPaymentV3` mutation.
 */
export interface CheckoutCompleteWithTokenizedPaymentV3Payload {
  
  /**
   * The checkout on which the payment was applied.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * A representation of the attempted payment.
   */
  payment?: Payment;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * The input fields required to create a checkout.
 */
export interface CheckoutCreateInput {
  
  /**
   * The email with which the customer wants to checkout.
   */
  email?: string;
  
  /**
   * A list of line item objects, each one containing information about an item in the checkout.
   */
  lineItems?: Array<CheckoutLineItemInput>;
  
  /**
   * The shipping address to where the line items will be shipped.
   */
  shippingAddress?: MailingAddressInput;
  
  /**
   * The text of an optional note that a shop owner can attach to the checkout.
   */
  note?: string;
  
  /**
   * A list of extra information that is added to the checkout.
   */
  customAttributes?: Array<AttributeInput>;
  
  /**
   * Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
   * The required attributes are city, province, and country.
   * Full validation of addresses is still done at completion time. Defaults to `null`.
   * 
   */
  allowPartialAddresses?: boolean;
  
  /**
   * The identity of the customer associated with the checkout.
   */
  buyerIdentity?: CheckoutBuyerIdentityInput;
}

/**
 * Return type for `checkoutCreate` mutation.
 */
export interface CheckoutCreatePayload {
  
  /**
   * The new checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The checkout queue token. Available only to selected stores.
   */
  queueToken?: string;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutCustomerAssociateV2` mutation.
 */
export interface CheckoutCustomerAssociateV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The associated customer object.
   */
  customer?: Customer;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutCustomerDisassociateV2` mutation.
 */
export interface CheckoutCustomerDisassociateV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutDiscountCodeApplyV2` mutation.
 */
export interface CheckoutDiscountCodeApplyV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutDiscountCodeRemove` mutation.
 */
export interface CheckoutDiscountCodeRemovePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutEmailUpdateV2` mutation.
 */
export interface CheckoutEmailUpdateV2Payload {
  
  /**
   * The checkout object with the updated email.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Possible error codes that can be returned by `CheckoutUserError`.
 */
export const enum CheckoutErrorCode {
  
  /**
   * The input value is blank.
   */
  BLANK = 'BLANK',
  
  /**
   * The input value is invalid.
   */
  INVALID = 'INVALID',
  
  /**
   * The input value is too long.
   */
  TOO_LONG = 'TOO_LONG',
  
  /**
   * The input value needs to be blank.
   */
  PRESENT = 'PRESENT',
  
  /**
   * The input value should be less than the maximum value allowed.
   */
  LESS_THAN = 'LESS_THAN',
  
  /**
   * The input value should be greater than or equal to the minimum value allowed.
   */
  GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
  
  /**
   * The input value should be less than or equal to the maximum value allowed.
   */
  LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
  
  /**
   * Checkout is already completed.
   */
  ALREADY_COMPLETED = 'ALREADY_COMPLETED',
  
  /**
   * Checkout is locked.
   */
  LOCKED = 'LOCKED',
  
  /**
   * Input value is not supported.
   */
  NOT_SUPPORTED = 'NOT_SUPPORTED',
  
  /**
   * Input email contains an invalid domain name.
   */
  BAD_DOMAIN = 'BAD_DOMAIN',
  
  /**
   * Input Zip is invalid for country provided.
   */
  INVALID_FOR_COUNTRY = 'INVALID_FOR_COUNTRY',
  
  /**
   * Input Zip is invalid for country and province provided.
   */
  INVALID_FOR_COUNTRY_AND_PROVINCE = 'INVALID_FOR_COUNTRY_AND_PROVINCE',
  
  /**
   * Invalid state in country.
   */
  INVALID_STATE_IN_COUNTRY = 'INVALID_STATE_IN_COUNTRY',
  
  /**
   * Invalid province in country.
   */
  INVALID_PROVINCE_IN_COUNTRY = 'INVALID_PROVINCE_IN_COUNTRY',
  
  /**
   * Invalid region in country.
   */
  INVALID_REGION_IN_COUNTRY = 'INVALID_REGION_IN_COUNTRY',
  
  /**
   * Shipping rate expired.
   */
  SHIPPING_RATE_EXPIRED = 'SHIPPING_RATE_EXPIRED',
  
  /**
   * Gift card cannot be applied to a checkout that contains a gift card.
   */
  GIFT_CARD_UNUSABLE = 'GIFT_CARD_UNUSABLE',
  
  /**
   * Gift card is disabled.
   */
  GIFT_CARD_DISABLED = 'GIFT_CARD_DISABLED',
  
  /**
   * Gift card code is invalid.
   */
  GIFT_CARD_CODE_INVALID = 'GIFT_CARD_CODE_INVALID',
  
  /**
   * Gift card has already been applied.
   */
  GIFT_CARD_ALREADY_APPLIED = 'GIFT_CARD_ALREADY_APPLIED',
  
  /**
   * Gift card currency does not match checkout currency.
   */
  GIFT_CARD_CURRENCY_MISMATCH = 'GIFT_CARD_CURRENCY_MISMATCH',
  
  /**
   * Gift card is expired.
   */
  GIFT_CARD_EXPIRED = 'GIFT_CARD_EXPIRED',
  
  /**
   * Gift card has no funds left.
   */
  GIFT_CARD_DEPLETED = 'GIFT_CARD_DEPLETED',
  
  /**
   * Gift card was not found.
   */
  GIFT_CARD_NOT_FOUND = 'GIFT_CARD_NOT_FOUND',
  
  /**
   * Cart does not meet discount requirements notice.
   */
  CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE = 'CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE',
  
  /**
   * Discount expired.
   */
  DISCOUNT_EXPIRED = 'DISCOUNT_EXPIRED',
  
  /**
   * Discount disabled.
   */
  DISCOUNT_DISABLED = 'DISCOUNT_DISABLED',
  
  /**
   * Discount limit reached.
   */
  DISCOUNT_LIMIT_REACHED = 'DISCOUNT_LIMIT_REACHED',
  
  /**
   * Higher value discount applied.
   */
  HIGHER_VALUE_DISCOUNT_APPLIED = 'HIGHER_VALUE_DISCOUNT_APPLIED',
  
  /**
   * Maximum number of discount codes limit reached.
   */
  MAXIMUM_DISCOUNT_CODE_LIMIT_REACHED = 'MAXIMUM_DISCOUNT_CODE_LIMIT_REACHED',
  
  /**
   * Discount not found.
   */
  DISCOUNT_NOT_FOUND = 'DISCOUNT_NOT_FOUND',
  
  /**
   * Customer already used once per customer discount notice.
   */
  CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE = 'CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE',
  
  /**
   * Discount code isn't working right now. Please contact us for help.
   */
  DISCOUNT_CODE_APPLICATION_FAILED = 'DISCOUNT_CODE_APPLICATION_FAILED',
  
  /**
   * Checkout is already completed.
   */
  EMPTY = 'EMPTY',
  
  /**
   * Not enough in stock.
   */
  NOT_ENOUGH_IN_STOCK = 'NOT_ENOUGH_IN_STOCK',
  
  /**
   * Missing payment input.
   */
  MISSING_PAYMENT_INPUT = 'MISSING_PAYMENT_INPUT',
  
  /**
   * The amount of the payment does not match the value to be paid.
   */
  TOTAL_PRICE_MISMATCH = 'TOTAL_PRICE_MISMATCH',
  
  /**
   * Line item was not found in checkout.
   */
  LINE_ITEM_NOT_FOUND = 'LINE_ITEM_NOT_FOUND',
  
  /**
   * Unable to apply discount.
   */
  UNABLE_TO_APPLY = 'UNABLE_TO_APPLY',
  
  /**
   * Discount already applied.
   */
  DISCOUNT_ALREADY_APPLIED = 'DISCOUNT_ALREADY_APPLIED',
  
  /**
   * Throttled during checkout.
   */
  THROTTLED_DURING_CHECKOUT = 'THROTTLED_DURING_CHECKOUT',
  
  /**
   * Queue token has expired.
   */
  EXPIRED_QUEUE_TOKEN = 'EXPIRED_QUEUE_TOKEN',
  
  /**
   * Queue token is invalid.
   */
  INVALID_QUEUE_TOKEN = 'INVALID_QUEUE_TOKEN',
  
  /**
   * Cannot specify country and presentment currency code.
   */
  INVALID_COUNTRY_AND_CURRENCY = 'INVALID_COUNTRY_AND_CURRENCY',
  
  /**
   * Product is not published for this customer.
   */
  PRODUCT_NOT_AVAILABLE = 'PRODUCT_NOT_AVAILABLE'
}

/**
 * Return type for `checkoutGiftCardRemoveV2` mutation.
 */
export interface CheckoutGiftCardRemoveV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutGiftCardsAppend` mutation.
 */
export interface CheckoutGiftCardsAppendPayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * A single line item in the checkout, grouped by variant and attributes.
 */
export interface CheckoutLineItem extends Node {
  
  /**
   * Extra information in the form of an array of Key-Value pairs about the line item.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The discounts that have been allocated onto the checkout line item by discount applications.
   */
  discountAllocations: Array<DiscountAllocation>;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The quantity of the line item.
   */
  quantity: number;
  
  /**
   * Title of the line item. Defaults to the product's title.
   */
  title: string;
  
  /**
   * Unit price of the line item.
   */
  unitPrice?: MoneyV2;
  
  /**
   * Product variant of the line item.
   */
  variant?: ProductVariant;
}

/**
 * An auto-generated type for paginating through multiple CheckoutLineItems.
 * 
 */
export interface CheckoutLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CheckoutLineItemEdge>;
  
  /**
   * A list of the nodes contained in CheckoutLineItemEdge.
   */
  nodes: Array<CheckoutLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CheckoutLineItem and a cursor during pagination.
 * 
 */
export interface CheckoutLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CheckoutLineItemEdge.
   */
  node: CheckoutLineItem;
}

/**
 * The input fields to create a line item on a checkout.
 */
export interface CheckoutLineItemInput {
  
  /**
   * Extra information in the form of an array of Key-Value pairs about the line item.
   */
  customAttributes?: Array<AttributeInput>;
  
  /**
   * The quantity of the line item.
   */
  quantity: number;
  
  /**
   * The ID of the product variant for the line item.
   */
  variantId: string;
}

/**
 * The input fields to update a line item on the checkout.
 */
export interface CheckoutLineItemUpdateInput {
  
  /**
   * The ID of the line item.
   */
  id?: string;
  
  /**
   * The variant ID of the line item.
   */
  variantId?: string;
  
  /**
   * The quantity of the line item.
   */
  quantity?: number;
  
  /**
   * Extra information in the form of an array of Key-Value pairs about the line item.
   */
  customAttributes?: Array<AttributeInput>;
}

/**
 * Return type for `checkoutLineItemsAdd` mutation.
 */
export interface CheckoutLineItemsAddPayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutLineItemsRemove` mutation.
 */
export interface CheckoutLineItemsRemovePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutLineItemsReplace` mutation.
 */
export interface CheckoutLineItemsReplacePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<CheckoutUserError>;
}

/**
 * Return type for `checkoutLineItemsUpdate` mutation.
 */
export interface CheckoutLineItemsUpdatePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutShippingAddressUpdateV2` mutation.
 */
export interface CheckoutShippingAddressUpdateV2Payload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `checkoutShippingLineUpdate` mutation.
 */
export interface CheckoutShippingLineUpdatePayload {
  
  /**
   * The updated checkout object.
   */
  checkout?: Checkout;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  checkoutUserErrors: Array<CheckoutUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `checkoutUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Represents an error that happens during execution of a checkout mutation.
 */
export interface CheckoutUserError extends DisplayableError {
  
  /**
   * The error code.
   */
  code?: CheckoutErrorCode;
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/**
 * A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse.
 */
export interface Collection extends HasMetafields, Node, OnlineStorePublishable, Trackable {
  
  /**
   * Stripped description of the collection, single line with HTML tags removed.
   */
  description: string;
  
  /**
   * The description of the collection, complete with HTML formatting.
   */
  descriptionHtml: HTML;
  
  /**
   * A human-friendly unique string for the collection automatically generated from its title.
   * Limit of 255 characters.
   * 
   */
  handle: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Image associated with the collection.
   */
  image?: Image;
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
  
  /**
   * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
   */
  onlineStoreUrl?: URL;
  
  /**
   * List of products in the collection.
   */
  products: ProductConnection;
  
  /**
   * The collection's SEO information.
   */
  seo: SEO;
  
  /**
   * The collection’s name. Limit of 255 characters.
   */
  title: string;
  
  /**
   * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
   */
  trackingParameters?: string;
  
  /**
   * The date and time when the collection was last modified.
   */
  updatedAt: DateTime;
}

/**
 * An auto-generated type for paginating through multiple Collections.
 * 
 */
export interface CollectionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CollectionEdge>;
  
  /**
   * A list of the nodes contained in CollectionEdge.
   */
  nodes: Array<Collection>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * The total count of Collections.
   */
  totalCount: UnsignedInt64;
}

/**
 * An auto-generated type which holds one Collection and a cursor during pagination.
 * 
 */
export interface CollectionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CollectionEdge.
   */
  node: Collection;
}

/**
 * The set of valid sort keys for the Collection query.
 */
export const enum CollectionSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * A string containing a hexadecimal representation of a color.
 * 
 * For example, "#6A8D48".
 * 
 */
export type Color = any;

/**
 * A comment on an article.
 */
export interface Comment extends Node {
  
  /**
   * The comment’s author.
   */
  author: CommentAuthor;
  
  /**
   * Stripped content of the comment, single line with HTML tags removed.
   */
  content: string;
  
  /**
   * The content of the comment, complete with HTML formatting.
   */
  contentHtml: HTML;
  
  /**
   * A globally-unique ID.
   */
  id: string;
}

/**
 * The author of a comment.
 */
export interface CommentAuthor {
  
  /**
   * The author's email.
   */
  email: string;
  
  /**
   * The author’s name.
   */
  name: string;
}

/**
 * An auto-generated type for paginating through multiple Comments.
 * 
 */
export interface CommentConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CommentEdge>;
  
  /**
   * A list of the nodes contained in CommentEdge.
   */
  nodes: Array<Comment>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Comment and a cursor during pagination.
 * 
 */
export interface CommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CommentEdge.
   */
  node: Comment;
}

/**
 * The action for the 3DS payment redirect.
 */
export interface CompletePaymentChallenge {
  
  /**
   * The URL for the 3DS payment redirect.
   */
  redirectUrl?: URL;
}

/**
 * An error that occurred during a cart completion attempt.
 */
export interface CompletionError {
  
  /**
   * The error code.
   */
  code: CompletionErrorCode;
  
  /**
   * The error message.
   */
  message?: string;
}

/**
 * The code of the error that occurred during a cart completion attempt.
 */
export const enum CompletionErrorCode {
  ERROR = 'ERROR',
  INVENTORY_RESERVATION_ERROR = 'INVENTORY_RESERVATION_ERROR',
  PAYMENT_ERROR = 'PAYMENT_ERROR',
  PAYMENT_TRANSIENT_ERROR = 'PAYMENT_TRANSIENT_ERROR',
  PAYMENT_AMOUNT_TOO_SMALL = 'PAYMENT_AMOUNT_TOO_SMALL',
  PAYMENT_GATEWAY_NOT_ENABLED_ERROR = 'PAYMENT_GATEWAY_NOT_ENABLED_ERROR',
  PAYMENT_INSUFFICIENT_FUNDS = 'PAYMENT_INSUFFICIENT_FUNDS',
  PAYMENT_INVALID_PAYMENT_METHOD = 'PAYMENT_INVALID_PAYMENT_METHOD',
  PAYMENT_INVALID_CURRENCY = 'PAYMENT_INVALID_CURRENCY',
  PAYMENT_INVALID_CREDIT_CARD = 'PAYMENT_INVALID_CREDIT_CARD',
  PAYMENT_INVALID_BILLING_ADDRESS = 'PAYMENT_INVALID_BILLING_ADDRESS',
  PAYMENT_CARD_DECLINED = 'PAYMENT_CARD_DECLINED',
  PAYMENT_CALL_ISSUER = 'PAYMENT_CALL_ISSUER'
}

/**
 * A country.
 */
export interface Country {
  
  /**
   * The languages available for the country.
   */
  availableLanguages: Array<Language>;
  
  /**
   * The currency of the country.
   */
  currency: Currency;
  
  /**
   * The ISO code of the country.
   */
  isoCode: CountryCode;
  
  /**
   * The market that includes this country.
   */
  market?: Market;
  
  /**
   * The name of the country.
   */
  name: string;
  
  /**
   * The unit system used in the country.
   */
  unitSystem: UnitSystem;
}

/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 * 
 */
export const enum CountryCode {
  
  /**
   * Afghanistan.
   */
  AF = 'AF',
  
  /**
   * Åland Islands.
   */
  AX = 'AX',
  
  /**
   * Albania.
   */
  AL = 'AL',
  
  /**
   * Algeria.
   */
  DZ = 'DZ',
  
  /**
   * Andorra.
   */
  AD = 'AD',
  
  /**
   * Angola.
   */
  AO = 'AO',
  
  /**
   * Anguilla.
   */
  AI = 'AI',
  
  /**
   * Antigua & Barbuda.
   */
  AG = 'AG',
  
  /**
   * Argentina.
   */
  AR = 'AR',
  
  /**
   * Armenia.
   */
  AM = 'AM',
  
  /**
   * Aruba.
   */
  AW = 'AW',
  
  /**
   * Ascension Island.
   */
  AC = 'AC',
  
  /**
   * Australia.
   */
  AU = 'AU',
  
  /**
   * Austria.
   */
  AT = 'AT',
  
  /**
   * Azerbaijan.
   */
  AZ = 'AZ',
  
  /**
   * Bahamas.
   */
  BS = 'BS',
  
  /**
   * Bahrain.
   */
  BH = 'BH',
  
  /**
   * Bangladesh.
   */
  BD = 'BD',
  
  /**
   * Barbados.
   */
  BB = 'BB',
  
  /**
   * Belarus.
   */
  BY = 'BY',
  
  /**
   * Belgium.
   */
  BE = 'BE',
  
  /**
   * Belize.
   */
  BZ = 'BZ',
  
  /**
   * Benin.
   */
  BJ = 'BJ',
  
  /**
   * Bermuda.
   */
  BM = 'BM',
  
  /**
   * Bhutan.
   */
  BT = 'BT',
  
  /**
   * Bolivia.
   */
  BO = 'BO',
  
  /**
   * Bosnia & Herzegovina.
   */
  BA = 'BA',
  
  /**
   * Botswana.
   */
  BW = 'BW',
  
  /**
   * Bouvet Island.
   */
  BV = 'BV',
  
  /**
   * Brazil.
   */
  BR = 'BR',
  
  /**
   * British Indian Ocean Territory.
   */
  IO = 'IO',
  
  /**
   * Brunei.
   */
  BN = 'BN',
  
  /**
   * Bulgaria.
   */
  BG = 'BG',
  
  /**
   * Burkina Faso.
   */
  BF = 'BF',
  
  /**
   * Burundi.
   */
  BI = 'BI',
  
  /**
   * Cambodia.
   */
  KH = 'KH',
  
  /**
   * Canada.
   */
  CA = 'CA',
  
  /**
   * Cape Verde.
   */
  CV = 'CV',
  
  /**
   * Caribbean Netherlands.
   */
  BQ = 'BQ',
  
  /**
   * Cayman Islands.
   */
  KY = 'KY',
  
  /**
   * Central African Republic.
   */
  CF = 'CF',
  
  /**
   * Chad.
   */
  TD = 'TD',
  
  /**
   * Chile.
   */
  CL = 'CL',
  
  /**
   * China.
   */
  CN = 'CN',
  
  /**
   * Christmas Island.
   */
  CX = 'CX',
  
  /**
   * Cocos (Keeling) Islands.
   */
  CC = 'CC',
  
  /**
   * Colombia.
   */
  CO = 'CO',
  
  /**
   * Comoros.
   */
  KM = 'KM',
  
  /**
   * Congo - Brazzaville.
   */
  CG = 'CG',
  
  /**
   * Congo - Kinshasa.
   */
  CD = 'CD',
  
  /**
   * Cook Islands.
   */
  CK = 'CK',
  
  /**
   * Costa Rica.
   */
  CR = 'CR',
  
  /**
   * Croatia.
   */
  HR = 'HR',
  
  /**
   * Cuba.
   */
  CU = 'CU',
  
  /**
   * Curaçao.
   */
  CW = 'CW',
  
  /**
   * Cyprus.
   */
  CY = 'CY',
  
  /**
   * Czechia.
   */
  CZ = 'CZ',
  
  /**
   * Côte d’Ivoire.
   */
  CI = 'CI',
  
  /**
   * Denmark.
   */
  DK = 'DK',
  
  /**
   * Djibouti.
   */
  DJ = 'DJ',
  
  /**
   * Dominica.
   */
  DM = 'DM',
  
  /**
   * Dominican Republic.
   */
  DO = 'DO',
  
  /**
   * Ecuador.
   */
  EC = 'EC',
  
  /**
   * Egypt.
   */
  EG = 'EG',
  
  /**
   * El Salvador.
   */
  SV = 'SV',
  
  /**
   * Equatorial Guinea.
   */
  GQ = 'GQ',
  
  /**
   * Eritrea.
   */
  ER = 'ER',
  
  /**
   * Estonia.
   */
  EE = 'EE',
  
  /**
   * Eswatini.
   */
  SZ = 'SZ',
  
  /**
   * Ethiopia.
   */
  ET = 'ET',
  
  /**
   * Falkland Islands.
   */
  FK = 'FK',
  
  /**
   * Faroe Islands.
   */
  FO = 'FO',
  
  /**
   * Fiji.
   */
  FJ = 'FJ',
  
  /**
   * Finland.
   */
  FI = 'FI',
  
  /**
   * France.
   */
  FR = 'FR',
  
  /**
   * French Guiana.
   */
  GF = 'GF',
  
  /**
   * French Polynesia.
   */
  PF = 'PF',
  
  /**
   * French Southern Territories.
   */
  TF = 'TF',
  
  /**
   * Gabon.
   */
  GA = 'GA',
  
  /**
   * Gambia.
   */
  GM = 'GM',
  
  /**
   * Georgia.
   */
  GE = 'GE',
  
  /**
   * Germany.
   */
  DE = 'DE',
  
  /**
   * Ghana.
   */
  GH = 'GH',
  
  /**
   * Gibraltar.
   */
  GI = 'GI',
  
  /**
   * Greece.
   */
  GR = 'GR',
  
  /**
   * Greenland.
   */
  GL = 'GL',
  
  /**
   * Grenada.
   */
  GD = 'GD',
  
  /**
   * Guadeloupe.
   */
  GP = 'GP',
  
  /**
   * Guatemala.
   */
  GT = 'GT',
  
  /**
   * Guernsey.
   */
  GG = 'GG',
  
  /**
   * Guinea.
   */
  GN = 'GN',
  
  /**
   * Guinea-Bissau.
   */
  GW = 'GW',
  
  /**
   * Guyana.
   */
  GY = 'GY',
  
  /**
   * Haiti.
   */
  HT = 'HT',
  
  /**
   * Heard & McDonald Islands.
   */
  HM = 'HM',
  
  /**
   * Vatican City.
   */
  VA = 'VA',
  
  /**
   * Honduras.
   */
  HN = 'HN',
  
  /**
   * Hong Kong SAR.
   */
  HK = 'HK',
  
  /**
   * Hungary.
   */
  HU = 'HU',
  
  /**
   * Iceland.
   */
  IS = 'IS',
  
  /**
   * India.
   */
  IN = 'IN',
  
  /**
   * Indonesia.
   */
  ID = 'ID',
  
  /**
   * Iran.
   */
  IR = 'IR',
  
  /**
   * Iraq.
   */
  IQ = 'IQ',
  
  /**
   * Ireland.
   */
  IE = 'IE',
  
  /**
   * Isle of Man.
   */
  IM = 'IM',
  
  /**
   * Israel.
   */
  IL = 'IL',
  
  /**
   * Italy.
   */
  IT = 'IT',
  
  /**
   * Jamaica.
   */
  JM = 'JM',
  
  /**
   * Japan.
   */
  JP = 'JP',
  
  /**
   * Jersey.
   */
  JE = 'JE',
  
  /**
   * Jordan.
   */
  JO = 'JO',
  
  /**
   * Kazakhstan.
   */
  KZ = 'KZ',
  
  /**
   * Kenya.
   */
  KE = 'KE',
  
  /**
   * Kiribati.
   */
  KI = 'KI',
  
  /**
   * North Korea.
   */
  KP = 'KP',
  
  /**
   * Kosovo.
   */
  XK = 'XK',
  
  /**
   * Kuwait.
   */
  KW = 'KW',
  
  /**
   * Kyrgyzstan.
   */
  KG = 'KG',
  
  /**
   * Laos.
   */
  LA = 'LA',
  
  /**
   * Latvia.
   */
  LV = 'LV',
  
  /**
   * Lebanon.
   */
  LB = 'LB',
  
  /**
   * Lesotho.
   */
  LS = 'LS',
  
  /**
   * Liberia.
   */
  LR = 'LR',
  
  /**
   * Libya.
   */
  LY = 'LY',
  
  /**
   * Liechtenstein.
   */
  LI = 'LI',
  
  /**
   * Lithuania.
   */
  LT = 'LT',
  
  /**
   * Luxembourg.
   */
  LU = 'LU',
  
  /**
   * Macao SAR.
   */
  MO = 'MO',
  
  /**
   * Madagascar.
   */
  MG = 'MG',
  
  /**
   * Malawi.
   */
  MW = 'MW',
  
  /**
   * Malaysia.
   */
  MY = 'MY',
  
  /**
   * Maldives.
   */
  MV = 'MV',
  
  /**
   * Mali.
   */
  ML = 'ML',
  
  /**
   * Malta.
   */
  MT = 'MT',
  
  /**
   * Martinique.
   */
  MQ = 'MQ',
  
  /**
   * Mauritania.
   */
  MR = 'MR',
  
  /**
   * Mauritius.
   */
  MU = 'MU',
  
  /**
   * Mayotte.
   */
  YT = 'YT',
  
  /**
   * Mexico.
   */
  MX = 'MX',
  
  /**
   * Moldova.
   */
  MD = 'MD',
  
  /**
   * Monaco.
   */
  MC = 'MC',
  
  /**
   * Mongolia.
   */
  MN = 'MN',
  
  /**
   * Montenegro.
   */
  ME = 'ME',
  
  /**
   * Montserrat.
   */
  MS = 'MS',
  
  /**
   * Morocco.
   */
  MA = 'MA',
  
  /**
   * Mozambique.
   */
  MZ = 'MZ',
  
  /**
   * Myanmar (Burma).
   */
  MM = 'MM',
  
  /**
   * Namibia.
   */
  NA = 'NA',
  
  /**
   * Nauru.
   */
  NR = 'NR',
  
  /**
   * Nepal.
   */
  NP = 'NP',
  
  /**
   * Netherlands.
   */
  NL = 'NL',
  
  /**
   * Netherlands Antilles.
   */
  AN = 'AN',
  
  /**
   * New Caledonia.
   */
  NC = 'NC',
  
  /**
   * New Zealand.
   */
  NZ = 'NZ',
  
  /**
   * Nicaragua.
   */
  NI = 'NI',
  
  /**
   * Niger.
   */
  NE = 'NE',
  
  /**
   * Nigeria.
   */
  NG = 'NG',
  
  /**
   * Niue.
   */
  NU = 'NU',
  
  /**
   * Norfolk Island.
   */
  NF = 'NF',
  
  /**
   * North Macedonia.
   */
  MK = 'MK',
  
  /**
   * Norway.
   */
  NO = 'NO',
  
  /**
   * Oman.
   */
  OM = 'OM',
  
  /**
   * Pakistan.
   */
  PK = 'PK',
  
  /**
   * Palestinian Territories.
   */
  PS = 'PS',
  
  /**
   * Panama.
   */
  PA = 'PA',
  
  /**
   * Papua New Guinea.
   */
  PG = 'PG',
  
  /**
   * Paraguay.
   */
  PY = 'PY',
  
  /**
   * Peru.
   */
  PE = 'PE',
  
  /**
   * Philippines.
   */
  PH = 'PH',
  
  /**
   * Pitcairn Islands.
   */
  PN = 'PN',
  
  /**
   * Poland.
   */
  PL = 'PL',
  
  /**
   * Portugal.
   */
  PT = 'PT',
  
  /**
   * Qatar.
   */
  QA = 'QA',
  
  /**
   * Cameroon.
   */
  CM = 'CM',
  
  /**
   * Réunion.
   */
  RE = 'RE',
  
  /**
   * Romania.
   */
  RO = 'RO',
  
  /**
   * Russia.
   */
  RU = 'RU',
  
  /**
   * Rwanda.
   */
  RW = 'RW',
  
  /**
   * St. Barthélemy.
   */
  BL = 'BL',
  
  /**
   * St. Helena.
   */
  SH = 'SH',
  
  /**
   * St. Kitts & Nevis.
   */
  KN = 'KN',
  
  /**
   * St. Lucia.
   */
  LC = 'LC',
  
  /**
   * St. Martin.
   */
  MF = 'MF',
  
  /**
   * St. Pierre & Miquelon.
   */
  PM = 'PM',
  
  /**
   * Samoa.
   */
  WS = 'WS',
  
  /**
   * San Marino.
   */
  SM = 'SM',
  
  /**
   * São Tomé & Príncipe.
   */
  ST = 'ST',
  
  /**
   * Saudi Arabia.
   */
  SA = 'SA',
  
  /**
   * Senegal.
   */
  SN = 'SN',
  
  /**
   * Serbia.
   */
  RS = 'RS',
  
  /**
   * Seychelles.
   */
  SC = 'SC',
  
  /**
   * Sierra Leone.
   */
  SL = 'SL',
  
  /**
   * Singapore.
   */
  SG = 'SG',
  
  /**
   * Sint Maarten.
   */
  SX = 'SX',
  
  /**
   * Slovakia.
   */
  SK = 'SK',
  
  /**
   * Slovenia.
   */
  SI = 'SI',
  
  /**
   * Solomon Islands.
   */
  SB = 'SB',
  
  /**
   * Somalia.
   */
  SO = 'SO',
  
  /**
   * South Africa.
   */
  ZA = 'ZA',
  
  /**
   * South Georgia & South Sandwich Islands.
   */
  GS = 'GS',
  
  /**
   * South Korea.
   */
  KR = 'KR',
  
  /**
   * South Sudan.
   */
  SS = 'SS',
  
  /**
   * Spain.
   */
  ES = 'ES',
  
  /**
   * Sri Lanka.
   */
  LK = 'LK',
  
  /**
   * St. Vincent & Grenadines.
   */
  VC = 'VC',
  
  /**
   * Sudan.
   */
  SD = 'SD',
  
  /**
   * Suriname.
   */
  SR = 'SR',
  
  /**
   * Svalbard & Jan Mayen.
   */
  SJ = 'SJ',
  
  /**
   * Sweden.
   */
  SE = 'SE',
  
  /**
   * Switzerland.
   */
  CH = 'CH',
  
  /**
   * Syria.
   */
  SY = 'SY',
  
  /**
   * Taiwan.
   */
  TW = 'TW',
  
  /**
   * Tajikistan.
   */
  TJ = 'TJ',
  
  /**
   * Tanzania.
   */
  TZ = 'TZ',
  
  /**
   * Thailand.
   */
  TH = 'TH',
  
  /**
   * Timor-Leste.
   */
  TL = 'TL',
  
  /**
   * Togo.
   */
  TG = 'TG',
  
  /**
   * Tokelau.
   */
  TK = 'TK',
  
  /**
   * Tonga.
   */
  TO = 'TO',
  
  /**
   * Trinidad & Tobago.
   */
  TT = 'TT',
  
  /**
   * Tristan da Cunha.
   */
  TA = 'TA',
  
  /**
   * Tunisia.
   */
  TN = 'TN',
  
  /**
   * Turkey.
   */
  TR = 'TR',
  
  /**
   * Turkmenistan.
   */
  TM = 'TM',
  
  /**
   * Turks & Caicos Islands.
   */
  TC = 'TC',
  
  /**
   * Tuvalu.
   */
  TV = 'TV',
  
  /**
   * Uganda.
   */
  UG = 'UG',
  
  /**
   * Ukraine.
   */
  UA = 'UA',
  
  /**
   * United Arab Emirates.
   */
  AE = 'AE',
  
  /**
   * United Kingdom.
   */
  GB = 'GB',
  
  /**
   * United States.
   */
  US = 'US',
  
  /**
   * U.S. Outlying Islands.
   */
  UM = 'UM',
  
  /**
   * Uruguay.
   */
  UY = 'UY',
  
  /**
   * Uzbekistan.
   */
  UZ = 'UZ',
  
  /**
   * Vanuatu.
   */
  VU = 'VU',
  
  /**
   * Venezuela.
   */
  VE = 'VE',
  
  /**
   * Vietnam.
   */
  VN = 'VN',
  
  /**
   * British Virgin Islands.
   */
  VG = 'VG',
  
  /**
   * Wallis & Futuna.
   */
  WF = 'WF',
  
  /**
   * Western Sahara.
   */
  EH = 'EH',
  
  /**
   * Yemen.
   */
  YE = 'YE',
  
  /**
   * Zambia.
   */
  ZM = 'ZM',
  
  /**
   * Zimbabwe.
   */
  ZW = 'ZW',
  
  /**
   * Unknown Region.
   */
  ZZ = 'ZZ'
}

/**
 * Credit card information used for a payment.
 */
export interface CreditCard {
  
  /**
   * The brand of the credit card.
   */
  brand?: string;
  
  /**
   * The expiry month of the credit card.
   */
  expiryMonth?: number;
  
  /**
   * The expiry year of the credit card.
   */
  expiryYear?: number;
  
  /**
   * The credit card's BIN number.
   */
  firstDigits?: string;
  
  /**
   * The first name of the card holder.
   */
  firstName?: string;
  
  /**
   * The last 4 digits of the credit card.
   */
  lastDigits?: string;
  
  /**
   * The last name of the card holder.
   */
  lastName?: string;
  
  /**
   * The masked credit card number with only the last 4 digits displayed.
   */
  maskedNumber?: string;
}

/**
 * Specifies the fields required to complete a checkout with
 * a Shopify vaulted credit card payment.
 * 
 */
export interface CreditCardPaymentInputV2 {
  
  /**
   * The amount and currency of the payment.
   */
  paymentAmount: MoneyInput;
  
  /**
   * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  idempotencyKey: string;
  
  /**
   * The billing address for the payment.
   */
  billingAddress: MailingAddressInput;
  
  /**
   * The ID returned by Shopify's Card Vault.
   */
  vaultId: string;
  
  /**
   * Executes the payment in test mode if possible. Defaults to `false`.
   */
  test?: boolean;
}

/**
 * The part of the image that should remain after cropping.
 */
export const enum CropRegion {
  
  /**
   * Keep the center of the image.
   */
  CENTER = 'CENTER',
  
  /**
   * Keep the top of the image.
   */
  TOP = 'TOP',
  
  /**
   * Keep the bottom of the image.
   */
  BOTTOM = 'BOTTOM',
  
  /**
   * Keep the left of the image.
   */
  LEFT = 'LEFT',
  
  /**
   * Keep the right of the image.
   */
  RIGHT = 'RIGHT'
}

/**
 * A currency.
 */
export interface Currency {
  
  /**
   * The ISO code of the currency.
   */
  isoCode: CurrencyCode;
  
  /**
   * The name of the currency.
   */
  name: string;
  
  /**
   * The symbol of the currency.
   */
  symbol: string;
}

/**
 * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 * 
 */
export const enum CurrencyCode {
  
  /**
   * United States Dollars (USD).
   */
  USD = 'USD',
  
  /**
   * Euro (EUR).
   */
  EUR = 'EUR',
  
  /**
   * United Kingdom Pounds (GBP).
   */
  GBP = 'GBP',
  
  /**
   * Canadian Dollars (CAD).
   */
  CAD = 'CAD',
  
  /**
   * Afghan Afghani (AFN).
   */
  AFN = 'AFN',
  
  /**
   * Albanian Lek (ALL).
   */
  ALL = 'ALL',
  
  /**
   * Algerian Dinar (DZD).
   */
  DZD = 'DZD',
  
  /**
   * Angolan Kwanza (AOA).
   */
  AOA = 'AOA',
  
  /**
   * Argentine Pesos (ARS).
   */
  ARS = 'ARS',
  
  /**
   * Armenian Dram (AMD).
   */
  AMD = 'AMD',
  
  /**
   * Aruban Florin (AWG).
   */
  AWG = 'AWG',
  
  /**
   * Australian Dollars (AUD).
   */
  AUD = 'AUD',
  
  /**
   * Barbadian Dollar (BBD).
   */
  BBD = 'BBD',
  
  /**
   * Azerbaijani Manat (AZN).
   */
  AZN = 'AZN',
  
  /**
   * Bangladesh Taka (BDT).
   */
  BDT = 'BDT',
  
  /**
   * Bahamian Dollar (BSD).
   */
  BSD = 'BSD',
  
  /**
   * Bahraini Dinar (BHD).
   */
  BHD = 'BHD',
  
  /**
   * Burundian Franc (BIF).
   */
  BIF = 'BIF',
  
  /**
   * Belize Dollar (BZD).
   */
  BZD = 'BZD',
  
  /**
   * Bermudian Dollar (BMD).
   */
  BMD = 'BMD',
  
  /**
   * Bhutanese Ngultrum (BTN).
   */
  BTN = 'BTN',
  
  /**
   * Bosnia and Herzegovina Convertible Mark (BAM).
   */
  BAM = 'BAM',
  
  /**
   * Brazilian Real (BRL).
   */
  BRL = 'BRL',
  
  /**
   * Bolivian Boliviano (BOB).
   */
  BOB = 'BOB',
  
  /**
   * Botswana Pula (BWP).
   */
  BWP = 'BWP',
  
  /**
   * Brunei Dollar (BND).
   */
  BND = 'BND',
  
  /**
   * Bulgarian Lev (BGN).
   */
  BGN = 'BGN',
  
  /**
   * Burmese Kyat (MMK).
   */
  MMK = 'MMK',
  
  /**
   * Cambodian Riel.
   */
  KHR = 'KHR',
  
  /**
   * Cape Verdean escudo (CVE).
   */
  CVE = 'CVE',
  
  /**
   * Cayman Dollars (KYD).
   */
  KYD = 'KYD',
  
  /**
   * Central African CFA Franc (XAF).
   */
  XAF = 'XAF',
  
  /**
   * Chilean Peso (CLP).
   */
  CLP = 'CLP',
  
  /**
   * Chinese Yuan Renminbi (CNY).
   */
  CNY = 'CNY',
  
  /**
   * Colombian Peso (COP).
   */
  COP = 'COP',
  
  /**
   * Comorian Franc (KMF).
   */
  KMF = 'KMF',
  
  /**
   * Congolese franc (CDF).
   */
  CDF = 'CDF',
  
  /**
   * Costa Rican Colones (CRC).
   */
  CRC = 'CRC',
  
  /**
   * Croatian Kuna (HRK).
   */
  HRK = 'HRK',
  
  /**
   * Czech Koruny (CZK).
   */
  CZK = 'CZK',
  
  /**
   * Danish Kroner (DKK).
   */
  DKK = 'DKK',
  
  /**
   * Dominican Peso (DOP).
   */
  DOP = 'DOP',
  
  /**
   * East Caribbean Dollar (XCD).
   */
  XCD = 'XCD',
  
  /**
   * Egyptian Pound (EGP).
   */
  EGP = 'EGP',
  
  /**
   * Ethiopian Birr (ETB).
   */
  ETB = 'ETB',
  
  /**
   * CFP Franc (XPF).
   */
  XPF = 'XPF',
  
  /**
   * Fijian Dollars (FJD).
   */
  FJD = 'FJD',
  
  /**
   * Gambian Dalasi (GMD).
   */
  GMD = 'GMD',
  
  /**
   * Ghanaian Cedi (GHS).
   */
  GHS = 'GHS',
  
  /**
   * Guatemalan Quetzal (GTQ).
   */
  GTQ = 'GTQ',
  
  /**
   * Guyanese Dollar (GYD).
   */
  GYD = 'GYD',
  
  /**
   * Georgian Lari (GEL).
   */
  GEL = 'GEL',
  
  /**
   * Haitian Gourde (HTG).
   */
  HTG = 'HTG',
  
  /**
   * Honduran Lempira (HNL).
   */
  HNL = 'HNL',
  
  /**
   * Hong Kong Dollars (HKD).
   */
  HKD = 'HKD',
  
  /**
   * Hungarian Forint (HUF).
   */
  HUF = 'HUF',
  
  /**
   * Icelandic Kronur (ISK).
   */
  ISK = 'ISK',
  
  /**
   * Indian Rupees (INR).
   */
  INR = 'INR',
  
  /**
   * Indonesian Rupiah (IDR).
   */
  IDR = 'IDR',
  
  /**
   * Israeli New Shekel (NIS).
   */
  ILS = 'ILS',
  
  /**
   * Iraqi Dinar (IQD).
   */
  IQD = 'IQD',
  
  /**
   * Jamaican Dollars (JMD).
   */
  JMD = 'JMD',
  
  /**
   * Japanese Yen (JPY).
   */
  JPY = 'JPY',
  
  /**
   * Jersey Pound.
   */
  JEP = 'JEP',
  
  /**
   * Jordanian Dinar (JOD).
   */
  JOD = 'JOD',
  
  /**
   * Kazakhstani Tenge (KZT).
   */
  KZT = 'KZT',
  
  /**
   * Kenyan Shilling (KES).
   */
  KES = 'KES',
  
  /**
   * Kuwaiti Dinar (KWD).
   */
  KWD = 'KWD',
  
  /**
   * Kyrgyzstani Som (KGS).
   */
  KGS = 'KGS',
  
  /**
   * Laotian Kip (LAK).
   */
  LAK = 'LAK',
  
  /**
   * Latvian Lati (LVL).
   */
  LVL = 'LVL',
  
  /**
   * Lebanese Pounds (LBP).
   */
  LBP = 'LBP',
  
  /**
   * Lesotho Loti (LSL).
   */
  LSL = 'LSL',
  
  /**
   * Liberian Dollar (LRD).
   */
  LRD = 'LRD',
  
  /**
   * Lithuanian Litai (LTL).
   */
  LTL = 'LTL',
  
  /**
   * Malagasy Ariary (MGA).
   */
  MGA = 'MGA',
  
  /**
   * Macedonia Denar (MKD).
   */
  MKD = 'MKD',
  
  /**
   * Macanese Pataca (MOP).
   */
  MOP = 'MOP',
  
  /**
   * Malawian Kwacha (MWK).
   */
  MWK = 'MWK',
  
  /**
   * Maldivian Rufiyaa (MVR).
   */
  MVR = 'MVR',
  
  /**
   * Mexican Pesos (MXN).
   */
  MXN = 'MXN',
  
  /**
   * Malaysian Ringgits (MYR).
   */
  MYR = 'MYR',
  
  /**
   * Mauritian Rupee (MUR).
   */
  MUR = 'MUR',
  
  /**
   * Moldovan Leu (MDL).
   */
  MDL = 'MDL',
  
  /**
   * Moroccan Dirham.
   */
  MAD = 'MAD',
  
  /**
   * Mongolian Tugrik.
   */
  MNT = 'MNT',
  
  /**
   * Mozambican Metical.
   */
  MZN = 'MZN',
  
  /**
   * Namibian Dollar.
   */
  NAD = 'NAD',
  
  /**
   * Nepalese Rupee (NPR).
   */
  NPR = 'NPR',
  
  /**
   * Netherlands Antillean Guilder.
   */
  ANG = 'ANG',
  
  /**
   * New Zealand Dollars (NZD).
   */
  NZD = 'NZD',
  
  /**
   * Nicaraguan Córdoba (NIO).
   */
  NIO = 'NIO',
  
  /**
   * Nigerian Naira (NGN).
   */
  NGN = 'NGN',
  
  /**
   * Norwegian Kroner (NOK).
   */
  NOK = 'NOK',
  
  /**
   * Omani Rial (OMR).
   */
  OMR = 'OMR',
  
  /**
   * Panamian Balboa (PAB).
   */
  PAB = 'PAB',
  
  /**
   * Pakistani Rupee (PKR).
   */
  PKR = 'PKR',
  
  /**
   * Papua New Guinean Kina (PGK).
   */
  PGK = 'PGK',
  
  /**
   * Paraguayan Guarani (PYG).
   */
  PYG = 'PYG',
  
  /**
   * Peruvian Nuevo Sol (PEN).
   */
  PEN = 'PEN',
  
  /**
   * Philippine Peso (PHP).
   */
  PHP = 'PHP',
  
  /**
   * Polish Zlotych (PLN).
   */
  PLN = 'PLN',
  
  /**
   * Qatari Rial (QAR).
   */
  QAR = 'QAR',
  
  /**
   * Romanian Lei (RON).
   */
  RON = 'RON',
  
  /**
   * Russian Rubles (RUB).
   */
  RUB = 'RUB',
  
  /**
   * Rwandan Franc (RWF).
   */
  RWF = 'RWF',
  
  /**
   * Samoan Tala (WST).
   */
  WST = 'WST',
  
  /**
   * Saudi Riyal (SAR).
   */
  SAR = 'SAR',
  
  /**
   * Serbian dinar (RSD).
   */
  RSD = 'RSD',
  
  /**
   * Seychellois Rupee (SCR).
   */
  SCR = 'SCR',
  
  /**
   * Singapore Dollars (SGD).
   */
  SGD = 'SGD',
  
  /**
   * Sudanese Pound (SDG).
   */
  SDG = 'SDG',
  
  /**
   * Syrian Pound (SYP).
   */
  SYP = 'SYP',
  
  /**
   * South African Rand (ZAR).
   */
  ZAR = 'ZAR',
  
  /**
   * South Korean Won (KRW).
   */
  KRW = 'KRW',
  
  /**
   * South Sudanese Pound (SSP).
   */
  SSP = 'SSP',
  
  /**
   * Solomon Islands Dollar (SBD).
   */
  SBD = 'SBD',
  
  /**
   * Sri Lankan Rupees (LKR).
   */
  LKR = 'LKR',
  
  /**
   * Surinamese Dollar (SRD).
   */
  SRD = 'SRD',
  
  /**
   * Swazi Lilangeni (SZL).
   */
  SZL = 'SZL',
  
  /**
   * Swedish Kronor (SEK).
   */
  SEK = 'SEK',
  
  /**
   * Swiss Francs (CHF).
   */
  CHF = 'CHF',
  
  /**
   * Taiwan Dollars (TWD).
   */
  TWD = 'TWD',
  
  /**
   * Thai baht (THB).
   */
  THB = 'THB',
  
  /**
   * Tanzanian Shilling (TZS).
   */
  TZS = 'TZS',
  
  /**
   * Trinidad and Tobago Dollars (TTD).
   */
  TTD = 'TTD',
  
  /**
   * Tunisian Dinar (TND).
   */
  TND = 'TND',
  
  /**
   * Turkish Lira (TRY).
   */
  TRY = 'TRY',
  
  /**
   * Turkmenistani Manat (TMT).
   */
  TMT = 'TMT',
  
  /**
   * Ugandan Shilling (UGX).
   */
  UGX = 'UGX',
  
  /**
   * Ukrainian Hryvnia (UAH).
   */
  UAH = 'UAH',
  
  /**
   * United Arab Emirates Dirham (AED).
   */
  AED = 'AED',
  
  /**
   * Uruguayan Pesos (UYU).
   */
  UYU = 'UYU',
  
  /**
   * Uzbekistan som (UZS).
   */
  UZS = 'UZS',
  
  /**
   * Vanuatu Vatu (VUV).
   */
  VUV = 'VUV',
  
  /**
   * Vietnamese đồng (VND).
   */
  VND = 'VND',
  
  /**
   * West African CFA franc (XOF).
   */
  XOF = 'XOF',
  
  /**
   * Yemeni Rial (YER).
   */
  YER = 'YER',
  
  /**
   * Zambian Kwacha (ZMW).
   */
  ZMW = 'ZMW',
  
  /**
   * Belarusian Ruble (BYN).
   */
  BYN = 'BYN',
  
  /**
   * Belarusian Ruble (BYR).
   * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
   */
  BYR = 'BYR',
  
  /**
   * Djiboutian Franc (DJF).
   */
  DJF = 'DJF',
  
  /**
   * Eritrean Nakfa (ERN).
   */
  ERN = 'ERN',
  
  /**
   * Falkland Islands Pounds (FKP).
   */
  FKP = 'FKP',
  
  /**
   * Gibraltar Pounds (GIP).
   */
  GIP = 'GIP',
  
  /**
   * Guinean Franc (GNF).
   */
  GNF = 'GNF',
  
  /**
   * Iranian Rial (IRR).
   */
  IRR = 'IRR',
  
  /**
   * Kiribati Dollar (KID).
   */
  KID = 'KID',
  
  /**
   * Libyan Dinar (LYD).
   */
  LYD = 'LYD',
  
  /**
   * Mauritanian Ouguiya (MRU).
   */
  MRU = 'MRU',
  
  /**
   * Sierra Leonean Leone (SLL).
   */
  SLL = 'SLL',
  
  /**
   * Saint Helena Pounds (SHP).
   */
  SHP = 'SHP',
  
  /**
   * Somali Shilling (SOS).
   */
  SOS = 'SOS',
  
  /**
   * Sao Tome And Principe Dobra (STD).
   * @deprecated `STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.
   */
  STD = 'STD',
  
  /**
   * Sao Tome And Principe Dobra (STN).
   */
  STN = 'STN',
  
  /**
   * Tajikistani Somoni (TJS).
   */
  TJS = 'TJS',
  
  /**
   * Tongan Pa'anga (TOP).
   */
  TOP = 'TOP',
  
  /**
   * Venezuelan Bolivares (VED).
   */
  VED = 'VED',
  
  /**
   * Venezuelan Bolivares (VEF).
   * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
   */
  VEF = 'VEF',
  
  /**
   * Venezuelan Bolivares (VES).
   */
  VES = 'VES',
  
  /**
   * Unrecognized currency.
   */
  XXX = 'XXX'
}

/**
 * A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
 */
export interface Customer extends HasMetafields {
  
  /**
   * Indicates whether the customer has consented to be sent marketing material via email.
   */
  acceptsMarketing: boolean;
  
  /**
   * A list of addresses for the customer.
   */
  addresses: MailingAddressConnection;
  
  /**
   * The date and time when the customer was created.
   */
  createdAt: DateTime;
  
  /**
   * The customer’s default address.
   */
  defaultAddress?: MailingAddress;
  
  /**
   * The customer’s name, email or phone number.
   */
  displayName: string;
  
  /**
   * The customer’s email address.
   */
  email?: string;
  
  /**
   * The customer’s first name.
   */
  firstName?: string;
  
  /**
   * A unique ID for the customer.
   */
  id: string;
  
  /**
   * The customer's most recently updated, incomplete checkout.
   */
  lastIncompleteCheckout?: Checkout;
  
  /**
   * The customer’s last name.
   */
  lastName?: string;
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
  
  /**
   * The number of orders that the customer has made at the store in their lifetime.
   */
  numberOfOrders: UnsignedInt64;
  
  /**
   * The orders associated with the customer.
   */
  orders: OrderConnection;
  
  /**
   * The customer’s phone number.
   */
  phone?: string;
  
  /**
   * A comma separated list of tags that have been added to the customer.
   * Additional access scope required: unauthenticated_read_customer_tags.
   * 
   */
  tags: Array<string>;
  
  /**
   * The date and time when the customer information was updated.
   */
  updatedAt: DateTime;
}

/**
 * A CustomerAccessToken represents the unique token required to make modifications to the customer object.
 */
export interface CustomerAccessToken {
  
  /**
   * The customer’s access token.
   */
  accessToken: string;
  
  /**
   * The date and time when the customer access token expires.
   */
  expiresAt: DateTime;
}

/**
 * The input fields required to create a customer access token.
 */
export interface CustomerAccessTokenCreateInput {
  
  /**
   * The email associated to the customer.
   */
  email: string;
  
  /**
   * The login password to be used by the customer.
   */
  password: string;
}

/**
 * Return type for `customerAccessTokenCreate` mutation.
 */
export interface CustomerAccessTokenCreatePayload {
  
  /**
   * The newly created customer access token object.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerAccessTokenCreateWithMultipass` mutation.
 */
export interface CustomerAccessTokenCreateWithMultipassPayload {
  
  /**
   * An access token object associated with the customer.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
}

/**
 * Return type for `customerAccessTokenDelete` mutation.
 */
export interface CustomerAccessTokenDeletePayload {
  
  /**
   * The destroyed access token.
   */
  deletedAccessToken?: string;
  
  /**
   * ID of the destroyed customer access token.
   */
  deletedCustomerAccessTokenId?: string;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerAccessTokenRenew` mutation.
 */
export interface CustomerAccessTokenRenewPayload {
  
  /**
   * The renewed customer access token object.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerActivateByUrl` mutation.
 */
export interface CustomerActivateByUrlPayload {
  
  /**
   * The customer that was activated.
   */
  customer?: Customer;
  
  /**
   * A new customer access token for the customer.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
}

/**
 * The input fields to activate a customer.
 */
export interface CustomerActivateInput {
  
  /**
   * The activation token required to activate the customer.
   */
  activationToken: string;
  
  /**
   * New password that will be set during activation.
   */
  password: string;
}

/**
 * Return type for `customerActivate` mutation.
 */
export interface CustomerActivatePayload {
  
  /**
   * The customer object.
   */
  customer?: Customer;
  
  /**
   * A newly created customer access token object for the customer.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerAddressCreate` mutation.
 */
export interface CustomerAddressCreatePayload {
  
  /**
   * The new customer address object.
   */
  customerAddress?: MailingAddress;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerAddressDelete` mutation.
 */
export interface CustomerAddressDeletePayload {
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * ID of the deleted customer address.
   */
  deletedCustomerAddressId?: string;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerAddressUpdate` mutation.
 */
export interface CustomerAddressUpdatePayload {
  
  /**
   * The customer’s updated mailing address.
   */
  customerAddress?: MailingAddress;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * The input fields to create a new customer.
 */
export interface CustomerCreateInput {
  
  /**
   * The customer’s first name.
   */
  firstName?: string;
  
  /**
   * The customer’s last name.
   */
  lastName?: string;
  
  /**
   * The customer’s email.
   */
  email: string;
  
  /**
   * A unique phone number for the customer.
   * 
   * Formatted using E.164 standard. For example, _+16135551111_.
   * 
   */
  phone?: string;
  
  /**
   * The login password used by the customer.
   */
  password: string;
  
  /**
   * Indicates whether the customer has consented to be sent marketing material via email.
   */
  acceptsMarketing?: boolean;
}

/**
 * Return type for `customerCreate` mutation.
 */
export interface CustomerCreatePayload {
  
  /**
   * The created customer object.
   */
  customer?: Customer;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerDefaultAddressUpdate` mutation.
 */
export interface CustomerDefaultAddressUpdatePayload {
  
  /**
   * The updated customer object.
   */
  customer?: Customer;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Possible error codes that can be returned by `CustomerUserError`.
 */
export const enum CustomerErrorCode {
  
  /**
   * The input value is blank.
   */
  BLANK = 'BLANK',
  
  /**
   * The input value is invalid.
   */
  INVALID = 'INVALID',
  
  /**
   * The input value is already taken.
   */
  TAKEN = 'TAKEN',
  
  /**
   * The input value is too long.
   */
  TOO_LONG = 'TOO_LONG',
  
  /**
   * The input value is too short.
   */
  TOO_SHORT = 'TOO_SHORT',
  
  /**
   * Unidentified customer.
   */
  UNIDENTIFIED_CUSTOMER = 'UNIDENTIFIED_CUSTOMER',
  
  /**
   * Customer is disabled.
   */
  CUSTOMER_DISABLED = 'CUSTOMER_DISABLED',
  
  /**
   * Input password starts or ends with whitespace.
   */
  PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE = 'PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE',
  
  /**
   * Input contains HTML tags.
   */
  CONTAINS_HTML_TAGS = 'CONTAINS_HTML_TAGS',
  
  /**
   * Input contains URL.
   */
  CONTAINS_URL = 'CONTAINS_URL',
  
  /**
   * Invalid activation token.
   */
  TOKEN_INVALID = 'TOKEN_INVALID',
  
  /**
   * Customer already enabled.
   */
  ALREADY_ENABLED = 'ALREADY_ENABLED',
  
  /**
   * Address does not exist.
   */
  NOT_FOUND = 'NOT_FOUND',
  
  /**
   * Input email contains an invalid domain name.
   */
  BAD_DOMAIN = 'BAD_DOMAIN',
  
  /**
   * Multipass token is not valid.
   */
  INVALID_MULTIPASS_REQUEST = 'INVALID_MULTIPASS_REQUEST'
}

/**
 * Return type for `customerRecover` mutation.
 */
export interface CustomerRecoverPayload {
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Return type for `customerResetByUrl` mutation.
 */
export interface CustomerResetByUrlPayload {
  
  /**
   * The customer object which was reset.
   */
  customer?: Customer;
  
  /**
   * A newly created customer access token object for the customer.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * The input fields to reset a customer's password.
 */
export interface CustomerResetInput {
  
  /**
   * The reset token required to reset the customer’s password.
   */
  resetToken: string;
  
  /**
   * New password that will be set as part of the reset password process.
   */
  password: string;
}

/**
 * Return type for `customerReset` mutation.
 */
export interface CustomerResetPayload {
  
  /**
   * The customer object which was reset.
   */
  customer?: Customer;
  
  /**
   * A newly created customer access token object for the customer.
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * The input fields to update the Customer information.
 */
export interface CustomerUpdateInput {
  
  /**
   * The customer’s first name.
   */
  firstName?: string;
  
  /**
   * The customer’s last name.
   */
  lastName?: string;
  
  /**
   * The customer’s email.
   */
  email?: string;
  
  /**
   * A unique phone number for the customer.
   * 
   * Formatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.
   * 
   */
  phone?: string;
  
  /**
   * The login password used by the customer.
   */
  password?: string;
  
  /**
   * Indicates whether the customer has consented to be sent marketing material via email.
   */
  acceptsMarketing?: boolean;
}

/**
 * Return type for `customerUpdate` mutation.
 */
export interface CustomerUpdatePayload {
  
  /**
   * The updated customer object.
   */
  customer?: Customer;
  
  /**
   * The newly created customer access token. If the customer's password is updated, all previous access tokens
   * (including the one used to perform this mutation) become invalid, and a new token is generated.
   * 
   */
  customerAccessToken?: CustomerAccessToken;
  
  /**
   * The list of errors that occurred from executing the mutation.
   */
  customerUserErrors: Array<CustomerUserError>;
  
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead.
   */
  userErrors: Array<UserError>;
}

/**
 * Represents an error that happens during execution of a customer mutation.
 */
export interface CustomerUserError extends DisplayableError {
  
  /**
   * The error code.
   */
  code?: CustomerErrorCode;
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/**
 * Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.
 * For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is
 * represented as `"2019-09-07T15:50:00Z`".
 * 
 */
export type DateTime = any;

/**
 * A signed decimal number, which supports arbitrary precision and is serialized as a string.
 * 
 * Example values: `"29.99"`, `"29.999"`.
 * 
 */
export type Decimal = any;

/**
 * A delivery address of the buyer that is interacting with the cart.
 */
export type DeliveryAddress = MailingAddress;

/** Use this to resolve union type DeliveryAddress */
export type PossibleDeliveryAddressTypeNames = 'MailingAddress';

export interface DeliveryAddressNameMap {
  DeliveryAddress: DeliveryAddress;
  MailingAddress: MailingAddress;
}

/**
 * The input fields for delivery address preferences.
 * 
 */
export interface DeliveryAddressInput {
  
  /**
   * A delivery address preference of a buyer that is interacting with the cart.
   */
  deliveryAddress?: MailingAddressInput;
  
  /**
   * The ID of a customer address that is associated with the buyer that is interacting with the cart.
   * 
   */
  customerAddressId?: string;
}

/**
 * List of different delivery method types.
 */
export const enum DeliveryMethodType {
  
  /**
   * Shipping.
   */
  SHIPPING = 'SHIPPING',
  
  /**
   * Local Pickup.
   */
  PICK_UP = 'PICK_UP',
  
  /**
   * Retail.
   */
  RETAIL = 'RETAIL',
  
  /**
   * Local Delivery.
   */
  LOCAL = 'LOCAL',
  
  /**
   * Shipping to a Pickup Point.
   */
  PICKUP_POINT = 'PICKUP_POINT',
  
  /**
   * None.
   */
  NONE = 'NONE'
}

/**
 * Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
 */
export const enum DigitalWallet {
  
  /**
   * Apple Pay.
   */
  APPLE_PAY = 'APPLE_PAY',
  
  /**
   * Android Pay.
   */
  ANDROID_PAY = 'ANDROID_PAY',
  
  /**
   * Google Pay.
   */
  GOOGLE_PAY = 'GOOGLE_PAY',
  
  /**
   * Shopify Pay.
   */
  SHOPIFY_PAY = 'SHOPIFY_PAY'
}

/**
 * An amount discounting the line that has been allocated by a discount.
 * 
 */
export interface DiscountAllocation {
  
  /**
   * Amount of discount allocated.
   */
  allocatedAmount: MoneyV2;
  
  /**
   * The discount this allocated amount originated from.
   */
  discountApplication: DiscountApplication;
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application.
 * 
 */
export interface DiscountApplication {
  
  /**
   * The method by which the discount's value is allocated to its entitled items.
   */
  allocationMethod: DiscountApplicationAllocationMethod;
  
  /**
   * Which lines of targetType that the discount is allocated over.
   */
  targetSelection: DiscountApplicationTargetSelection;
  
  /**
   * The type of line that the discount is applicable towards.
   */
  targetType: DiscountApplicationTargetType;
  
  /**
   * The value of the discount application.
   */
  value: PricingValue;
}

/** Use this to resolve interface type DiscountApplication */
export type PossibleDiscountApplicationTypeNames =
'AutomaticDiscountApplication' |
'DiscountCodeApplication' |
'ManualDiscountApplication' |
'ScriptDiscountApplication';

export interface DiscountApplicationNameMap {
  DiscountApplication: DiscountApplication;
  AutomaticDiscountApplication: AutomaticDiscountApplication;
  DiscountCodeApplication: DiscountCodeApplication;
  ManualDiscountApplication: ManualDiscountApplication;
  ScriptDiscountApplication: ScriptDiscountApplication;
}

/**
 * The method by which the discount's value is allocated onto its entitled lines.
 */
export const enum DiscountApplicationAllocationMethod {
  
  /**
   * The value is spread across all entitled lines.
   */
  ACROSS = 'ACROSS',
  
  /**
   * The value is applied onto every entitled line.
   */
  EACH = 'EACH',
  
  /**
   * The value is specifically applied onto a particular line.
   * @deprecated Use ACROSS instead.
   */
  ONE = 'ONE'
}

/**
 * An auto-generated type for paginating through multiple DiscountApplications.
 * 
 */
export interface DiscountApplicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DiscountApplicationEdge>;
  
  /**
   * A list of the nodes contained in DiscountApplicationEdge.
   */
  nodes: Array<DiscountApplication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
 * 
 */
export interface DiscountApplicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DiscountApplicationEdge.
   */
  node: DiscountApplication;
}

/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 * 
 */
export const enum DiscountApplicationTargetSelection {
  
  /**
   * The discount is allocated onto all the lines.
   */
  ALL = 'ALL',
  
  /**
   * The discount is allocated onto only the lines that it's entitled for.
   */
  ENTITLED = 'ENTITLED',
  
  /**
   * The discount is allocated onto explicitly chosen lines.
   */
  EXPLICIT = 'EXPLICIT'
}

/**
 * The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
 * 
 */
export const enum DiscountApplicationTargetType {
  
  /**
   * The discount applies onto line items.
   */
  LINE_ITEM = 'LINE_ITEM',
  
  /**
   * The discount applies onto shipping lines.
   */
  SHIPPING_LINE = 'SHIPPING_LINE'
}

/**
 * Discount code applications capture the intentions of a discount code at
 * the time that it is applied.
 * 
 */
export interface DiscountCodeApplication extends DiscountApplication {
  
  /**
   * The method by which the discount's value is allocated to its entitled items.
   */
  allocationMethod: DiscountApplicationAllocationMethod;
  
  /**
   * Specifies whether the discount code was applied successfully.
   */
  applicable: boolean;
  
  /**
   * The string identifying the discount code that was used at the time of application.
   */
  code: string;
  
  /**
   * Which lines of targetType that the discount is allocated over.
   */
  targetSelection: DiscountApplicationTargetSelection;
  
  /**
   * The type of line that the discount is applicable towards.
   */
  targetType: DiscountApplicationTargetType;
  
  /**
   * The value of the discount application.
   */
  value: PricingValue;
}

/**
 * Represents an error in the input of a mutation.
 */
export interface DisplayableError {
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/** Use this to resolve interface type DisplayableError */
export type PossibleDisplayableErrorTypeNames =
'CartUserError' |
'CheckoutUserError' |
'CustomerUserError' |
'MetafieldDeleteUserError' |
'MetafieldsSetUserError' |
'UserError';

export interface DisplayableErrorNameMap {
  DisplayableError: DisplayableError;
  CartUserError: CartUserError;
  CheckoutUserError: CheckoutUserError;
  CustomerUserError: CustomerUserError;
  MetafieldDeleteUserError: MetafieldDeleteUserError;
  MetafieldsSetUserError: MetafieldsSetUserError;
  UserError: UserError;
}

/**
 * Represents a web address.
 */
export interface Domain {
  
  /**
   * The host name of the domain (eg: `example.com`).
   */
  host: string;
  
  /**
   * Whether SSL is enabled or not.
   */
  sslEnabled: boolean;
  
  /**
   * The URL of the domain (eg: `https://example.com`).
   */
  url: URL;
}

/**
 * Represents a video hosted outside of Shopify.
 */
export interface ExternalVideo extends Media, Node {
  
  /**
   * A word or phrase to share the nature or contents of a media.
   */
  alt?: string;
  
  /**
   * The embed URL of the video for the respective host.
   */
  embedUrl: URL;
  
  /**
   * The URL.
   * @deprecated Use `originUrl` instead.
   */
  embeddedUrl: URL;
  
  /**
   * The host of the external video.
   */
  host: MediaHost;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The media content type.
   */
  mediaContentType: MediaContentType;
  
  /**
   * The origin URL of the video on the respective host.
   */
  originUrl: URL;
  
  /**
   * The presentation for a media.
   */
  presentation?: MediaPresentation;
  
  /**
   * The preview image for the media.
   */
  previewImage?: Image;
}

/**
 * A filter that is supported on the parent field.
 */
export interface Filter {
  
  /**
   * A unique identifier.
   */
  id: string;
  
  /**
   * A human-friendly string for this filter.
   */
  label: string;
  
  /**
   * An enumeration that denotes the type of data this filter represents.
   */
  type: FilterType;
  
  /**
   * The list of values for this filter.
   */
  values: Array<FilterValue>;
}

/**
 * The type of data that the filter group represents.
 * 
 * For more information, refer to [Filter products in a collection with the Storefront API]
 * (https://shopify.dev/custom-storefronts/products-collections/filter-products).
 * 
 */
export const enum FilterType {
  
  /**
   * A list of selectable values.
   */
  LIST = 'LIST',
  
  /**
   * A range of prices.
   */
  PRICE_RANGE = 'PRICE_RANGE',
  
  /**
   * A boolean value.
   */
  BOOLEAN = 'BOOLEAN'
}

/**
 * A selectable value within a filter.
 */
export interface FilterValue {
  
  /**
   * The number of results that match this filter value.
   */
  count: number;
  
  /**
   * A unique identifier.
   */
  id: string;
  
  /**
   * An input object that can be used to filter by this value on the parent field.
   * 
   * The value is provided as a helper for building dynamic filtering UI. For example, if you have a list of selected `FilterValue` objects, you can combine their respective `input` values to use in a subsequent query.
   * 
   */
  input: JSON;
  
  /**
   * A human-friendly string for this filter value.
   */
  label: string;
}

/**
 * Represents a single fulfillment in an order.
 */
export interface Fulfillment {
  
  /**
   * List of the fulfillment's line items.
   */
  fulfillmentLineItems: FulfillmentLineItemConnection;
  
  /**
   * The name of the tracking company.
   */
  trackingCompany?: string;
  
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking number and tracking URL.
   * 
   */
  trackingInfo: Array<FulfillmentTrackingInfo>;
}

/**
 * Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item.
 */
export interface FulfillmentLineItem {
  
  /**
   * The associated order's line item.
   */
  lineItem: OrderLineItem;
  
  /**
   * The amount fulfilled in this fulfillment.
   */
  quantity: number;
}

/**
 * An auto-generated type for paginating through multiple FulfillmentLineItems.
 * 
 */
export interface FulfillmentLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<FulfillmentLineItemEdge>;
  
  /**
   * A list of the nodes contained in FulfillmentLineItemEdge.
   */
  nodes: Array<FulfillmentLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
 * 
 */
export interface FulfillmentLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of FulfillmentLineItemEdge.
   */
  node: FulfillmentLineItem;
}

/**
 * Tracking information associated with the fulfillment.
 */
export interface FulfillmentTrackingInfo {
  
  /**
   * The tracking number of the fulfillment.
   */
  number?: string;
  
  /**
   * The URL to track the fulfillment.
   */
  url?: URL;
}

/**
 * The generic file resource lets you manage files in a merchant’s store. Generic files include any file that doesn’t fit into a designated type such as image or video. Example: PDF, JSON.
 */
export interface GenericFile extends Node {
  
  /**
   * A word or phrase to indicate the contents of a file.
   */
  alt?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The MIME type of the file.
   */
  mimeType?: string;
  
  /**
   * The size of the original file in bytes.
   */
  originalFileSize?: number;
  
  /**
   * The preview image for the file.
   */
  previewImage?: Image;
  
  /**
   * The URL of the file.
   */
  url?: URL;
}

/**
 * The input fields used to specify a geographical location.
 */
export interface GeoCoordinateInput {
  
  /**
   * The coordinate's latitude value.
   */
  latitude: number;
  
  /**
   * The coordinate's longitude value.
   */
  longitude: number;
}

/**
 * A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a
 * complete list of HTML elements.
 * 
 * Example value: `"<p>Grey cotton knit sweater.</p>"`
 * 
 */
export type HTML = any;

/**
 * Represents information about the metafields associated to the specified resource.
 */
export interface HasMetafields {
  
  /**
   * Returns a metafield found by namespace and key.
   */
  metafield?: Metafield;
  
  /**
   * The metafields associated with the resource matching the supplied list of namespaces and keys.
   * 
   */
  metafields: Array<Metafield | null>;
}

/** Use this to resolve interface type HasMetafields */
export type PossibleHasMetafieldsTypeNames =
'Article' |
'Blog' |
'Cart' |
'Collection' |
'Customer' |
'Location' |
'Market' |
'Order' |
'Page' |
'Product' |
'ProductVariant' |
'Shop';

export interface HasMetafieldsNameMap {
  HasMetafields: HasMetafields;
  Article: Article;
  Blog: Blog;
  Cart: Cart;
  Collection: Collection;
  Customer: Customer;
  Location: Location;
  Market: Market;
  Order: Order;
  Page: Page;
  Product: Product;
  ProductVariant: ProductVariant;
  Shop: Shop;
}

/**
 * The input fields to identify a metafield on an owner resource by namespace and key.
 */
export interface HasMetafieldsIdentifier {
  
  /**
   * A container for a set of metafields.
   */
  namespace: string;
  
  /**
   * The identifier for the metafield.
   */
  key: string;
}

/**
 * Represents an image resource.
 */
export interface Image {
  
  /**
   * A word or phrase to share the nature or contents of an image.
   */
  altText?: string;
  
  /**
   * The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
   */
  height?: number;
  
  /**
   * A unique ID for the image.
   */
  id?: string;
  
  /**
   * The location of the original image as a URL.
   * 
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * 
   * @deprecated Use `url` instead.
   */
  originalSrc: URL;
  
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead.
   */
  src: URL;
  
  /**
   * The location of the transformed image as a URL.
   * 
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type does not support will be ignored.
   * 
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: URL;
  
  /**
   * The location of the image as a URL.
   * 
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   * 
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   * 
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   * 
   */
  url: URL;
  
  /**
   * The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
   */
  width?: number;
}

/**
 * An auto-generated type for paginating through multiple Images.
 * 
 */
export interface ImageConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ImageEdge>;
  
  /**
   * A list of the nodes contained in ImageEdge.
   */
  nodes: Array<Image>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * List of supported image content types.
 */
export const enum ImageContentType {
  
  /**
   * A PNG image.
   */
  PNG = 'PNG',
  
  /**
   * A JPG image.
   */
  JPG = 'JPG',
  
  /**
   * A WEBP image.
   */
  WEBP = 'WEBP'
}

/**
 * An auto-generated type which holds one Image and a cursor during pagination.
 * 
 */
export interface ImageEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ImageEdge.
   */
  node: Image;
}

/**
 * The available options for transforming an image.
 * 
 * All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
 * 
 */
export interface ImageTransformInput {
  
  /**
   * The region of the image to remain after cropping.
   * Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
   * The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
   * a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
   * in an image with a width of 5 and height of 10, where the right side of the image is removed.
   * 
   */
  crop?: CropRegion;
  
  /**
   * Image width in pixels between 1 and 5760.
   * 
   */
  maxWidth?: number;
  
  /**
   * Image height in pixels between 1 and 5760.
   * 
   */
  maxHeight?: number;
  
  /**
   * Image size multiplier for high-resolution retina displays. Must be within 1..3.
   * 
   */
  scale?: number;
  
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   * 
   */
  preferredContentType?: ImageContentType;
}

/**
 * A [JSON](https://www.json.org/json-en.html) object.
 * 
 * Example value:
 * `{
   *   "product": {
     *     "id": "gid://shopify/Product/1346443542550",
     *     "title": "White T-shirt",
     *     "options": [{
       *       "name": "Size",
       *       "values": ["M", "L"]
       *     }]
     *   }
     * }`
     * 
     */
    export type JSON = any;
    
    /**
     * A language.
     */
    export interface Language {
      
      /**
       * The name of the language in the language itself. If the language uses capitalization, it is capitalized for a mid-sentence position.
       */
      endonymName: string;
      
      /**
       * The ISO code.
       */
      isoCode: LanguageCode;
      
      /**
       * The name of the language in the current language.
       */
      name: string;
    }
    
    /**
     * ISO 639-1 language codes supported by Shopify.
     */
    export const enum LanguageCode {
      
      /**
       * Afrikaans.
       */
      AF = 'AF',
      
      /**
       * Akan.
       */
      AK = 'AK',
      
      /**
       * Amharic.
       */
      AM = 'AM',
      
      /**
       * Arabic.
       */
      AR = 'AR',
      
      /**
       * Assamese.
       */
      AS = 'AS',
      
      /**
       * Azerbaijani.
       */
      AZ = 'AZ',
      
      /**
       * Belarusian.
       */
      BE = 'BE',
      
      /**
       * Bulgarian.
       */
      BG = 'BG',
      
      /**
       * Bambara.
       */
      BM = 'BM',
      
      /**
       * Bangla.
       */
      BN = 'BN',
      
      /**
       * Tibetan.
       */
      BO = 'BO',
      
      /**
       * Breton.
       */
      BR = 'BR',
      
      /**
       * Bosnian.
       */
      BS = 'BS',
      
      /**
       * Catalan.
       */
      CA = 'CA',
      
      /**
       * Chechen.
       */
      CE = 'CE',
      
      /**
       * Czech.
       */
      CS = 'CS',
      
      /**
       * Welsh.
       */
      CY = 'CY',
      
      /**
       * Danish.
       */
      DA = 'DA',
      
      /**
       * German.
       */
      DE = 'DE',
      
      /**
       * Dzongkha.
       */
      DZ = 'DZ',
      
      /**
       * Ewe.
       */
      EE = 'EE',
      
      /**
       * Greek.
       */
      EL = 'EL',
      
      /**
       * English.
       */
      EN = 'EN',
      
      /**
       * Esperanto.
       */
      EO = 'EO',
      
      /**
       * Spanish.
       */
      ES = 'ES',
      
      /**
       * Estonian.
       */
      ET = 'ET',
      
      /**
       * Basque.
       */
      EU = 'EU',
      
      /**
       * Persian.
       */
      FA = 'FA',
      
      /**
       * Fulah.
       */
      FF = 'FF',
      
      /**
       * Finnish.
       */
      FI = 'FI',
      
      /**
       * Faroese.
       */
      FO = 'FO',
      
      /**
       * French.
       */
      FR = 'FR',
      
      /**
       * Western Frisian.
       */
      FY = 'FY',
      
      /**
       * Irish.
       */
      GA = 'GA',
      
      /**
       * Scottish Gaelic.
       */
      GD = 'GD',
      
      /**
       * Galician.
       */
      GL = 'GL',
      
      /**
       * Gujarati.
       */
      GU = 'GU',
      
      /**
       * Manx.
       */
      GV = 'GV',
      
      /**
       * Hausa.
       */
      HA = 'HA',
      
      /**
       * Hebrew.
       */
      HE = 'HE',
      
      /**
       * Hindi.
       */
      HI = 'HI',
      
      /**
       * Croatian.
       */
      HR = 'HR',
      
      /**
       * Hungarian.
       */
      HU = 'HU',
      
      /**
       * Armenian.
       */
      HY = 'HY',
      
      /**
       * Interlingua.
       */
      IA = 'IA',
      
      /**
       * Indonesian.
       */
      ID = 'ID',
      
      /**
       * Igbo.
       */
      IG = 'IG',
      
      /**
       * Sichuan Yi.
       */
      II = 'II',
      
      /**
       * Icelandic.
       */
      IS = 'IS',
      
      /**
       * Italian.
       */
      IT = 'IT',
      
      /**
       * Japanese.
       */
      JA = 'JA',
      
      /**
       * Javanese.
       */
      JV = 'JV',
      
      /**
       * Georgian.
       */
      KA = 'KA',
      
      /**
       * Kikuyu.
       */
      KI = 'KI',
      
      /**
       * Kazakh.
       */
      KK = 'KK',
      
      /**
       * Kalaallisut.
       */
      KL = 'KL',
      
      /**
       * Khmer.
       */
      KM = 'KM',
      
      /**
       * Kannada.
       */
      KN = 'KN',
      
      /**
       * Korean.
       */
      KO = 'KO',
      
      /**
       * Kashmiri.
       */
      KS = 'KS',
      
      /**
       * Kurdish.
       */
      KU = 'KU',
      
      /**
       * Cornish.
       */
      KW = 'KW',
      
      /**
       * Kyrgyz.
       */
      KY = 'KY',
      
      /**
       * Luxembourgish.
       */
      LB = 'LB',
      
      /**
       * Ganda.
       */
      LG = 'LG',
      
      /**
       * Lingala.
       */
      LN = 'LN',
      
      /**
       * Lao.
       */
      LO = 'LO',
      
      /**
       * Lithuanian.
       */
      LT = 'LT',
      
      /**
       * Luba-Katanga.
       */
      LU = 'LU',
      
      /**
       * Latvian.
       */
      LV = 'LV',
      
      /**
       * Malagasy.
       */
      MG = 'MG',
      
      /**
       * Māori.
       */
      MI = 'MI',
      
      /**
       * Macedonian.
       */
      MK = 'MK',
      
      /**
       * Malayalam.
       */
      ML = 'ML',
      
      /**
       * Mongolian.
       */
      MN = 'MN',
      
      /**
       * Marathi.
       */
      MR = 'MR',
      
      /**
       * Malay.
       */
      MS = 'MS',
      
      /**
       * Maltese.
       */
      MT = 'MT',
      
      /**
       * Burmese.
       */
      MY = 'MY',
      
      /**
       * Norwegian (Bokmål).
       */
      NB = 'NB',
      
      /**
       * North Ndebele.
       */
      ND = 'ND',
      
      /**
       * Nepali.
       */
      NE = 'NE',
      
      /**
       * Dutch.
       */
      NL = 'NL',
      
      /**
       * Norwegian Nynorsk.
       */
      NN = 'NN',
      
      /**
       * Norwegian.
       */
      NO = 'NO',
      
      /**
       * Oromo.
       */
      OM = 'OM',
      
      /**
       * Odia.
       */
      OR = 'OR',
      
      /**
       * Ossetic.
       */
      OS = 'OS',
      
      /**
       * Punjabi.
       */
      PA = 'PA',
      
      /**
       * Polish.
       */
      PL = 'PL',
      
      /**
       * Pashto.
       */
      PS = 'PS',
      
      /**
       * Portuguese (Brazil).
       */
      PT_BR = 'PT_BR',
      
      /**
       * Portuguese (Portugal).
       */
      PT_PT = 'PT_PT',
      
      /**
       * Quechua.
       */
      QU = 'QU',
      
      /**
       * Romansh.
       */
      RM = 'RM',
      
      /**
       * Rundi.
       */
      RN = 'RN',
      
      /**
       * Romanian.
       */
      RO = 'RO',
      
      /**
       * Russian.
       */
      RU = 'RU',
      
      /**
       * Kinyarwanda.
       */
      RW = 'RW',
      
      /**
       * Sindhi.
       */
      SD = 'SD',
      
      /**
       * Northern Sami.
       */
      SE = 'SE',
      
      /**
       * Sango.
       */
      SG = 'SG',
      
      /**
       * Sinhala.
       */
      SI = 'SI',
      
      /**
       * Slovak.
       */
      SK = 'SK',
      
      /**
       * Slovenian.
       */
      SL = 'SL',
      
      /**
       * Shona.
       */
      SN = 'SN',
      
      /**
       * Somali.
       */
      SO = 'SO',
      
      /**
       * Albanian.
       */
      SQ = 'SQ',
      
      /**
       * Serbian.
       */
      SR = 'SR',
      
      /**
       * Sundanese.
       */
      SU = 'SU',
      
      /**
       * Swedish.
       */
      SV = 'SV',
      
      /**
       * Swahili.
       */
      SW = 'SW',
      
      /**
       * Tamil.
       */
      TA = 'TA',
      
      /**
       * Telugu.
       */
      TE = 'TE',
      
      /**
       * Tajik.
       */
      TG = 'TG',
      
      /**
       * Thai.
       */
      TH = 'TH',
      
      /**
       * Tigrinya.
       */
      TI = 'TI',
      
      /**
       * Turkmen.
       */
      TK = 'TK',
      
      /**
       * Tongan.
       */
      TO = 'TO',
      
      /**
       * Turkish.
       */
      TR = 'TR',
      
      /**
       * Tatar.
       */
      TT = 'TT',
      
      /**
       * Uyghur.
       */
      UG = 'UG',
      
      /**
       * Ukrainian.
       */
      UK = 'UK',
      
      /**
       * Urdu.
       */
      UR = 'UR',
      
      /**
       * Uzbek.
       */
      UZ = 'UZ',
      
      /**
       * Vietnamese.
       */
      VI = 'VI',
      
      /**
       * Wolof.
       */
      WO = 'WO',
      
      /**
       * Xhosa.
       */
      XH = 'XH',
      
      /**
       * Yiddish.
       */
      YI = 'YI',
      
      /**
       * Yoruba.
       */
      YO = 'YO',
      
      /**
       * Chinese (Simplified).
       */
      ZH_CN = 'ZH_CN',
      
      /**
       * Chinese (Traditional).
       */
      ZH_TW = 'ZH_TW',
      
      /**
       * Zulu.
       */
      ZU = 'ZU',
      
      /**
       * Chinese.
       */
      ZH = 'ZH',
      
      /**
       * Portuguese.
       */
      PT = 'PT',
      
      /**
       * Church Slavic.
       */
      CU = 'CU',
      
      /**
       * Volapük.
       */
      VO = 'VO'
    }
    
    /**
     * Information about the localized experiences configured for the shop.
     */
    export interface Localization {
      
      /**
       * The list of countries with enabled localized experiences.
       */
      availableCountries: Array<Country>;
      
      /**
       * The list of languages available for the active country.
       */
      availableLanguages: Array<Language>;
      
      /**
       * The country of the active localized experience. Use the `@inContext` directive to change this value.
       */
      country: Country;
      
      /**
       * The language of the active localized experience. Use the `@inContext` directive to change this value.
       */
      language: Language;
      
      /**
       * The market including the country of the active localized experience. Use the `@inContext` directive to change this value.
       */
      market: Market;
    }
    
    /**
     * Represents a location where product inventory is held.
     */
    export interface Location extends HasMetafields, Node {
      
      /**
       * The address of the location.
       */
      address: LocationAddress;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * The name of the location.
       */
      name: string;
    }
    
    /**
     * Represents the address of a location.
     * 
     */
    export interface LocationAddress {
      
      /**
       * The first line of the address for the location.
       */
      address1?: string;
      
      /**
       * The second line of the address for the location.
       */
      address2?: string;
      
      /**
       * The city of the location.
       */
      city?: string;
      
      /**
       * The country of the location.
       */
      country?: string;
      
      /**
       * The country code of the location.
       */
      countryCode?: string;
      
      /**
       * A formatted version of the address for the location.
       */
      formatted: Array<string>;
      
      /**
       * The latitude coordinates of the location.
       */
      latitude?: number;
      
      /**
       * The longitude coordinates of the location.
       */
      longitude?: number;
      
      /**
       * The phone number of the location.
       */
      phone?: string;
      
      /**
       * The province of the location.
       */
      province?: string;
      
      /**
       * The code for the province, state, or district of the address of the location.
       * 
       */
      provinceCode?: string;
      
      /**
       * The ZIP code of the location.
       */
      zip?: string;
    }
    
    /**
     * An auto-generated type for paginating through multiple Locations.
     * 
     */
    export interface LocationConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<LocationEdge>;
      
      /**
       * A list of the nodes contained in LocationEdge.
       */
      nodes: Array<Location>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one Location and a cursor during pagination.
     * 
     */
    export interface LocationEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of LocationEdge.
       */
      node: Location;
    }
    
    /**
     * The set of valid sort keys for the Location query.
     */
    export const enum LocationSortKeys {
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by the `name` value.
       */
      NAME = 'NAME',
      
      /**
       * Sort by the `city` value.
       */
      CITY = 'CITY',
      
      /**
       * Sort by the `distance` value.
       */
      DISTANCE = 'DISTANCE'
    }
    
    /**
     * Represents a mailing address for customers and shipping.
     */
    export interface MailingAddress extends Node {
      
      /**
       * The first line of the address. Typically the street address or PO Box number.
       */
      address1?: string;
      
      /**
       * The second line of the address. Typically the number of the apartment, suite, or unit.
       * 
       */
      address2?: string;
      
      /**
       * The name of the city, district, village, or town.
       * 
       */
      city?: string;
      
      /**
       * The name of the customer's company or organization.
       * 
       */
      company?: string;
      
      /**
       * The name of the country.
       * 
       */
      country?: string;
      
      /**
       * The two-letter code for the country of the address.
       * 
       * For example, US.
       * 
       * @deprecated Use `countryCodeV2` instead.
       */
      countryCode?: string;
      
      /**
       * The two-letter code for the country of the address.
       * 
       * For example, US.
       * 
       */
      countryCodeV2?: CountryCode;
      
      /**
       * The first name of the customer.
       */
      firstName?: string;
      
      /**
       * A formatted version of the address, customized by the provided arguments.
       */
      formatted: Array<string>;
      
      /**
       * A comma-separated list of the values for city, province, and country.
       */
      formattedArea?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The last name of the customer.
       */
      lastName?: string;
      
      /**
       * The latitude coordinate of the customer address.
       */
      latitude?: number;
      
      /**
       * The longitude coordinate of the customer address.
       */
      longitude?: number;
      
      /**
       * The full name of the customer, based on firstName and lastName.
       * 
       */
      name?: string;
      
      /**
       * A unique phone number for the customer.
       * 
       * Formatted using E.164 standard. For example, _+16135551111_.
       * 
       */
      phone?: string;
      
      /**
       * The region of the address, such as the province, state, or district.
       */
      province?: string;
      
      /**
       * The two-letter code for the region.
       * 
       * For example, ON.
       * 
       */
      provinceCode?: string;
      
      /**
       * The zip or postal code of the address.
       */
      zip?: string;
    }
    
    /**
     * An auto-generated type for paginating through multiple MailingAddresses.
     * 
     */
    export interface MailingAddressConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<MailingAddressEdge>;
      
      /**
       * A list of the nodes contained in MailingAddressEdge.
       */
      nodes: Array<MailingAddress>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one MailingAddress and a cursor during pagination.
     * 
     */
    export interface MailingAddressEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of MailingAddressEdge.
       */
      node: MailingAddress;
    }
    
    /**
     * The input fields to create or update a mailing address.
     */
    export interface MailingAddressInput {
      
      /**
       * The first line of the address. Typically the street address or PO Box number.
       * 
       */
      address1?: string;
      
      /**
       * The second line of the address. Typically the number of the apartment, suite, or unit.
       * 
       */
      address2?: string;
      
      /**
       * The name of the city, district, village, or town.
       * 
       */
      city?: string;
      
      /**
       * The name of the customer's company or organization.
       * 
       */
      company?: string;
      
      /**
       * The name of the country.
       */
      country?: string;
      
      /**
       * The first name of the customer.
       */
      firstName?: string;
      
      /**
       * The last name of the customer.
       */
      lastName?: string;
      
      /**
       * A unique phone number for the customer.
       * 
       * Formatted using E.164 standard. For example, _+16135551111_.
       * 
       */
      phone?: string;
      
      /**
       * The region of the address, such as the province, state, or district.
       */
      province?: string;
      
      /**
       * The zip or postal code of the address.
       */
      zip?: string;
    }
    
    /**
     * Manual discount applications capture the intentions of a discount that was manually created.
     * 
     */
    export interface ManualDiscountApplication extends DiscountApplication {
      
      /**
       * The method by which the discount's value is allocated to its entitled items.
       */
      allocationMethod: DiscountApplicationAllocationMethod;
      
      /**
       * The description of the application.
       */
      description?: string;
      
      /**
       * Which lines of targetType that the discount is allocated over.
       */
      targetSelection: DiscountApplicationTargetSelection;
      
      /**
       * The type of line that the discount is applicable towards.
       */
      targetType: DiscountApplicationTargetType;
      
      /**
       * The title of the application.
       */
      title: string;
      
      /**
       * The value of the discount application.
       */
      value: PricingValue;
    }
    
    /**
     * A group of one or more regions of the world that a merchant is targeting for sales. To learn more about markets, refer to [the Shopify Markets conceptual overview](/docs/apps/markets).
     */
    export interface Market extends HasMetafields, Node {
      
      /**
       * A human-readable unique string for the market automatically generated from its title.
       * 
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
    }
    
    /**
     * Represents a media interface.
     */
    export interface Media {
      
      /**
       * A word or phrase to share the nature or contents of a media.
       */
      alt?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The media content type.
       */
      mediaContentType: MediaContentType;
      
      /**
       * The presentation for a media.
       */
      presentation?: MediaPresentation;
      
      /**
       * The preview image for the media.
       */
      previewImage?: Image;
    }
    
    /** Use this to resolve interface type Media */
    export type PossibleMediaTypeNames =
    'ExternalVideo' |
    'MediaImage' |
    'Model3d' |
    'Video';
    
    export interface MediaNameMap {
      Media: Media;
      ExternalVideo: ExternalVideo;
      MediaImage: MediaImage;
      Model3d: Model3d;
      Video: Video;
    }
    
    /**
     * An auto-generated type for paginating through multiple Media.
     * 
     */
    export interface MediaConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<MediaEdge>;
      
      /**
       * A list of the nodes contained in MediaEdge.
       */
      nodes: Array<Media>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * The possible content types for a media object.
     */
    export const enum MediaContentType {
      
      /**
       * An externally hosted video.
       */
      EXTERNAL_VIDEO = 'EXTERNAL_VIDEO',
      
      /**
       * A Shopify hosted image.
       */
      IMAGE = 'IMAGE',
      
      /**
       * A 3d model.
       */
      MODEL_3D = 'MODEL_3D',
      
      /**
       * A Shopify hosted video.
       */
      VIDEO = 'VIDEO'
    }
    
    /**
     * An auto-generated type which holds one Media and a cursor during pagination.
     * 
     */
    export interface MediaEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of MediaEdge.
       */
      node: Media;
    }
    
    /**
     * Host for a Media Resource.
     */
    export const enum MediaHost {
      
      /**
       * Host for YouTube embedded videos.
       */
      YOUTUBE = 'YOUTUBE',
      
      /**
       * Host for Vimeo embedded videos.
       */
      VIMEO = 'VIMEO'
    }
    
    /**
     * Represents a Shopify hosted image.
     */
    export interface MediaImage extends Media, Node {
      
      /**
       * A word or phrase to share the nature or contents of a media.
       */
      alt?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The image for the media.
       */
      image?: Image;
      
      /**
       * The media content type.
       */
      mediaContentType: MediaContentType;
      
      /**
       * The presentation for a media.
       */
      presentation?: MediaPresentation;
      
      /**
       * The preview image for the media.
       */
      previewImage?: Image;
    }
    
    /**
     * A media presentation.
     */
    export interface MediaPresentation extends Node {
      
      /**
       * A JSON object representing a presentation view.
       */
      asJson?: JSON;
      
      /**
       * A globally-unique ID.
       */
      id: string;
    }
    
    /**
     * The possible formats for a media presentation.
     */
    export const enum MediaPresentationFormat {
      
      /**
       * A model viewer presentation.
       */
      MODEL_VIEWER = 'MODEL_VIEWER',
      
      /**
       * A media image presentation.
       */
      IMAGE = 'IMAGE'
    }
    
    /**
     * A [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) representing a hierarchy
     * of hyperlinks (items).
     * 
     */
    export interface Menu extends Node {
      
      /**
       * The menu's handle.
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The menu's child items.
       */
      items: Array<MenuItem>;
      
      /**
       * The count of items on the menu.
       */
      itemsCount: number;
      
      /**
       * The menu's title.
       */
      title: string;
    }
    
    /**
     * A menu item within a parent menu.
     * 
     */
    export interface MenuItem extends Node {
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The menu item's child items.
       */
      items: Array<MenuItem>;
      
      /**
       * The linked resource.
       */
      resource?: MenuItemResource;
      
      /**
       * The ID of the linked resource.
       */
      resourceId?: string;
      
      /**
       * The menu item's tags to filter a collection.
       */
      tags: Array<string>;
      
      /**
       * The menu item's title.
       */
      title: string;
      
      /**
       * The menu item's type.
       */
      type: MenuItemType;
      
      /**
       * The menu item's URL.
       */
      url?: URL;
    }
    
    /**
     * The list of possible resources a `MenuItem` can reference.
     * 
     */
    export type MenuItemResource =
    Article |
    Blog |
    Collection |
    Page |
    Product |
    ShopPolicy;
    
    /** Use this to resolve union type MenuItemResource */
    export type PossibleMenuItemResourceTypeNames =
    'Article' |
    'Blog' |
    'Collection' |
    'Page' |
    'Product' |
    'ShopPolicy';
    
    export interface MenuItemResourceNameMap {
      MenuItemResource: MenuItemResource;
      Article: Article;
      Blog: Blog;
      Collection: Collection;
      Page: Page;
      Product: Product;
      ShopPolicy: ShopPolicy;
    }
    
    /**
     * A menu item type.
     */
    export const enum MenuItemType {
      
      /**
       * A frontpage link.
       */
      FRONTPAGE = 'FRONTPAGE',
      
      /**
       * A collection link.
       */
      COLLECTION = 'COLLECTION',
      
      /**
       * A collection link.
       */
      COLLECTIONS = 'COLLECTIONS',
      
      /**
       * A product link.
       */
      PRODUCT = 'PRODUCT',
      
      /**
       * A catalog link.
       */
      CATALOG = 'CATALOG',
      
      /**
       * A page link.
       */
      PAGE = 'PAGE',
      
      /**
       * A blog link.
       */
      BLOG = 'BLOG',
      
      /**
       * An article link.
       */
      ARTICLE = 'ARTICLE',
      
      /**
       * A search link.
       */
      SEARCH = 'SEARCH',
      
      /**
       * A shop policy link.
       */
      SHOP_POLICY = 'SHOP_POLICY',
      
      /**
       * An http link.
       */
      HTTP = 'HTTP'
    }
    
    /**
     * The merchandise to be purchased at checkout.
     */
    export type Merchandise = ProductVariant;
    
    /** Use this to resolve union type Merchandise */
    export type PossibleMerchandiseTypeNames = 'ProductVariant';
    
    export interface MerchandiseNameMap {
      Merchandise: Merchandise;
      ProductVariant: ProductVariant;
    }
    
    /**
     * Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
     * comprised of keys, values, and value types.
     * 
     */
    export interface Metafield extends Node {
      
      /**
       * The date and time when the storefront metafield was created.
       */
      createdAt: DateTime;
      
      /**
       * The description of a metafield.
       */
      description?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The unique identifier for the metafield within its namespace.
       */
      key: string;
      
      /**
       * The container for a group of metafields that the metafield is associated with.
       */
      namespace: string;
      
      /**
       * The type of resource that the metafield is attached to.
       */
      parentResource: MetafieldParentResource;
      
      /**
       * Returns a reference object if the metafield's type is a resource reference.
       */
      reference?: MetafieldReference;
      
      /**
       * A list of reference objects if the metafield's type is a resource reference list.
       */
      references?: MetafieldReferenceConnection;
      
      /**
       * The type name of the metafield.
       * Refer to the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
       * 
       */
      type: string;
      
      /**
       * The date and time when the metafield was last updated.
       */
      updatedAt: DateTime;
      
      /**
       * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
       */
      value: string;
    }
    
    /**
     * Possible error codes that can be returned by `MetafieldDeleteUserError`.
     */
    export const enum MetafieldDeleteErrorCode {
      
      /**
       * The owner ID is invalid.
       */
      INVALID_OWNER = 'INVALID_OWNER',
      
      /**
       * Metafield not found.
       */
      METAFIELD_DOES_NOT_EXIST = 'METAFIELD_DOES_NOT_EXIST'
    }
    
    /**
     * An error that occurs during the execution of cart metafield deletion.
     */
    export interface MetafieldDeleteUserError extends DisplayableError {
      
      /**
       * The error code.
       */
      code?: MetafieldDeleteErrorCode;
      
      /**
       * The path to the input field that caused the error.
       */
      field?: Array<string>;
      
      /**
       * The error message.
       */
      message: string;
    }
    
    /**
     * A filter used to view a subset of products in a collection matching a specific metafield value.
     * 
     * Only the following metafield types are currently supported:
     * - `number_integer`
     * - `number_decimal`
     * - `single_line_text_field`
     * - `boolean` as of 2022-04.
     * 
     */
    export interface MetafieldFilter {
      
      /**
       * The namespace of the metafield to filter on.
       */
      namespace: string;
      
      /**
       * The key of the metafield to filter on.
       */
      key: string;
      
      /**
       * The value of the metafield.
       */
      value: string;
    }
    
    /**
     * A resource that the metafield belongs to.
     */
    export type MetafieldParentResource =
    Article |
    Blog |
    Cart |
    Collection |
    Customer |
    Location |
    Market |
    Order |
    Page |
    Product |
    ProductVariant |
    Shop;
    
    /** Use this to resolve union type MetafieldParentResource */
    export type PossibleMetafieldParentResourceTypeNames =
    'Article' |
    'Blog' |
    'Cart' |
    'Collection' |
    'Customer' |
    'Location' |
    'Market' |
    'Order' |
    'Page' |
    'Product' |
    'ProductVariant' |
    'Shop';
    
    export interface MetafieldParentResourceNameMap {
      MetafieldParentResource: MetafieldParentResource;
      Article: Article;
      Blog: Blog;
      Cart: Cart;
      Collection: Collection;
      Customer: Customer;
      Location: Location;
      Market: Market;
      Order: Order;
      Page: Page;
      Product: Product;
      ProductVariant: ProductVariant;
      Shop: Shop;
    }
    
    /**
     * Returns the resource which is being referred to by a metafield.
     * 
     */
    export type MetafieldReference =
    Collection |
    GenericFile |
    MediaImage |
    Metaobject |
    Page |
    Product |
    ProductVariant |
    Video;
    
    /** Use this to resolve union type MetafieldReference */
    export type PossibleMetafieldReferenceTypeNames =
    'Collection' |
    'GenericFile' |
    'MediaImage' |
    'Metaobject' |
    'Page' |
    'Product' |
    'ProductVariant' |
    'Video';
    
    export interface MetafieldReferenceNameMap {
      MetafieldReference: MetafieldReference;
      Collection: Collection;
      GenericFile: GenericFile;
      MediaImage: MediaImage;
      Metaobject: Metaobject;
      Page: Page;
      Product: Product;
      ProductVariant: ProductVariant;
      Video: Video;
    }
    
    /**
     * An auto-generated type for paginating through multiple MetafieldReferences.
     * 
     */
    export interface MetafieldReferenceConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<MetafieldReferenceEdge>;
      
      /**
       * A list of the nodes contained in MetafieldReferenceEdge.
       */
      nodes: Array<MetafieldReference>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one MetafieldReference and a cursor during pagination.
     * 
     */
    export interface MetafieldReferenceEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of MetafieldReferenceEdge.
       */
      node: MetafieldReference;
    }
    
    /**
     * An error that occurs during the execution of `MetafieldsSet`.
     */
    export interface MetafieldsSetUserError extends DisplayableError {
      
      /**
       * The error code.
       */
      code?: MetafieldsSetUserErrorCode;
      
      /**
       * The index of the array element that's causing the error.
       */
      elementIndex?: number;
      
      /**
       * The path to the input field that caused the error.
       */
      field?: Array<string>;
      
      /**
       * The error message.
       */
      message: string;
    }
    
    /**
     * Possible error codes that can be returned by `MetafieldsSetUserError`.
     */
    export const enum MetafieldsSetUserErrorCode {
      
      /**
       * The input value is blank.
       */
      BLANK = 'BLANK',
      
      /**
       * The input value isn't included in the list.
       */
      INCLUSION = 'INCLUSION',
      
      /**
       * The input value should be less than or equal to the maximum value allowed.
       */
      LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
      
      /**
       * The input value needs to be blank.
       */
      PRESENT = 'PRESENT',
      
      /**
       * The input value is too short.
       */
      TOO_SHORT = 'TOO_SHORT',
      
      /**
       * The input value is too long.
       */
      TOO_LONG = 'TOO_LONG',
      
      /**
       * The owner ID is invalid.
       */
      INVALID_OWNER = 'INVALID_OWNER',
      
      /**
       * The value is invalid for metafield type or for definition options.
       */
      INVALID_VALUE = 'INVALID_VALUE',
      
      /**
       * The type is invalid.
       */
      INVALID_TYPE = 'INVALID_TYPE'
    }
    
    /**
     * An instance of a user-defined model based on a MetaobjectDefinition.
     */
    export interface Metaobject extends Node {
      
      /**
       * Accesses a field of the object by key.
       */
      field?: MetaobjectField;
      
      /**
       * All object fields with defined values.
       * Omitted object keys can be assumed null, and no guarantees are made about field order.
       * 
       */
      fields: Array<MetaobjectField>;
      
      /**
       * The unique handle of the metaobject. Useful as a custom ID.
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The type of the metaobject. Defines the namespace of its associated metafields.
       */
      type: string;
      
      /**
       * The date and time when the metaobject was last updated.
       */
      updatedAt: DateTime;
    }
    
    /**
     * An auto-generated type for paginating through multiple Metaobjects.
     * 
     */
    export interface MetaobjectConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<MetaobjectEdge>;
      
      /**
       * A list of the nodes contained in MetaobjectEdge.
       */
      nodes: Array<Metaobject>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one Metaobject and a cursor during pagination.
     * 
     */
    export interface MetaobjectEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of MetaobjectEdge.
       */
      node: Metaobject;
    }
    
    /**
     * Provides the value of a Metaobject field.
     */
    export interface MetaobjectField {
      
      /**
       * The field key.
       */
      key: string;
      
      /**
       * A referenced object if the field type is a resource reference.
       */
      reference?: MetafieldReference;
      
      /**
       * A list of referenced objects if the field type is a resource reference list.
       */
      references?: MetafieldReferenceConnection;
      
      /**
       * The type name of the field.
       * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
       * 
       */
      type: string;
      
      /**
       * The field value.
       */
      value?: string;
    }
    
    /**
     * The input fields used to retrieve a metaobject by handle.
     */
    export interface MetaobjectHandleInput {
      
      /**
       * The handle of the metaobject.
       */
      handle: string;
      
      /**
       * The type of the metaobject.
       */
      type: string;
    }
    
    /**
     * Represents a Shopify hosted 3D model.
     */
    export interface Model3d extends Media, Node {
      
      /**
       * A word or phrase to share the nature or contents of a media.
       */
      alt?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The media content type.
       */
      mediaContentType: MediaContentType;
      
      /**
       * The presentation for a media.
       */
      presentation?: MediaPresentation;
      
      /**
       * The preview image for the media.
       */
      previewImage?: Image;
      
      /**
       * The sources for a 3d model.
       */
      sources: Array<Model3dSource>;
    }
    
    /**
     * Represents a source for a Shopify hosted 3d model.
     */
    export interface Model3dSource {
      
      /**
       * The filesize of the 3d model.
       */
      filesize: number;
      
      /**
       * The format of the 3d model.
       */
      format: string;
      
      /**
       * The MIME type of the 3d model.
       */
      mimeType: string;
      
      /**
       * The URL of the 3d model.
       */
      url: string;
    }
    
    /**
     * The input fields for a monetary value with currency.
     */
    export interface MoneyInput {
      
      /**
       * Decimal money amount.
       */
      amount: Decimal;
      
      /**
       * Currency of the money.
       */
      currencyCode: CurrencyCode;
    }
    
    /**
     * A monetary value with currency.
     * 
     */
    export interface MoneyV2 {
      
      /**
       * Decimal money amount.
       */
      amount: Decimal;
      
      /**
       * Currency of the money.
       */
      currencyCode: CurrencyCode;
    }
    
    /**
     * The schema’s entry-point for mutations. This acts as the public, top-level API from which all mutation queries must start.
     */
    export interface Mutation {
      
      /**
       * Updates the attributes on a cart.
       */
      cartAttributesUpdate?: CartAttributesUpdatePayload;
      
      /**
       * Updates customer information associated with a cart.
       * Buyer identity is used to determine
       * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
       * and should match the customer's shipping address.
       * 
       */
      cartBuyerIdentityUpdate?: CartBuyerIdentityUpdatePayload;
      
      /**
       * Creates a new cart.
       */
      cartCreate?: CartCreatePayload;
      
      /**
       * Updates the discount codes applied to the cart.
       */
      cartDiscountCodesUpdate?: CartDiscountCodesUpdatePayload;
      
      /**
       * Adds a merchandise line to the cart.
       */
      cartLinesAdd?: CartLinesAddPayload;
      
      /**
       * Removes one or more merchandise lines from the cart.
       */
      cartLinesRemove?: CartLinesRemovePayload;
      
      /**
       * Updates one or more merchandise lines on a cart.
       */
      cartLinesUpdate?: CartLinesUpdatePayload;
      
      /**
       * Deletes a cart metafield.
       */
      cartMetafieldDelete?: CartMetafieldDeletePayload;
      
      /**
       * Sets cart metafield values. Cart metafield values will be set regardless if they were previously created or not.
       * 
       * Allows a maximum of 25 cart metafields to be set at a time.
       * 
       */
      cartMetafieldsSet?: CartMetafieldsSetPayload;
      
      /**
       * Updates the note on the cart.
       */
      cartNoteUpdate?: CartNoteUpdatePayload;
      
      /**
       * Update the customer's payment method that will be used to checkout.
       */
      cartPaymentUpdate?: CartPaymentUpdatePayload;
      
      /**
       * Update the selected delivery options for a delivery group.
       */
      cartSelectedDeliveryOptionsUpdate?: CartSelectedDeliveryOptionsUpdatePayload;
      
      /**
       * Submit the cart for checkout completion.
       */
      cartSubmitForCompletion?: CartSubmitForCompletionPayload;
      
      /**
       * Updates the attributes of a checkout if `allowPartialAddresses` is `true`.
       */
      checkoutAttributesUpdateV2?: CheckoutAttributesUpdateV2Payload;
      
      /**
       * Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card.
       */
      checkoutCompleteFree?: CheckoutCompleteFreePayload;
      
      /**
       * Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to  [_request payment processing_](https://shopify.dev/apps/channels/getting-started#request-payment-processing).
       */
      checkoutCompleteWithCreditCardV2?: CheckoutCompleteWithCreditCardV2Payload;
      
      /**
       * Completes a checkout with a tokenized payment.
       */
      checkoutCompleteWithTokenizedPaymentV3?: CheckoutCompleteWithTokenizedPaymentV3Payload;
      
      /**
       * Creates a new checkout.
       */
      checkoutCreate?: CheckoutCreatePayload;
      
      /**
       * Associates a customer to the checkout.
       */
      checkoutCustomerAssociateV2?: CheckoutCustomerAssociateV2Payload;
      
      /**
       * Disassociates the current checkout customer from the checkout.
       */
      checkoutCustomerDisassociateV2?: CheckoutCustomerDisassociateV2Payload;
      
      /**
       * Applies a discount to an existing checkout using a discount code.
       */
      checkoutDiscountCodeApplyV2?: CheckoutDiscountCodeApplyV2Payload;
      
      /**
       * Removes the applied discounts from an existing checkout.
       */
      checkoutDiscountCodeRemove?: CheckoutDiscountCodeRemovePayload;
      
      /**
       * Updates the email on an existing checkout.
       */
      checkoutEmailUpdateV2?: CheckoutEmailUpdateV2Payload;
      
      /**
       * Removes an applied gift card from the checkout.
       */
      checkoutGiftCardRemoveV2?: CheckoutGiftCardRemoveV2Payload;
      
      /**
       * Appends gift cards to an existing checkout.
       */
      checkoutGiftCardsAppend?: CheckoutGiftCardsAppendPayload;
      
      /**
       * Adds a list of line items to a checkout.
       */
      checkoutLineItemsAdd?: CheckoutLineItemsAddPayload;
      
      /**
       * Removes line items from an existing checkout.
       */
      checkoutLineItemsRemove?: CheckoutLineItemsRemovePayload;
      
      /**
       * Sets a list of line items to a checkout.
       */
      checkoutLineItemsReplace?: CheckoutLineItemsReplacePayload;
      
      /**
       * Updates line items on a checkout.
       */
      checkoutLineItemsUpdate?: CheckoutLineItemsUpdatePayload;
      
      /**
       * Updates the shipping address of an existing checkout.
       */
      checkoutShippingAddressUpdateV2?: CheckoutShippingAddressUpdateV2Payload;
      
      /**
       * Updates the shipping lines on an existing checkout.
       */
      checkoutShippingLineUpdate?: CheckoutShippingLineUpdatePayload;
      
      /**
       * Creates a customer access token.
       * The customer access token is required to modify the customer object in any way.
       * 
       */
      customerAccessTokenCreate?: CustomerAccessTokenCreatePayload;
      
      /**
       * Creates a customer access token using a
       * [multipass token](https://shopify.dev/api/multipass) instead of email and
       * password. A customer record is created if the customer doesn't exist. If a customer
       * record already exists but the record is disabled, then the customer record is enabled.
       * 
       */
      customerAccessTokenCreateWithMultipass?: CustomerAccessTokenCreateWithMultipassPayload;
      
      /**
       * Permanently destroys a customer access token.
       */
      customerAccessTokenDelete?: CustomerAccessTokenDeletePayload;
      
      /**
       * Renews a customer access token.
       * 
       * Access token renewal must happen *before* a token expires.
       * If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.
       * 
       */
      customerAccessTokenRenew?: CustomerAccessTokenRenewPayload;
      
      /**
       * Activates a customer.
       */
      customerActivate?: CustomerActivatePayload;
      
      /**
       * Activates a customer with the activation url received from `customerCreate`.
       */
      customerActivateByUrl?: CustomerActivateByUrlPayload;
      
      /**
       * Creates a new address for a customer.
       */
      customerAddressCreate?: CustomerAddressCreatePayload;
      
      /**
       * Permanently deletes the address of an existing customer.
       */
      customerAddressDelete?: CustomerAddressDeletePayload;
      
      /**
       * Updates the address of an existing customer.
       */
      customerAddressUpdate?: CustomerAddressUpdatePayload;
      
      /**
       * Creates a new customer.
       */
      customerCreate?: CustomerCreatePayload;
      
      /**
       * Updates the default address of an existing customer.
       */
      customerDefaultAddressUpdate?: CustomerDefaultAddressUpdatePayload;
      
      /**
       * Sends a reset password email to the customer. The reset password
       * email contains a reset password URL and token that you can pass to
       * the [`customerResetByUrl`](https://shopify.dev/api/storefront/latest/mutations/customerResetByUrl) or
       * [`customerReset`](https://shopify.dev/api/storefront/latest/mutations/customerReset) mutation to reset the
       * customer password.
       * 
       * This mutation is throttled by IP. With authenticated access,
       * you can provide a [`Shopify-Storefront-Buyer-IP`](https://shopify.dev/api/usage/authentication#optional-ip-header) instead of the request IP.
       * 
       * Make sure that the value provided to `Shopify-Storefront-Buyer-IP` is trusted. Unthrottled access to this
       * mutation presents a security risk.
       * 
       */
      customerRecover?: CustomerRecoverPayload;
      
      /**
       * "Resets a customer’s password with the token received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
       * 
       */
      customerReset?: CustomerResetPayload;
      
      /**
       * "Resets a customer’s password with the reset password URL received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
       * 
       */
      customerResetByUrl?: CustomerResetByUrlPayload;
      
      /**
       * Updates an existing customer.
       */
      customerUpdate?: CustomerUpdatePayload;
    }
    
    /**
     * An object with an ID field to support global identification, in accordance with the
     * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
     * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
     * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
     * 
     */
    export interface Node {
      
      /**
       * A globally-unique ID.
       */
      id: string;
    }
    
    /** Use this to resolve interface type Node */
    export type PossibleNodeTypeNames =
    'AppliedGiftCard' |
    'Article' |
    'Blog' |
    'Cart' |
    'CartLine' |
    'Checkout' |
    'CheckoutLineItem' |
    'Collection' |
    'Comment' |
    'ExternalVideo' |
    'GenericFile' |
    'Location' |
    'MailingAddress' |
    'Market' |
    'MediaImage' |
    'MediaPresentation' |
    'Menu' |
    'MenuItem' |
    'Metafield' |
    'Metaobject' |
    'Model3d' |
    'Order' |
    'Page' |
    'Payment' |
    'Product' |
    'ProductOption' |
    'ProductVariant' |
    'Shop' |
    'ShopPolicy' |
    'UrlRedirect' |
    'Video';
    
    export interface NodeNameMap {
      Node: Node;
      AppliedGiftCard: AppliedGiftCard;
      Article: Article;
      Blog: Blog;
      Cart: Cart;
      CartLine: CartLine;
      Checkout: Checkout;
      CheckoutLineItem: CheckoutLineItem;
      Collection: Collection;
      Comment: Comment;
      ExternalVideo: ExternalVideo;
      GenericFile: GenericFile;
      Location: Location;
      MailingAddress: MailingAddress;
      Market: Market;
      MediaImage: MediaImage;
      MediaPresentation: MediaPresentation;
      Menu: Menu;
      MenuItem: MenuItem;
      Metafield: Metafield;
      Metaobject: Metaobject;
      Model3d: Model3d;
      Order: Order;
      Page: Page;
      Payment: Payment;
      Product: Product;
      ProductOption: ProductOption;
      ProductVariant: ProductVariant;
      Shop: Shop;
      ShopPolicy: ShopPolicy;
      UrlRedirect: UrlRedirect;
      Video: Video;
    }
    
    /**
     * Represents a resource that can be published to the Online Store sales channel.
     */
    export interface OnlineStorePublishable {
      
      /**
       * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
       */
      onlineStoreUrl?: URL;
    }
    
    /** Use this to resolve interface type OnlineStorePublishable */
    export type PossibleOnlineStorePublishableTypeNames =
    'Article' |
    'Blog' |
    'Collection' |
    'Page' |
    'Product';
    
    export interface OnlineStorePublishableNameMap {
      OnlineStorePublishable: OnlineStorePublishable;
      Article: Article;
      Blog: Blog;
      Collection: Collection;
      Page: Page;
      Product: Product;
    }
    
    /**
     * An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information.
     */
    export interface Order extends HasMetafields, Node {
      
      /**
       * The address associated with the payment method.
       */
      billingAddress?: MailingAddress;
      
      /**
       * The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
       */
      cancelReason?: OrderCancelReason;
      
      /**
       * The date and time when the order was canceled. Returns null if the order wasn't canceled.
       */
      canceledAt?: DateTime;
      
      /**
       * The code of the currency used for the payment.
       */
      currencyCode: CurrencyCode;
      
      /**
       * The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order.
       */
      currentSubtotalPrice: MoneyV2;
      
      /**
       * The total cost of duties for the order, including refunds.
       */
      currentTotalDuties?: MoneyV2;
      
      /**
       * The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed.
       */
      currentTotalPrice: MoneyV2;
      
      /**
       * The total of all taxes applied to the order, excluding taxes for returned line items.
       */
      currentTotalTax: MoneyV2;
      
      /**
       * A list of the custom attributes added to the order.
       */
      customAttributes: Array<Attribute>;
      
      /**
       * The locale code in which this specific order happened.
       */
      customerLocale?: string;
      
      /**
       * The unique URL that the customer can use to access the order.
       */
      customerUrl?: URL;
      
      /**
       * Discounts that have been applied on the order.
       */
      discountApplications: DiscountApplicationConnection;
      
      /**
       * Whether the order has had any edits applied or not.
       */
      edited: boolean;
      
      /**
       * The customer's email address.
       */
      email?: string;
      
      /**
       * The financial status of the order.
       */
      financialStatus?: OrderFinancialStatus;
      
      /**
       * The fulfillment status for the order.
       */
      fulfillmentStatus: OrderFulfillmentStatus;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * List of the order’s line items.
       */
      lineItems: OrderLineItemConnection;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * Unique identifier for the order that appears on the order.
       * For example, _#1000_ or _Store1001.
       * 
       */
      name: string;
      
      /**
       * A unique numeric identifier for the order for use by shop owner and customer.
       */
      orderNumber: number;
      
      /**
       * The total cost of duties charged at checkout.
       */
      originalTotalDuties?: MoneyV2;
      
      /**
       * The total price of the order before any applied edits.
       */
      originalTotalPrice: MoneyV2;
      
      /**
       * The customer's phone number for receiving SMS notifications.
       */
      phone?: string;
      
      /**
       * The date and time when the order was imported.
       * This value can be set to dates in the past when importing from other systems.
       * If no value is provided, it will be auto-generated based on current date and time.
       * 
       */
      processedAt: DateTime;
      
      /**
       * The address to where the order will be shipped.
       */
      shippingAddress?: MailingAddress;
      
      /**
       * The discounts that have been allocated onto the shipping line by discount applications.
       * 
       */
      shippingDiscountAllocations: Array<DiscountAllocation>;
      
      /**
       * The unique URL for the order's status page.
       */
      statusUrl: URL;
      
      /**
       * Price of the order before shipping and taxes.
       */
      subtotalPrice?: MoneyV2;
      
      /**
       * Price of the order before duties, shipping and taxes.
       * @deprecated Use `subtotalPrice` instead.
       */
      subtotalPriceV2?: MoneyV2;
      
      /**
       * List of the order’s successful fulfillments.
       */
      successfulFulfillments?: Array<Fulfillment>;
      
      /**
       * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
       */
      totalPrice: MoneyV2;
      
      /**
       * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
       * @deprecated Use `totalPrice` instead.
       */
      totalPriceV2: MoneyV2;
      
      /**
       * The total amount that has been refunded.
       */
      totalRefunded: MoneyV2;
      
      /**
       * The total amount that has been refunded.
       * @deprecated Use `totalRefunded` instead.
       */
      totalRefundedV2: MoneyV2;
      
      /**
       * The total cost of shipping.
       */
      totalShippingPrice: MoneyV2;
      
      /**
       * The total cost of shipping.
       * @deprecated Use `totalShippingPrice` instead.
       */
      totalShippingPriceV2: MoneyV2;
      
      /**
       * The total cost of taxes.
       */
      totalTax?: MoneyV2;
      
      /**
       * The total cost of taxes.
       * @deprecated Use `totalTax` instead.
       */
      totalTaxV2?: MoneyV2;
    }
    
    /**
     * Represents the reason for the order's cancellation.
     */
    export const enum OrderCancelReason {
      
      /**
       * The customer wanted to cancel the order.
       */
      CUSTOMER = 'CUSTOMER',
      
      /**
       * Payment was declined.
       */
      DECLINED = 'DECLINED',
      
      /**
       * The order was fraudulent.
       */
      FRAUD = 'FRAUD',
      
      /**
       * There was insufficient inventory.
       */
      INVENTORY = 'INVENTORY',
      
      /**
       * The order was canceled for an unlisted reason.
       */
      OTHER = 'OTHER'
    }
    
    /**
     * An auto-generated type for paginating through multiple Orders.
     * 
     */
    export interface OrderConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<OrderEdge>;
      
      /**
       * A list of the nodes contained in OrderEdge.
       */
      nodes: Array<Order>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
      
      /**
       * The total count of Orders.
       */
      totalCount: UnsignedInt64;
    }
    
    /**
     * An auto-generated type which holds one Order and a cursor during pagination.
     * 
     */
    export interface OrderEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of OrderEdge.
       */
      node: Order;
    }
    
    /**
     * Represents the order's current financial status.
     */
    export const enum OrderFinancialStatus {
      
      /**
       * Displayed as **Pending**.
       */
      PENDING = 'PENDING',
      
      /**
       * Displayed as **Authorized**.
       */
      AUTHORIZED = 'AUTHORIZED',
      
      /**
       * Displayed as **Partially paid**.
       */
      PARTIALLY_PAID = 'PARTIALLY_PAID',
      
      /**
       * Displayed as **Partially refunded**.
       */
      PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',
      
      /**
       * Displayed as **Voided**.
       */
      VOIDED = 'VOIDED',
      
      /**
       * Displayed as **Paid**.
       */
      PAID = 'PAID',
      
      /**
       * Displayed as **Refunded**.
       */
      REFUNDED = 'REFUNDED'
    }
    
    /**
     * Represents the order's aggregated fulfillment status for display purposes.
     */
    export const enum OrderFulfillmentStatus {
      
      /**
       * Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
       */
      UNFULFILLED = 'UNFULFILLED',
      
      /**
       * Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
       */
      PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
      
      /**
       * Displayed as **Fulfilled**. All of the items in the order have been fulfilled.
       */
      FULFILLED = 'FULFILLED',
      
      /**
       * Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by "UNFULFILLED" status.
       */
      RESTOCKED = 'RESTOCKED',
      
      /**
       * Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by "IN_PROGRESS" status.
       */
      PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
      
      /**
       * Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
       */
      OPEN = 'OPEN',
      
      /**
       * Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
       */
      IN_PROGRESS = 'IN_PROGRESS',
      
      /**
       * Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
       */
      ON_HOLD = 'ON_HOLD',
      
      /**
       * Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
       */
      SCHEDULED = 'SCHEDULED'
    }
    
    /**
     * Represents a single line in an order. There is one line item for each distinct product variant.
     */
    export interface OrderLineItem {
      
      /**
       * The number of entries associated to the line item minus the items that have been removed.
       */
      currentQuantity: number;
      
      /**
       * List of custom attributes associated to the line item.
       */
      customAttributes: Array<Attribute>;
      
      /**
       * The discounts that have been allocated onto the order line item by discount applications.
       */
      discountAllocations: Array<DiscountAllocation>;
      
      /**
       * The total price of the line item, including discounts, and displayed in the presentment currency.
       */
      discountedTotalPrice: MoneyV2;
      
      /**
       * The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency.
       */
      originalTotalPrice: MoneyV2;
      
      /**
       * The number of products variants associated to the line item.
       */
      quantity: number;
      
      /**
       * The title of the product combined with title of the variant.
       */
      title: string;
      
      /**
       * The product variant object associated to the line item.
       */
      variant?: ProductVariant;
    }
    
    /**
     * An auto-generated type for paginating through multiple OrderLineItems.
     * 
     */
    export interface OrderLineItemConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<OrderLineItemEdge>;
      
      /**
       * A list of the nodes contained in OrderLineItemEdge.
       */
      nodes: Array<OrderLineItem>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one OrderLineItem and a cursor during pagination.
     * 
     */
    export interface OrderLineItemEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of OrderLineItemEdge.
       */
      node: OrderLineItem;
    }
    
    /**
     * The set of valid sort keys for the Order query.
     */
    export const enum OrderSortKeys {
      
      /**
       * Sort by the `processed_at` value.
       */
      PROCESSED_AT = 'PROCESSED_AT',
      
      /**
       * Sort by the `total_price` value.
       */
      TOTAL_PRICE = 'TOTAL_PRICE',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store.
     */
    export interface Page extends HasMetafields, Node, OnlineStorePublishable, Trackable {
      
      /**
       * The description of the page, complete with HTML formatting.
       */
      body: HTML;
      
      /**
       * Summary of the page body.
       */
      bodySummary: string;
      
      /**
       * The timestamp of the page creation.
       */
      createdAt: DateTime;
      
      /**
       * A human-friendly unique string for the page automatically generated from its title.
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
       */
      onlineStoreUrl?: URL;
      
      /**
       * The page's SEO information.
       */
      seo?: SEO;
      
      /**
       * The title of the page.
       */
      title: string;
      
      /**
       * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
       */
      trackingParameters?: string;
      
      /**
       * The timestamp of the latest page update.
       */
      updatedAt: DateTime;
    }
    
    /**
     * An auto-generated type for paginating through multiple Pages.
     * 
     */
    export interface PageConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<PageEdge>;
      
      /**
       * A list of the nodes contained in PageEdge.
       */
      nodes: Array<Page>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one Page and a cursor during pagination.
     * 
     */
    export interface PageEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of PageEdge.
       */
      node: Page;
    }
    
    /**
     * Returns information about pagination in a connection, in accordance with the
     * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
     * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
     * 
     */
    export interface PageInfo {
      
      /**
       * The cursor corresponding to the last node in edges.
       */
      endCursor?: string;
      
      /**
       * Whether there are more pages to fetch following the current page.
       */
      hasNextPage: boolean;
      
      /**
       * Whether there are any pages prior to the current page.
       */
      hasPreviousPage: boolean;
      
      /**
       * The cursor corresponding to the first node in edges.
       */
      startCursor?: string;
    }
    
    /**
     * The set of valid sort keys for the Page query.
     */
    export const enum PageSortKeys {
      
      /**
       * Sort by the `title` value.
       */
      TITLE = 'TITLE',
      
      /**
       * Sort by the `updated_at` value.
       */
      UPDATED_AT = 'UPDATED_AT',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * A payment applied to a checkout.
     */
    export interface Payment extends Node {
      
      /**
       * The amount of the payment.
       */
      amount: MoneyV2;
      
      /**
       * The amount of the payment.
       * @deprecated Use `amount` instead.
       */
      amountV2: MoneyV2;
      
      /**
       * The billing address for the payment.
       */
      billingAddress?: MailingAddress;
      
      /**
       * The checkout to which the payment belongs.
       */
      checkout: Checkout;
      
      /**
       * The credit card used for the payment in the case of direct payments.
       */
      creditCard?: CreditCard;
      
      /**
       * A message describing a processing error during asynchronous processing.
       */
      errorMessage?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * A client-side generated token to identify a payment and perform idempotent operations.
       * For more information, refer to
       * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
       * 
       */
      idempotencyKey?: string;
      
      /**
       * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
       */
      nextActionUrl?: URL;
      
      /**
       * Whether the payment is still processing asynchronously.
       */
      ready: boolean;
      
      /**
       * A flag to indicate if the payment is to be done in test mode for gateways that support it.
       */
      test: boolean;
      
      /**
       * The actual transaction recorded by Shopify after having processed the payment with the gateway.
       */
      transaction?: Transaction;
    }
    
    /**
     * Settings related to payments.
     */
    export interface PaymentSettings {
      
      /**
       * List of the card brands which the shop accepts.
       */
      acceptedCardBrands: Array<CardBrand>;
      
      /**
       * The url pointing to the endpoint to vault credit cards.
       */
      cardVaultUrl: URL;
      
      /**
       * The country where the shop is located.
       */
      countryCode: CountryCode;
      
      /**
       * The three-letter code for the shop's primary currency.
       */
      currencyCode: CurrencyCode;
      
      /**
       * A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
       */
      enabledPresentmentCurrencies: Array<CurrencyCode>;
      
      /**
       * The shop’s Shopify Payments account ID.
       */
      shopifyPaymentsAccountId?: string;
      
      /**
       * List of the digital wallets which the shop supports.
       */
      supportedDigitalWallets: Array<DigitalWallet>;
    }
    
    /**
     * The valid values for the types of payment token.
     */
    export const enum PaymentTokenType {
      
      /**
       * Apple Pay token type.
       */
      APPLE_PAY = 'APPLE_PAY',
      
      /**
       * Vault payment token type.
       */
      VAULT = 'VAULT',
      
      /**
       * Shopify Pay token type.
       */
      SHOPIFY_PAY = 'SHOPIFY_PAY',
      
      /**
       * Google Pay token type.
       */
      GOOGLE_PAY = 'GOOGLE_PAY',
      
      /**
       * Stripe token type.
       */
      STRIPE_VAULT_TOKEN = 'STRIPE_VAULT_TOKEN'
    }
    
    /**
     * Decides the distribution of results.
     */
    export const enum PredictiveSearchLimitScope {
      
      /**
       * Return results up to limit across all types.
       */
      ALL = 'ALL',
      
      /**
       * Return results up to limit per type.
       */
      EACH = 'EACH'
    }
    
    /**
     * A predictive search result represents a list of products, collections, pages, articles, and query suggestions
     * that matches the predictive search query.
     * 
     */
    export interface PredictiveSearchResult {
      
      /**
       * The articles that match the search query.
       */
      articles: Array<Article>;
      
      /**
       * The articles that match the search query.
       */
      collections: Array<Collection>;
      
      /**
       * The pages that match the search query.
       */
      pages: Array<Page>;
      
      /**
       * The products that match the search query.
       */
      products: Array<Product>;
      
      /**
       * The query suggestions that are relevant to the search query.
       */
      queries: Array<SearchQuerySuggestion>;
    }
    
    /**
     * The types of search items to perform predictive search on.
     */
    export const enum PredictiveSearchType {
      
      /**
       * Returns matching collections.
       */
      COLLECTION = 'COLLECTION',
      
      /**
       * Returns matching products.
       */
      PRODUCT = 'PRODUCT',
      
      /**
       * Returns matching pages.
       */
      PAGE = 'PAGE',
      
      /**
       * Returns matching articles.
       */
      ARTICLE = 'ARTICLE',
      
      /**
       * Returns matching query strings.
       */
      QUERY = 'QUERY'
    }
    
    /**
     * The input fields for a filter used to view a subset of products in a collection matching a specific price range.
     * 
     */
    export interface PriceRangeFilter {
      
      /**
       * The minimum price in the range. Defaults to zero.
       */
      min?: number;
      
      /**
       * The maximum price in the range. Empty indicates no max price.
       */
      max?: number;
    }
    
    /**
     * The value of the percentage pricing object.
     */
    export interface PricingPercentageValue {
      
      /**
       * The percentage value of the object.
       */
      percentage: number;
    }
    
    /**
     * The price value (fixed or percentage) for a discount application.
     */
    export type PricingValue = MoneyV2 | PricingPercentageValue;
    
    /** Use this to resolve union type PricingValue */
    export type PossiblePricingValueTypeNames =
    'MoneyV2' |
    'PricingPercentageValue';
    
    export interface PricingValueNameMap {
      PricingValue: PricingValue;
      MoneyV2: MoneyV2;
      PricingPercentageValue: PricingPercentageValue;
    }
    
    /**
     * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
     * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
     */
    export interface Product extends HasMetafields, Node, OnlineStorePublishable, Trackable {
      
      /**
       * Indicates if at least one product variant is available for sale.
       */
      availableForSale: boolean;
      
      /**
       * List of collections a product belongs to.
       */
      collections: CollectionConnection;
      
      /**
       * The compare at price of the product across all variants.
       */
      compareAtPriceRange: ProductPriceRange;
      
      /**
       * The date and time when the product was created.
       */
      createdAt: DateTime;
      
      /**
       * Stripped description of the product, single line with HTML tags removed.
       */
      description: string;
      
      /**
       * The description of the product, complete with HTML formatting.
       */
      descriptionHtml: HTML;
      
      /**
       * The featured image for the product.
       * 
       * This field is functionally equivalent to `images(first: 1)`.
       * 
       */
      featuredImage?: Image;
      
      /**
       * A human-friendly unique string for the Product automatically generated from its title.
       * They are used by the Liquid templating language to refer to objects.
       * 
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * List of images associated with the product.
       */
      images: ImageConnection;
      
      /**
       * Whether the product is a gift card.
       */
      isGiftCard: boolean;
      
      /**
       * The media associated with the product.
       */
      media: MediaConnection;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
       */
      onlineStoreUrl?: URL;
      
      /**
       * List of product options.
       */
      options: Array<ProductOption>;
      
      /**
       * The price range.
       */
      priceRange: ProductPriceRange;
      
      /**
       * A categorization that a product can be tagged with, commonly used for filtering and searching.
       */
      productType: string;
      
      /**
       * The date and time when the product was published to the channel.
       */
      publishedAt: DateTime;
      
      /**
       * Whether the product can only be purchased with a selling plan.
       */
      requiresSellingPlan: boolean;
      
      /**
       * A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
       */
      sellingPlanGroups: SellingPlanGroupConnection;
      
      /**
       * The product's SEO information.
       */
      seo: SEO;
      
      /**
       * A comma separated list of tags that have been added to the product.
       * Additional access scope required for private apps: unauthenticated_read_product_tags.
       * 
       */
      tags: Array<string>;
      
      /**
       * The product’s title.
       */
      title: string;
      
      /**
       * The total quantity of inventory in stock for this Product.
       */
      totalInventory?: number;
      
      /**
       * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
       */
      trackingParameters?: string;
      
      /**
       * The date and time when the product was last modified.
       * A product's `updatedAt` value can change for different reasons. For example, if an order
       * is placed for a product that has inventory tracking set up, then the inventory adjustment
       * is counted as an update.
       * 
       */
      updatedAt: DateTime;
      
      /**
       * Find a product’s variant based on its selected options.
       * This is useful for converting a user’s selection of product options into a single matching variant.
       * If there is not a variant for the selected options, `null` will be returned.
       * 
       */
      variantBySelectedOptions?: ProductVariant;
      
      /**
       * List of the product’s variants.
       */
      variants: ProductVariantConnection;
      
      /**
       * The product’s vendor name.
       */
      vendor: string;
    }
    
    /**
     * The set of valid sort keys for the ProductCollection query.
     */
    export const enum ProductCollectionSortKeys {
      
      /**
       * Sort by the `title` value.
       */
      TITLE = 'TITLE',
      
      /**
       * Sort by the `price` value.
       */
      PRICE = 'PRICE',
      
      /**
       * Sort by the `best-selling` value.
       */
      BEST_SELLING = 'BEST_SELLING',
      
      /**
       * Sort by the `created` value.
       */
      CREATED = 'CREATED',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by the `manual` value.
       */
      MANUAL = 'MANUAL',
      
      /**
       * Sort by the `collection-default` value.
       */
      COLLECTION_DEFAULT = 'COLLECTION_DEFAULT',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * An auto-generated type for paginating through multiple Products.
     * 
     */
    export interface ProductConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<ProductEdge>;
      
      /**
       * A list of available filters.
       */
      filters: Array<Filter>;
      
      /**
       * A list of the nodes contained in ProductEdge.
       */
      nodes: Array<Product>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one Product and a cursor during pagination.
     * 
     */
    export interface ProductEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of ProductEdge.
       */
      node: Product;
    }
    
    /**
     * The input fields for a filter used to view a subset of products in a collection.
     * By default, the `available` and `price` filters are enabled. Filters are customized with the Shopify Search & Discovery app.
     * Learn more about [customizing storefront filtering](https://help.shopify.com/manual/online-store/themes/customizing-themes/storefront-filters).
     * 
     */
    export interface ProductFilter {
      
      /**
       * Filter on if the product is available for sale.
       */
      available?: boolean;
      
      /**
       * A variant option to filter on.
       */
      variantOption?: VariantOptionFilter;
      
      /**
       * The product type to filter on.
       */
      productType?: string;
      
      /**
       * The product vendor to filter on.
       */
      productVendor?: string;
      
      /**
       * A range of prices to filter with-in.
       */
      price?: PriceRangeFilter;
      
      /**
       * A product metafield to filter on.
       */
      productMetafield?: MetafieldFilter;
      
      /**
       * A variant metafield to filter on.
       */
      variantMetafield?: MetafieldFilter;
      
      /**
       * A product tag to filter on.
       */
      tag?: string;
    }
    
    /**
     * The set of valid sort keys for the ProductImage query.
     */
    export const enum ProductImageSortKeys {
      
      /**
       * Sort by the `created_at` value.
       */
      CREATED_AT = 'CREATED_AT',
      
      /**
       * Sort by the `position` value.
       */
      POSITION = 'POSITION',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * The set of valid sort keys for the ProductMedia query.
     */
    export const enum ProductMediaSortKeys {
      
      /**
       * Sort by the `position` value.
       */
      POSITION = 'POSITION',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * Product property names like "Size", "Color", and "Material" that the customers can select.
     * Variants are selected based on permutations of these options.
     * 255 characters limit each.
     * 
     */
    export interface ProductOption extends Node {
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The product option’s name.
       */
      name: string;
      
      /**
       * The corresponding value to the product option name.
       */
      values: Array<string>;
    }
    
    /**
     * The price range of the product.
     */
    export interface ProductPriceRange {
      
      /**
       * The highest variant's price.
       */
      maxVariantPrice: MoneyV2;
      
      /**
       * The lowest variant's price.
       */
      minVariantPrice: MoneyV2;
    }
    
    /**
     * The recommendation intent that is used to generate product recommendations.
     * You can use intent to generate product recommendations according to different strategies.
     * 
     */
    export const enum ProductRecommendationIntent {
      
      /**
       * Offer customers a mix of products that are similar or complementary to a product for which recommendations are to be fetched. An example is substitutable products that display in a You may also like section.
       */
      RELATED = 'RELATED',
      
      /**
       * Offer customers products that are complementary to a product for which recommendations are to be fetched. An example is add-on products that display in a Pair it with section.
       */
      COMPLEMENTARY = 'COMPLEMENTARY'
    }
    
    /**
     * The set of valid sort keys for the Product query.
     */
    export const enum ProductSortKeys {
      
      /**
       * Sort by the `title` value.
       */
      TITLE = 'TITLE',
      
      /**
       * Sort by the `product_type` value.
       */
      PRODUCT_TYPE = 'PRODUCT_TYPE',
      
      /**
       * Sort by the `vendor` value.
       */
      VENDOR = 'VENDOR',
      
      /**
       * Sort by the `updated_at` value.
       */
      UPDATED_AT = 'UPDATED_AT',
      
      /**
       * Sort by the `created_at` value.
       */
      CREATED_AT = 'CREATED_AT',
      
      /**
       * Sort by the `best_selling` value.
       */
      BEST_SELLING = 'BEST_SELLING',
      
      /**
       * Sort by the `price` value.
       */
      PRICE = 'PRICE',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * A product variant represents a different version of a product, such as differing sizes or differing colors.
     */
    export interface ProductVariant extends HasMetafields, Node {
      
      /**
       * Indicates if the product variant is available for sale.
       */
      availableForSale: boolean;
      
      /**
       * The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
       */
      barcode?: string;
      
      /**
       * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
       */
      compareAtPrice?: MoneyV2;
      
      /**
       * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
       * @deprecated Use `compareAtPrice` instead.
       */
      compareAtPriceV2?: MoneyV2;
      
      /**
       * Whether a product is out of stock but still available for purchase (used for backorders).
       */
      currentlyNotInStock: boolean;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Image associated with the product variant. This field falls back to the product image if no image is available.
       * 
       */
      image?: Image;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * The product variant’s price.
       */
      price: MoneyV2;
      
      /**
       * The product variant’s price.
       * @deprecated Use `price` instead.
       */
      priceV2: MoneyV2;
      
      /**
       * The product object that the product variant belongs to.
       */
      product: Product;
      
      /**
       * The total sellable quantity of the variant for online sales channels.
       */
      quantityAvailable?: number;
      
      /**
       * Whether a customer needs to provide a shipping address when placing an order for the product variant.
       */
      requiresShipping: boolean;
      
      /**
       * List of product options applied to the variant.
       */
      selectedOptions: Array<SelectedOption>;
      
      /**
       * Represents an association between a variant and a selling plan. Selling plan allocations describe which selling plans are available for each variant, and what their impact is on pricing.
       */
      sellingPlanAllocations: SellingPlanAllocationConnection;
      
      /**
       * The SKU (stock keeping unit) associated with the variant.
       */
      sku?: string;
      
      /**
       * The in-store pickup availability of this variant by location.
       */
      storeAvailability: StoreAvailabilityConnection;
      
      /**
       * The product variant’s title.
       */
      title: string;
      
      /**
       * The unit price value for the variant based on the variant's measurement.
       */
      unitPrice?: MoneyV2;
      
      /**
       * The unit price measurement for the variant.
       */
      unitPriceMeasurement?: UnitPriceMeasurement;
      
      /**
       * The weight of the product variant in the unit system specified with `weight_unit`.
       */
      weight?: number;
      
      /**
       * Unit of measurement for weight.
       */
      weightUnit: WeightUnit;
    }
    
    /**
     * An auto-generated type for paginating through multiple ProductVariants.
     * 
     */
    export interface ProductVariantConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<ProductVariantEdge>;
      
      /**
       * A list of the nodes contained in ProductVariantEdge.
       */
      nodes: Array<ProductVariant>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one ProductVariant and a cursor during pagination.
     * 
     */
    export interface ProductVariantEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of ProductVariantEdge.
       */
      node: ProductVariant;
    }
    
    /**
     * The set of valid sort keys for the ProductVariant query.
     */
    export const enum ProductVariantSortKeys {
      
      /**
       * Sort by the `title` value.
       */
      TITLE = 'TITLE',
      
      /**
       * Sort by the `sku` value.
       */
      SKU = 'SKU',
      
      /**
       * Sort by the `position` value.
       */
      POSITION = 'POSITION',
      
      /**
       * Sort by the `id` value.
       */
      ID = 'ID',
      
      /**
       * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
       * Don't use this sort key when no search query is specified.
       * 
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * The schema’s entry-point for queries. This acts as the public, top-level API from which all queries must start.
     */
    export interface QueryRoot {
      
      /**
       * Fetch a specific Article by its ID.
       */
      article?: Article;
      
      /**
       * List of the shop's articles.
       */
      articles: ArticleConnection;
      
      /**
       * Fetch a specific `Blog` by one of its unique attributes.
       */
      blog?: Blog;
      
      /**
       * Find a blog by its handle.
       * @deprecated Use `blog` instead.
       */
      blogByHandle?: Blog;
      
      /**
       * List of the shop's blogs.
       */
      blogs: BlogConnection;
      
      /**
       * Retrieve a cart by its ID. For more information, refer to
       * [Manage a cart with the Storefront API](https://shopify.dev/custom-storefronts/cart/manage).
       * 
       */
      cart?: Cart;
      
      /**
       * A poll for the status of the cart checkout completion and order creation.
       */
      cartCompletionAttempt?: CartCompletionAttemptResult;
      
      /**
       * Fetch a specific `Collection` by one of its unique attributes.
       */
      collection?: Collection;
      
      /**
       * Find a collection by its handle.
       * @deprecated Use `collection` instead.
       */
      collectionByHandle?: Collection;
      
      /**
       * List of the shop’s collections.
       */
      collections: CollectionConnection;
      
      /**
       * The customer associated with the given access token. Tokens are obtained by using the
       * [`customerAccessTokenCreate` mutation](https://shopify.dev/docs/api/storefront/latest/mutations/customerAccessTokenCreate).
       * 
       */
      customer?: Customer;
      
      /**
       * Returns the localized experiences configured for the shop.
       */
      localization: Localization;
      
      /**
       * List of the shop's locations that support in-store pickup.
       * 
       * When sorting by distance, you must specify a location via the `near` argument.
       * 
       */
      locations: LocationConnection;
      
      /**
       * Retrieve a [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) by its handle.
       * 
       */
      menu?: Menu;
      
      /**
       * Fetch a specific Metaobject by one of its unique identifiers.
       */
      metaobject?: Metaobject;
      
      /**
       * All active metaobjects for the shop.
       */
      metaobjects: MetaobjectConnection;
      
      /**
       * Returns a specific node by ID.
       */
      node?: Node;
      
      /**
       * Returns the list of nodes with the given IDs.
       */
      nodes: Array<Node | null>;
      
      /**
       * Fetch a specific `Page` by one of its unique attributes.
       */
      page?: Page;
      
      /**
       * Find a page by its handle.
       * @deprecated Use `page` instead.
       */
      pageByHandle?: Page;
      
      /**
       * List of the shop's pages.
       */
      pages: PageConnection;
      
      /**
       * List of the predictive search results.
       */
      predictiveSearch?: PredictiveSearchResult;
      
      /**
       * Fetch a specific `Product` by one of its unique attributes.
       */
      product?: Product;
      
      /**
       * Find a product by its handle.
       * @deprecated Use `product` instead.
       */
      productByHandle?: Product;
      
      /**
       * Find recommended products related to a given `product_id`.
       * To learn more about how recommendations are generated, see
       * [*Showing product recommendations on product pages*](https://help.shopify.com/themes/development/recommended-products).
       * 
       */
      productRecommendations?: Array<Product>;
      
      /**
       * Tags added to products.
       * Additional access scope required: unauthenticated_read_product_tags.
       * 
       */
      productTags: StringConnection;
      
      /**
       * List of product types for the shop's products that are published to your app.
       */
      productTypes: StringConnection;
      
      /**
       * List of the shop’s products.
       */
      products: ProductConnection;
      
      /**
       * The list of public Storefront API versions, including supported, release candidate and unstable versions.
       */
      publicApiVersions: Array<ApiVersion>;
      
      /**
       * List of the search results.
       */
      search: SearchResultItemConnection;
      
      /**
       * The shop associated with the storefront access token.
       */
      shop: Shop;
      
      /**
       * A list of redirects for a shop.
       */
      urlRedirects: UrlRedirectConnection;
    }
    
    /**
     * SEO information.
     */
    export interface SEO {
      
      /**
       * The meta description.
       */
      description?: string;
      
      /**
       * The SEO title.
       */
      title?: string;
    }
    
    /**
     * Script discount applications capture the intentions of a discount that
     * was created by a Shopify Script.
     * 
     */
    export interface ScriptDiscountApplication extends DiscountApplication {
      
      /**
       * The method by which the discount's value is allocated to its entitled items.
       */
      allocationMethod: DiscountApplicationAllocationMethod;
      
      /**
       * Which lines of targetType that the discount is allocated over.
       */
      targetSelection: DiscountApplicationTargetSelection;
      
      /**
       * The type of line that the discount is applicable towards.
       */
      targetType: DiscountApplicationTargetType;
      
      /**
       * The title of the application as defined by the Script.
       */
      title: string;
      
      /**
       * The value of the discount application.
       */
      value: PricingValue;
    }
    
    /**
     * Specifies whether to perform a partial word match on the last search term.
     */
    export const enum SearchPrefixQueryType {
      
      /**
       * Perform a partial word match on the last search term.
       */
      LAST = 'LAST',
      
      /**
       * Don't perform a partial word match on the last search term.
       */
      NONE = 'NONE'
    }
    
    /**
     * A search query suggestion.
     */
    export interface SearchQuerySuggestion extends Trackable {
      
      /**
       * The text of the search query suggestion with highlighted HTML tags.
       */
      styledText: string;
      
      /**
       * The text of the search query suggestion.
       */
      text: string;
      
      /**
       * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
       */
      trackingParameters?: string;
    }
    
    /**
     * A search result that matches the search query.
     * 
     */
    export type SearchResultItem = Article | Page | Product;
    
    /** Use this to resolve union type SearchResultItem */
    export type PossibleSearchResultItemTypeNames = 'Article' | 'Page' | 'Product';
    
    export interface SearchResultItemNameMap {
      SearchResultItem: SearchResultItem;
      Article: Article;
      Page: Page;
      Product: Product;
    }
    
    /**
     * An auto-generated type for paginating through multiple SearchResultItems.
     * 
     */
    export interface SearchResultItemConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<SearchResultItemEdge>;
      
      /**
       * A list of the nodes contained in SearchResultItemEdge.
       */
      nodes: Array<SearchResultItem>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
      
      /**
       * A list of available filters.
       */
      productFilters: Array<Filter>;
      
      /**
       * The total number of results.
       */
      totalCount: number;
    }
    
    /**
     * An auto-generated type which holds one SearchResultItem and a cursor during pagination.
     * 
     */
    export interface SearchResultItemEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of SearchResultItemEdge.
       */
      node: SearchResultItem;
    }
    
    /**
     * The set of valid sort keys for the search query.
     */
    export const enum SearchSortKeys {
      
      /**
       * Sort by the `price` value.
       */
      PRICE = 'PRICE',
      
      /**
       * Sort by relevance to the search terms.
       */
      RELEVANCE = 'RELEVANCE'
    }
    
    /**
     * The types of search items to perform search within.
     */
    export const enum SearchType {
      
      /**
       * Returns matching products.
       */
      PRODUCT = 'PRODUCT',
      
      /**
       * Returns matching pages.
       */
      PAGE = 'PAGE',
      
      /**
       * Returns matching articles.
       */
      ARTICLE = 'ARTICLE'
    }
    
    /**
     * Specifies whether to display results for unavailable products.
     */
    export const enum SearchUnavailableProductsType {
      
      /**
       * Show unavailable products in the order that they're found.
       */
      SHOW = 'SHOW',
      
      /**
       * Exclude unavailable products.
       */
      HIDE = 'HIDE',
      
      /**
       * Show unavailable products after all other matching results. This is the default.
       */
      LAST = 'LAST'
    }
    
    /**
     * Specifies the list of resource fields to search.
     */
    export const enum SearchableField {
      
      /**
       * Author of the page or article.
       */
      AUTHOR = 'AUTHOR',
      
      /**
       * Body of the page or article or product description or collection description.
       */
      BODY = 'BODY',
      
      /**
       * Product type.
       */
      PRODUCT_TYPE = 'PRODUCT_TYPE',
      
      /**
       * Tag associated with the product or article.
       */
      TAG = 'TAG',
      
      /**
       * Title of the page or article or product title or collection title.
       */
      TITLE = 'TITLE',
      
      /**
       * Variant barcode.
       */
      VARIANTS_BARCODE = 'VARIANTS_BARCODE',
      
      /**
       * Variant SKU.
       */
      VARIANTS_SKU = 'VARIANTS_SKU',
      
      /**
       * Variant title.
       */
      VARIANTS_TITLE = 'VARIANTS_TITLE',
      
      /**
       * Product vendor.
       */
      VENDOR = 'VENDOR'
    }
    
    /**
     * Properties used by customers to select a product variant.
     * Products can have multiple options, like different sizes or colors.
     * 
     */
    export interface SelectedOption {
      
      /**
       * The product option’s name.
       */
      name: string;
      
      /**
       * The product option’s value.
       */
      value: string;
    }
    
    /**
     * The input fields required for a selected option.
     */
    export interface SelectedOptionInput {
      
      /**
       * The product option’s name.
       */
      name: string;
      
      /**
       * The product option’s value.
       */
      value: string;
    }
    
    /**
     * Represents how products and variants can be sold and purchased.
     */
    export interface SellingPlan {
      
      /**
       * The initial payment due for the purchase.
       */
      checkoutCharge: SellingPlanCheckoutCharge;
      
      /**
       * The description of the selling plan.
       */
      description?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'.
       */
      name: string;
      
      /**
       * The selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing.
       */
      options: Array<SellingPlanOption>;
      
      /**
       * The price adjustments that a selling plan makes when a variant is purchased with a selling plan.
       */
      priceAdjustments: Array<SellingPlanPriceAdjustment>;
      
      /**
       * Whether purchasing the selling plan will result in multiple deliveries.
       */
      recurringDeliveries: boolean;
    }
    
    /**
     * Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan.
     */
    export interface SellingPlanAllocation {
      
      /**
       * The checkout charge amount due for the purchase.
       */
      checkoutChargeAmount: MoneyV2;
      
      /**
       * A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it.
       */
      priceAdjustments: Array<SellingPlanAllocationPriceAdjustment>;
      
      /**
       * The remaining balance charge amount due for the purchase.
       */
      remainingBalanceChargeAmount: MoneyV2;
      
      /**
       * A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
       */
      sellingPlan: SellingPlan;
    }
    
    /**
     * An auto-generated type for paginating through multiple SellingPlanAllocations.
     * 
     */
    export interface SellingPlanAllocationConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<SellingPlanAllocationEdge>;
      
      /**
       * A list of the nodes contained in SellingPlanAllocationEdge.
       */
      nodes: Array<SellingPlanAllocation>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination.
     * 
     */
    export interface SellingPlanAllocationEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of SellingPlanAllocationEdge.
       */
      node: SellingPlanAllocation;
    }
    
    /**
     * The resulting prices for variants when they're purchased with a specific selling plan.
     */
    export interface SellingPlanAllocationPriceAdjustment {
      
      /**
       * The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00.
       */
      compareAtPrice: MoneyV2;
      
      /**
       * The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
       */
      perDeliveryPrice: MoneyV2;
      
      /**
       * The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00.
       */
      price: MoneyV2;
      
      /**
       * The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns `null`.
       */
      unitPrice?: MoneyV2;
    }
    
    /**
     * The initial payment due for the purchase.
     */
    export interface SellingPlanCheckoutCharge {
      
      /**
       * The charge type for the checkout charge.
       */
      type: SellingPlanCheckoutChargeType;
      
      /**
       * The charge value for the checkout charge.
       */
      value: SellingPlanCheckoutChargeValue;
    }
    
    /**
     * The percentage value of the price used for checkout charge.
     */
    export interface SellingPlanCheckoutChargePercentageValue {
      
      /**
       * The percentage value of the price used for checkout charge.
       */
      percentage: number;
    }
    
    /**
     * The checkout charge when the full amount isn't charged at checkout.
     */
    export const enum SellingPlanCheckoutChargeType {
      
      /**
       * The checkout charge is a percentage of the product or variant price.
       */
      PERCENTAGE = 'PERCENTAGE',
      
      /**
       * The checkout charge is a fixed price amount.
       */
      PRICE = 'PRICE'
    }
    
    /**
     * The portion of the price to be charged at checkout.
     */
    export type SellingPlanCheckoutChargeValue =
    MoneyV2 |
    SellingPlanCheckoutChargePercentageValue;
    
    /** Use this to resolve union type SellingPlanCheckoutChargeValue */
    export type PossibleSellingPlanCheckoutChargeValueTypeNames =
    'MoneyV2' |
    'SellingPlanCheckoutChargePercentageValue';
    
    export interface SellingPlanCheckoutChargeValueNameMap {
      SellingPlanCheckoutChargeValue: SellingPlanCheckoutChargeValue;
      MoneyV2: MoneyV2;
      SellingPlanCheckoutChargePercentageValue: SellingPlanCheckoutChargePercentageValue;
    }
    
    /**
     * An auto-generated type for paginating through multiple SellingPlans.
     * 
     */
    export interface SellingPlanConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<SellingPlanEdge>;
      
      /**
       * A list of the nodes contained in SellingPlanEdge.
       */
      nodes: Array<SellingPlan>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one SellingPlan and a cursor during pagination.
     * 
     */
    export interface SellingPlanEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of SellingPlanEdge.
       */
      node: SellingPlan;
    }
    
    /**
     * A fixed amount that's deducted from the original variant price. For example, $10.00 off.
     */
    export interface SellingPlanFixedAmountPriceAdjustment {
      
      /**
       * The money value of the price adjustment.
       */
      adjustmentAmount: MoneyV2;
    }
    
    /**
     * A fixed price adjustment for a variant that's purchased with a selling plan.
     */
    export interface SellingPlanFixedPriceAdjustment {
      
      /**
       * A new price of the variant when it's purchased with the selling plan.
       */
      price: MoneyV2;
    }
    
    /**
     * Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
     */
    export interface SellingPlanGroup {
      
      /**
       * A display friendly name for the app that created the selling plan group.
       */
      appName?: string;
      
      /**
       * The name of the selling plan group.
       */
      name: string;
      
      /**
       * Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
       */
      options: Array<SellingPlanGroupOption>;
      
      /**
       * A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
       */
      sellingPlans: SellingPlanConnection;
    }
    
    /**
     * An auto-generated type for paginating through multiple SellingPlanGroups.
     * 
     */
    export interface SellingPlanGroupConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<SellingPlanGroupEdge>;
      
      /**
       * A list of the nodes contained in SellingPlanGroupEdge.
       */
      nodes: Array<SellingPlanGroup>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
     * 
     */
    export interface SellingPlanGroupEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of SellingPlanGroupEdge.
       */
      node: SellingPlanGroup;
    }
    
    /**
     * Represents an option on a selling plan group that's available in the drop-down list in the storefront.
     * 
     * Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing.
     */
    export interface SellingPlanGroupOption {
      
      /**
       * The name of the option. For example, 'Delivery every'.
       */
      name: string;
      
      /**
       * The values for the options specified by the selling plans in the selling plan group. For example, '1 week', '2 weeks', '3 weeks'.
       */
      values: Array<string>;
    }
    
    /**
     * An option provided by a Selling Plan.
     */
    export interface SellingPlanOption {
      
      /**
       * The name of the option (ie "Delivery every").
       */
      name?: string;
      
      /**
       * The value of the option (ie "Month").
       */
      value?: string;
    }
    
    /**
     * A percentage amount that's deducted from the original variant price. For example, 10% off.
     */
    export interface SellingPlanPercentagePriceAdjustment {
      
      /**
       * The percentage value of the price adjustment.
       */
      adjustmentPercentage: number;
    }
    
    /**
     * Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. If a variant has multiple price adjustments, then the first price adjustment applies when the variant is initially purchased. The second price adjustment applies after a certain number of orders (specified by the `orderCount` field) are made. If a selling plan doesn't have any price adjustments, then the unadjusted price of the variant is the effective price.
     */
    export interface SellingPlanPriceAdjustment {
      
      /**
       * The type of price adjustment. An adjustment value can have one of three types: percentage, amount off, or a new price.
       */
      adjustmentValue: SellingPlanPriceAdjustmentValue;
      
      /**
       * The number of orders that the price adjustment applies to. If the price adjustment always applies, then this field is `null`.
       */
      orderCount?: number;
    }
    
    /**
     * Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments.
     */
    export type SellingPlanPriceAdjustmentValue =
    SellingPlanFixedAmountPriceAdjustment |
    SellingPlanFixedPriceAdjustment |
    SellingPlanPercentagePriceAdjustment;
    
    /** Use this to resolve union type SellingPlanPriceAdjustmentValue */
    export type PossibleSellingPlanPriceAdjustmentValueTypeNames =
    'SellingPlanFixedAmountPriceAdjustment' |
    'SellingPlanFixedPriceAdjustment' |
    'SellingPlanPercentagePriceAdjustment';
    
    export interface SellingPlanPriceAdjustmentValueNameMap {
      SellingPlanPriceAdjustmentValue: SellingPlanPriceAdjustmentValue;
      SellingPlanFixedAmountPriceAdjustment: SellingPlanFixedAmountPriceAdjustment;
      SellingPlanFixedPriceAdjustment: SellingPlanFixedPriceAdjustment;
      SellingPlanPercentagePriceAdjustment: SellingPlanPercentagePriceAdjustment;
    }
    
    /**
     * A shipping rate to be applied to a checkout.
     */
    export interface ShippingRate {
      
      /**
       * Human-readable unique identifier for this shipping rate.
       */
      handle: string;
      
      /**
       * Price of this shipping rate.
       */
      price: MoneyV2;
      
      /**
       * Price of this shipping rate.
       * @deprecated Use `price` instead.
       */
      priceV2: MoneyV2;
      
      /**
       * Title of this shipping rate.
       */
      title: string;
    }
    
    /**
     * Shop represents a collection of the general settings and information about the shop.
     */
    export interface Shop extends HasMetafields, Node {
      
      /**
       * The shop's branding configuration.
       */
      brand?: Brand;
      
      /**
       * A description of the shop.
       */
      description?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Returns a metafield found by namespace and key.
       */
      metafield?: Metafield;
      
      /**
       * The metafields associated with the resource matching the supplied list of namespaces and keys.
       * 
       */
      metafields: Array<Metafield | null>;
      
      /**
       * A string representing the way currency is formatted when the currency isn’t specified.
       */
      moneyFormat: string;
      
      /**
       * The shop’s name.
       */
      name: string;
      
      /**
       * Settings related to payments.
       */
      paymentSettings: PaymentSettings;
      
      /**
       * The primary domain of the shop’s Online Store.
       */
      primaryDomain: Domain;
      
      /**
       * The shop’s privacy policy.
       */
      privacyPolicy?: ShopPolicy;
      
      /**
       * The shop’s refund policy.
       */
      refundPolicy?: ShopPolicy;
      
      /**
       * The shop’s shipping policy.
       */
      shippingPolicy?: ShopPolicy;
      
      /**
       * Countries that the shop ships to.
       */
      shipsToCountries: Array<CountryCode>;
      
      /**
       * The shop’s subscription policy.
       */
      subscriptionPolicy?: ShopPolicyWithDefault;
      
      /**
       * The shop’s terms of service.
       */
      termsOfService?: ShopPolicy;
    }
    
    /**
     * The input fields for submitting Shop Pay payment method information for checkout.
     * 
     */
    export interface ShopPayWalletContentInput {
      
      /**
       * The customer's billing address.
       */
      billingAddress: MailingAddressInput;
      
      /**
       * Session token for transaction.
       */
      sessionToken: string;
    }
    
    /**
     * Policy that a merchant has configured for their store, such as their refund or privacy policy.
     */
    export interface ShopPolicy extends Node {
      
      /**
       * Policy text, maximum size of 64kb.
       */
      body: string;
      
      /**
       * Policy’s handle.
       */
      handle: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * Policy’s title.
       */
      title: string;
      
      /**
       * Public URL to the policy.
       */
      url: URL;
    }
    
    /**
     * A policy for the store that comes with a default value, such as a subscription policy.
     * If the merchant hasn't configured a policy for their store, then the policy will return the default value.
     * Otherwise, the policy will return the merchant-configured value.
     * 
     */
    export interface ShopPolicyWithDefault {
      
      /**
       * The text of the policy. Maximum size: 64KB.
       */
      body: string;
      
      /**
       * The handle of the policy.
       */
      handle: string;
      
      /**
       * The unique ID of the policy. A default policy doesn't have an ID.
       */
      id?: string;
      
      /**
       * The title of the policy.
       */
      title: string;
      
      /**
       * Public URL to the policy.
       */
      url: URL;
    }
    
    /**
     * The availability of a product variant at a particular location.
     * Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty result.
     * 
     */
    export interface StoreAvailability {
      
      /**
       * Whether the product variant is in-stock at this location.
       */
      available: boolean;
      
      /**
       * The location where this product variant is stocked at.
       */
      location: Location;
      
      /**
       * Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24 hours).
       */
      pickUpTime: string;
    }
    
    /**
     * An auto-generated type for paginating through multiple StoreAvailabilities.
     * 
     */
    export interface StoreAvailabilityConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<StoreAvailabilityEdge>;
      
      /**
       * A list of the nodes contained in StoreAvailabilityEdge.
       */
      nodes: Array<StoreAvailability>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one StoreAvailability and a cursor during pagination.
     * 
     */
    export interface StoreAvailabilityEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of StoreAvailabilityEdge.
       */
      node: StoreAvailability;
    }
    
    /**
     * An auto-generated type for paginating through a list of Strings.
     * 
     */
    export interface StringConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<StringEdge>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one String and a cursor during pagination.
     * 
     */
    export interface StringEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of StringEdge.
       */
      node: string;
    }
    
    /**
     * An error that occurred during cart submit for completion.
     */
    export interface SubmissionError {
      
      /**
       * The error code.
       */
      code: SubmissionErrorCode;
      
      /**
       * The error message.
       */
      message?: string;
    }
    
    /**
     * The code of the error that occurred during cart submit for completion.
     */
    export const enum SubmissionErrorCode {
      ERROR = 'ERROR',
      NO_DELIVERY_GROUP_SELECTED = 'NO_DELIVERY_GROUP_SELECTED',
      BUYER_IDENTITY_EMAIL_IS_INVALID = 'BUYER_IDENTITY_EMAIL_IS_INVALID',
      BUYER_IDENTITY_EMAIL_REQUIRED = 'BUYER_IDENTITY_EMAIL_REQUIRED',
      BUYER_IDENTITY_PHONE_IS_INVALID = 'BUYER_IDENTITY_PHONE_IS_INVALID',
      DELIVERY_ADDRESS1_INVALID = 'DELIVERY_ADDRESS1_INVALID',
      DELIVERY_ADDRESS1_REQUIRED = 'DELIVERY_ADDRESS1_REQUIRED',
      DELIVERY_ADDRESS1_TOO_LONG = 'DELIVERY_ADDRESS1_TOO_LONG',
      DELIVERY_ADDRESS2_INVALID = 'DELIVERY_ADDRESS2_INVALID',
      DELIVERY_ADDRESS2_REQUIRED = 'DELIVERY_ADDRESS2_REQUIRED',
      DELIVERY_ADDRESS2_TOO_LONG = 'DELIVERY_ADDRESS2_TOO_LONG',
      DELIVERY_CITY_INVALID = 'DELIVERY_CITY_INVALID',
      DELIVERY_CITY_REQUIRED = 'DELIVERY_CITY_REQUIRED',
      DELIVERY_CITY_TOO_LONG = 'DELIVERY_CITY_TOO_LONG',
      DELIVERY_COMPANY_INVALID = 'DELIVERY_COMPANY_INVALID',
      DELIVERY_COMPANY_REQUIRED = 'DELIVERY_COMPANY_REQUIRED',
      DELIVERY_COMPANY_TOO_LONG = 'DELIVERY_COMPANY_TOO_LONG',
      DELIVERY_COUNTRY_REQUIRED = 'DELIVERY_COUNTRY_REQUIRED',
      DELIVERY_FIRST_NAME_INVALID = 'DELIVERY_FIRST_NAME_INVALID',
      DELIVERY_FIRST_NAME_REQUIRED = 'DELIVERY_FIRST_NAME_REQUIRED',
      DELIVERY_FIRST_NAME_TOO_LONG = 'DELIVERY_FIRST_NAME_TOO_LONG',
      DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY = 'DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY',
      DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE = 'DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE',
      DELIVERY_LAST_NAME_INVALID = 'DELIVERY_LAST_NAME_INVALID',
      DELIVERY_LAST_NAME_REQUIRED = 'DELIVERY_LAST_NAME_REQUIRED',
      DELIVERY_LAST_NAME_TOO_LONG = 'DELIVERY_LAST_NAME_TOO_LONG',
      DELIVERY_NO_DELIVERY_AVAILABLE = 'DELIVERY_NO_DELIVERY_AVAILABLE',
      DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE = 'DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE',
      DELIVERY_OPTIONS_PHONE_NUMBER_INVALID = 'DELIVERY_OPTIONS_PHONE_NUMBER_INVALID',
      DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED = 'DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED',
      DELIVERY_PHONE_NUMBER_INVALID = 'DELIVERY_PHONE_NUMBER_INVALID',
      DELIVERY_PHONE_NUMBER_REQUIRED = 'DELIVERY_PHONE_NUMBER_REQUIRED',
      DELIVERY_POSTAL_CODE_INVALID = 'DELIVERY_POSTAL_CODE_INVALID',
      DELIVERY_POSTAL_CODE_REQUIRED = 'DELIVERY_POSTAL_CODE_REQUIRED',
      DELIVERY_ZONE_NOT_FOUND = 'DELIVERY_ZONE_NOT_FOUND',
      DELIVERY_ZONE_REQUIRED_FOR_COUNTRY = 'DELIVERY_ZONE_REQUIRED_FOR_COUNTRY',
      DELIVERY_ADDRESS_REQUIRED = 'DELIVERY_ADDRESS_REQUIRED',
      MERCHANDISE_NOT_APPLICABLE = 'MERCHANDISE_NOT_APPLICABLE',
      MERCHANDISE_LINE_LIMIT_REACHED = 'MERCHANDISE_LINE_LIMIT_REACHED',
      MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE = 'MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE',
      MERCHANDISE_OUT_OF_STOCK = 'MERCHANDISE_OUT_OF_STOCK',
      MERCHANDISE_PRODUCT_NOT_PUBLISHED = 'MERCHANDISE_PRODUCT_NOT_PUBLISHED',
      PAYMENTS_ADDRESS1_INVALID = 'PAYMENTS_ADDRESS1_INVALID',
      PAYMENTS_ADDRESS1_REQUIRED = 'PAYMENTS_ADDRESS1_REQUIRED',
      PAYMENTS_ADDRESS1_TOO_LONG = 'PAYMENTS_ADDRESS1_TOO_LONG',
      PAYMENTS_ADDRESS2_INVALID = 'PAYMENTS_ADDRESS2_INVALID',
      PAYMENTS_ADDRESS2_REQUIRED = 'PAYMENTS_ADDRESS2_REQUIRED',
      PAYMENTS_ADDRESS2_TOO_LONG = 'PAYMENTS_ADDRESS2_TOO_LONG',
      PAYMENTS_CITY_INVALID = 'PAYMENTS_CITY_INVALID',
      PAYMENTS_CITY_REQUIRED = 'PAYMENTS_CITY_REQUIRED',
      PAYMENTS_CITY_TOO_LONG = 'PAYMENTS_CITY_TOO_LONG',
      PAYMENTS_COMPANY_INVALID = 'PAYMENTS_COMPANY_INVALID',
      PAYMENTS_COMPANY_REQUIRED = 'PAYMENTS_COMPANY_REQUIRED',
      PAYMENTS_COMPANY_TOO_LONG = 'PAYMENTS_COMPANY_TOO_LONG',
      PAYMENTS_COUNTRY_REQUIRED = 'PAYMENTS_COUNTRY_REQUIRED',
      PAYMENTS_CREDIT_CARD_BASE_EXPIRED = 'PAYMENTS_CREDIT_CARD_BASE_EXPIRED',
      PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED = 'PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED',
      PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT = 'PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT',
      PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED = 'PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED',
      PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK = 'PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK',
      PAYMENTS_CREDIT_CARD_GENERIC = 'PAYMENTS_CREDIT_CARD_GENERIC',
      PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK = 'PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK',
      PAYMENTS_CREDIT_CARD_MONTH_INCLUSION = 'PAYMENTS_CREDIT_CARD_MONTH_INCLUSION',
      PAYMENTS_CREDIT_CARD_NAME_INVALID = 'PAYMENTS_CREDIT_CARD_NAME_INVALID',
      PAYMENTS_CREDIT_CARD_NUMBER_INVALID = 'PAYMENTS_CREDIT_CARD_NUMBER_INVALID',
      PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT = 'PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT',
      PAYMENTS_CREDIT_CARD_SESSION_ID = 'PAYMENTS_CREDIT_CARD_SESSION_ID',
      PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK = 'PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK',
      PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE = 'PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE',
      PAYMENTS_CREDIT_CARD_YEAR_EXPIRED = 'PAYMENTS_CREDIT_CARD_YEAR_EXPIRED',
      PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR = 'PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR',
      PAYMENTS_FIRST_NAME_INVALID = 'PAYMENTS_FIRST_NAME_INVALID',
      PAYMENTS_FIRST_NAME_REQUIRED = 'PAYMENTS_FIRST_NAME_REQUIRED',
      PAYMENTS_FIRST_NAME_TOO_LONG = 'PAYMENTS_FIRST_NAME_TOO_LONG',
      PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY = 'PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY',
      PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE = 'PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE',
      PAYMENTS_LAST_NAME_INVALID = 'PAYMENTS_LAST_NAME_INVALID',
      PAYMENTS_LAST_NAME_REQUIRED = 'PAYMENTS_LAST_NAME_REQUIRED',
      PAYMENTS_LAST_NAME_TOO_LONG = 'PAYMENTS_LAST_NAME_TOO_LONG',
      PAYMENTS_METHOD_UNAVAILABLE = 'PAYMENTS_METHOD_UNAVAILABLE',
      PAYMENTS_METHOD_REQUIRED = 'PAYMENTS_METHOD_REQUIRED',
      PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT = 'PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT',
      PAYMENTS_PHONE_NUMBER_INVALID = 'PAYMENTS_PHONE_NUMBER_INVALID',
      PAYMENTS_PHONE_NUMBER_REQUIRED = 'PAYMENTS_PHONE_NUMBER_REQUIRED',
      PAYMENTS_POSTAL_CODE_INVALID = 'PAYMENTS_POSTAL_CODE_INVALID',
      PAYMENTS_POSTAL_CODE_REQUIRED = 'PAYMENTS_POSTAL_CODE_REQUIRED',
      PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED = 'PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED',
      PAYMENTS_WALLET_CONTENT_MISSING = 'PAYMENTS_WALLET_CONTENT_MISSING',
      PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND = 'PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND',
      PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY = 'PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY',
      TAXES_MUST_BE_DEFINED = 'TAXES_MUST_BE_DEFINED',
      TAXES_LINE_ID_NOT_FOUND = 'TAXES_LINE_ID_NOT_FOUND',
      TAXES_DELIVERY_GROUP_ID_NOT_FOUND = 'TAXES_DELIVERY_GROUP_ID_NOT_FOUND'
    }
    
    /**
     * Cart submit for checkout completion is successful.
     */
    export interface SubmitAlreadyAccepted {
      
      /**
       * The ID of the cart completion attempt that will be used for polling for the result.
       */
      attemptId: string;
    }
    
    /**
     * Cart submit for checkout completion failed.
     */
    export interface SubmitFailed {
      
      /**
       * The URL of the checkout for the cart.
       */
      checkoutUrl?: URL;
      
      /**
       * The list of errors that occurred from executing the mutation.
       */
      errors: Array<SubmissionError>;
    }
    
    /**
     * Cart submit for checkout completion is already accepted.
     */
    export interface SubmitSuccess {
      
      /**
       * The ID of the cart completion attempt that will be used for polling for the result.
       */
      attemptId: string;
    }
    
    /**
     * Cart submit for checkout completion is throttled.
     */
    export interface SubmitThrottled {
      
      /**
       * UTC date time string that indicates the time after which clients should make their next
       * poll request. Any poll requests sent before this time will be ignored. Use this value to schedule the
       * next poll request.
       * 
       */
      pollAfter: DateTime;
    }
    
    /**
     * Specifies the fields required to complete a checkout with
     * a tokenized payment.
     * 
     */
    export interface TokenizedPaymentInputV3 {
      
      /**
       * The amount and currency of the payment.
       */
      paymentAmount: MoneyInput;
      
      /**
       * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
       */
      idempotencyKey: string;
      
      /**
       * The billing address for the payment.
       */
      billingAddress: MailingAddressInput;
      
      /**
       * A simple string or JSON containing the required payment data for the tokenized payment.
       */
      paymentData: string;
      
      /**
       * Whether to execute the payment in test mode, if possible. Test mode is not supported in production stores. Defaults to `false`.
       */
      test?: boolean;
      
      /**
       * Public Hash Key used for AndroidPay payments only.
       */
      identifier?: string;
      
      /**
       * The type of payment token.
       */
      type: PaymentTokenType;
    }
    
    /**
     * Represents a resource that you can track the origin of the search traffic.
     */
    export interface Trackable {
      
      /**
       * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for tracking the origin of the traffic.
       */
      trackingParameters?: string;
    }
    
    /** Use this to resolve interface type Trackable */
    export type PossibleTrackableTypeNames =
    'Article' |
    'Collection' |
    'Page' |
    'Product' |
    'SearchQuerySuggestion';
    
    export interface TrackableNameMap {
      Trackable: Trackable;
      Article: Article;
      Collection: Collection;
      Page: Page;
      Product: Product;
      SearchQuerySuggestion: SearchQuerySuggestion;
    }
    
    /**
     * An object representing exchange of money for a product or service.
     */
    export interface Transaction {
      
      /**
       * The amount of money that the transaction was for.
       */
      amount: MoneyV2;
      
      /**
       * The amount of money that the transaction was for.
       * @deprecated Use `amount` instead.
       */
      amountV2: MoneyV2;
      
      /**
       * The kind of the transaction.
       */
      kind: TransactionKind;
      
      /**
       * The status of the transaction.
       * @deprecated Use `statusV2` instead.
       */
      status: TransactionStatus;
      
      /**
       * The status of the transaction.
       */
      statusV2?: TransactionStatus;
      
      /**
       * Whether the transaction was done in test mode or not.
       */
      test: boolean;
    }
    
    /**
     * The different kinds of order transactions.
     */
    export const enum TransactionKind {
      
      /**
       * An authorization and capture performed together in a single step.
       */
      SALE = 'SALE',
      
      /**
       * A transfer of the money that was reserved during the authorization stage.
       */
      CAPTURE = 'CAPTURE',
      
      /**
       * An amount reserved against the cardholder's funding source.
       * Money does not change hands until the authorization is captured.
       * 
       */
      AUTHORIZATION = 'AUTHORIZATION',
      
      /**
       * An authorization for a payment taken with an EMV credit card reader.
       */
      EMV_AUTHORIZATION = 'EMV_AUTHORIZATION',
      
      /**
       * Money returned to the customer when they have paid too much.
       */
      CHANGE = 'CHANGE'
    }
    
    /**
     * Transaction statuses describe the status of a transaction.
     */
    export const enum TransactionStatus {
      
      /**
       * The transaction is pending.
       */
      PENDING = 'PENDING',
      
      /**
       * The transaction succeeded.
       */
      SUCCESS = 'SUCCESS',
      
      /**
       * The transaction failed.
       */
      FAILURE = 'FAILURE',
      
      /**
       * There was an error while processing the transaction.
       */
      ERROR = 'ERROR'
    }
    
    /**
     * Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
     * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
     * 
     * For example, `"https://johns-apparel.myshopify.com"` is a valid URL. It includes a scheme (`https`) and a host
     * (`johns-apparel.myshopify.com`).
     * 
     */
    export type URL = any;
    
    /**
     * The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
     * 
     */
    export interface UnitPriceMeasurement {
      
      /**
       * The type of unit of measurement for the unit price measurement.
       */
      measuredType?: UnitPriceMeasurementMeasuredType;
      
      /**
       * The quantity unit for the unit price measurement.
       */
      quantityUnit?: UnitPriceMeasurementMeasuredUnit;
      
      /**
       * The quantity value for the unit price measurement.
       */
      quantityValue: number;
      
      /**
       * The reference unit for the unit price measurement.
       */
      referenceUnit?: UnitPriceMeasurementMeasuredUnit;
      
      /**
       * The reference value for the unit price measurement.
       */
      referenceValue: number;
    }
    
    /**
     * The accepted types of unit of measurement.
     */
    export const enum UnitPriceMeasurementMeasuredType {
      
      /**
       * Unit of measurements representing volumes.
       */
      VOLUME = 'VOLUME',
      
      /**
       * Unit of measurements representing weights.
       */
      WEIGHT = 'WEIGHT',
      
      /**
       * Unit of measurements representing lengths.
       */
      LENGTH = 'LENGTH',
      
      /**
       * Unit of measurements representing areas.
       */
      AREA = 'AREA'
    }
    
    /**
     * The valid units of measurement for a unit price measurement.
     */
    export const enum UnitPriceMeasurementMeasuredUnit {
      
      /**
       * 1000 milliliters equals 1 liter.
       */
      ML = 'ML',
      
      /**
       * 100 centiliters equals 1 liter.
       */
      CL = 'CL',
      
      /**
       * Metric system unit of volume.
       */
      L = 'L',
      
      /**
       * 1 cubic meter equals 1000 liters.
       */
      M3 = 'M3',
      
      /**
       * 1000 milligrams equals 1 gram.
       */
      MG = 'MG',
      
      /**
       * Metric system unit of weight.
       */
      G = 'G',
      
      /**
       * 1 kilogram equals 1000 grams.
       */
      KG = 'KG',
      
      /**
       * 1000 millimeters equals 1 meter.
       */
      MM = 'MM',
      
      /**
       * 100 centimeters equals 1 meter.
       */
      CM = 'CM',
      
      /**
       * Metric system unit of length.
       */
      M = 'M',
      
      /**
       * Metric system unit of area.
       */
      M2 = 'M2'
    }
    
    /**
     * Systems of weights and measures.
     */
    export const enum UnitSystem {
      
      /**
       * Imperial system of weights and measures.
       */
      IMPERIAL_SYSTEM = 'IMPERIAL_SYSTEM',
      
      /**
       * Metric system of weights and measures.
       */
      METRIC_SYSTEM = 'METRIC_SYSTEM'
    }
    
    /**
     * An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.
     * 
     * Example value: `"50"`.
     * 
     */
    export type UnsignedInt64 = any;
    
    /**
     * A redirect on the online store.
     */
    export interface UrlRedirect extends Node {
      
      /**
       * The ID of the URL redirect.
       */
      id: string;
      
      /**
       * The old path to be redirected from. When the user visits this path, they'll be redirected to the target location.
       */
      path: string;
      
      /**
       * The target location where the user will be redirected to.
       */
      target: string;
    }
    
    /**
     * An auto-generated type for paginating through multiple UrlRedirects.
     * 
     */
    export interface UrlRedirectConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<UrlRedirectEdge>;
      
      /**
       * A list of the nodes contained in UrlRedirectEdge.
       */
      nodes: Array<UrlRedirect>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one UrlRedirect and a cursor during pagination.
     * 
     */
    export interface UrlRedirectEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of UrlRedirectEdge.
       */
      node: UrlRedirect;
    }
    
    /**
     * Represents an error in the input of a mutation.
     */
    export interface UserError extends DisplayableError {
      
      /**
       * The path to the input field that caused the error.
       */
      field?: Array<string>;
      
      /**
       * The error message.
       */
      message: string;
    }
    
    /**
     * The input fields for a filter used to view a subset of products in a collection matching a specific variant option.
     * 
     */
    export interface VariantOptionFilter {
      
      /**
       * The name of the variant option to filter on.
       */
      name: string;
      
      /**
       * The value of the variant option to filter on.
       */
      value: string;
    }
    
    /**
     * Represents a Shopify hosted video.
     */
    export interface Video extends Media, Node {
      
      /**
       * A word or phrase to share the nature or contents of a media.
       */
      alt?: string;
      
      /**
       * A globally-unique ID.
       */
      id: string;
      
      /**
       * The media content type.
       */
      mediaContentType: MediaContentType;
      
      /**
       * The presentation for a media.
       */
      presentation?: MediaPresentation;
      
      /**
       * The preview image for the media.
       */
      previewImage?: Image;
      
      /**
       * The sources for a video.
       */
      sources: Array<VideoSource>;
    }
    
    /**
     * Represents a source for a Shopify hosted video.
     */
    export interface VideoSource {
      
      /**
       * The format of the video source.
       */
      format: string;
      
      /**
       * The height of the video.
       */
      height: number;
      
      /**
       * The video MIME type.
       */
      mimeType: string;
      
      /**
       * The URL of the video.
       */
      url: string;
      
      /**
       * The width of the video.
       */
      width: number;
    }
    
    /**
     * Units of measurement for weight.
     */
    export const enum WeightUnit {
      
      /**
       * 1 kilogram equals 1000 grams.
       */
      KILOGRAMS = 'KILOGRAMS',
      
      /**
       * Metric system unit of mass.
       */
      GRAMS = 'GRAMS',
      
      /**
       * 1 pound equals 16 ounces.
       */
      POUNDS = 'POUNDS',
      
      /**
       * Imperial system unit of mass.
       */
      OUNCES = 'OUNCES'
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      ApiVersion?: ApiVersionTypeResolver;
      AppliedGiftCard?: AppliedGiftCardTypeResolver;
      Article?: ArticleTypeResolver;
      ArticleAuthor?: ArticleAuthorTypeResolver;
      ArticleConnection?: ArticleConnectionTypeResolver;
      ArticleEdge?: ArticleEdgeTypeResolver;
      Attribute?: AttributeTypeResolver;
      AutomaticDiscountApplication?: AutomaticDiscountApplicationTypeResolver;
      AvailableShippingRates?: AvailableShippingRatesTypeResolver;
      BaseCartLine?: {
        __resolveType: BaseCartLineTypeResolver
      };
      
      BaseCartLineConnection?: BaseCartLineConnectionTypeResolver;
      BaseCartLineEdge?: BaseCartLineEdgeTypeResolver;
      Blog?: BlogTypeResolver;
      BlogConnection?: BlogConnectionTypeResolver;
      BlogEdge?: BlogEdgeTypeResolver;
      Brand?: BrandTypeResolver;
      BrandColorGroup?: BrandColorGroupTypeResolver;
      BrandColors?: BrandColorsTypeResolver;
      Cart?: CartTypeResolver;
      CartAttributesUpdatePayload?: CartAttributesUpdatePayloadTypeResolver;
      CartAutomaticDiscountAllocation?: CartAutomaticDiscountAllocationTypeResolver;
      CartBuyerIdentity?: CartBuyerIdentityTypeResolver;
      CartBuyerIdentityUpdatePayload?: CartBuyerIdentityUpdatePayloadTypeResolver;
      CartCodeDiscountAllocation?: CartCodeDiscountAllocationTypeResolver;
      CartCompletionAction?: {
        __resolveType: CartCompletionActionTypeResolver
      };
      
      CartCompletionActionRequired?: CartCompletionActionRequiredTypeResolver;
      CartCompletionAttemptResult?: {
        __resolveType: CartCompletionAttemptResultTypeResolver
      };
      
      CartCompletionFailed?: CartCompletionFailedTypeResolver;
      CartCompletionProcessing?: CartCompletionProcessingTypeResolver;
      CartCompletionSuccess?: CartCompletionSuccessTypeResolver;
      CartCost?: CartCostTypeResolver;
      CartCreatePayload?: CartCreatePayloadTypeResolver;
      CartCustomDiscountAllocation?: CartCustomDiscountAllocationTypeResolver;
      CartDeliveryGroup?: CartDeliveryGroupTypeResolver;
      CartDeliveryGroupConnection?: CartDeliveryGroupConnectionTypeResolver;
      CartDeliveryGroupEdge?: CartDeliveryGroupEdgeTypeResolver;
      CartDeliveryOption?: CartDeliveryOptionTypeResolver;
      CartDiscountAllocation?: {
        __resolveType: CartDiscountAllocationTypeResolver
      };
      
      CartDiscountCode?: CartDiscountCodeTypeResolver;
      CartDiscountCodesUpdatePayload?: CartDiscountCodesUpdatePayloadTypeResolver;
      CartEstimatedCost?: CartEstimatedCostTypeResolver;
      CartLine?: CartLineTypeResolver;
      CartLineCost?: CartLineCostTypeResolver;
      CartLineEstimatedCost?: CartLineEstimatedCostTypeResolver;
      CartLinesAddPayload?: CartLinesAddPayloadTypeResolver;
      CartLinesRemovePayload?: CartLinesRemovePayloadTypeResolver;
      CartLinesUpdatePayload?: CartLinesUpdatePayloadTypeResolver;
      CartMetafieldDeletePayload?: CartMetafieldDeletePayloadTypeResolver;
      CartMetafieldsSetPayload?: CartMetafieldsSetPayloadTypeResolver;
      CartNoteUpdatePayload?: CartNoteUpdatePayloadTypeResolver;
      CartPaymentUpdatePayload?: CartPaymentUpdatePayloadTypeResolver;
      CartSelectedDeliveryOptionsUpdatePayload?: CartSelectedDeliveryOptionsUpdatePayloadTypeResolver;
      CartSubmitForCompletionPayload?: CartSubmitForCompletionPayloadTypeResolver;
      CartSubmitForCompletionResult?: {
        __resolveType: CartSubmitForCompletionResultTypeResolver
      };
      
      CartUserError?: CartUserErrorTypeResolver;
      Checkout?: CheckoutTypeResolver;
      CheckoutAttributesUpdateV2Payload?: CheckoutAttributesUpdateV2PayloadTypeResolver;
      CheckoutBuyerIdentity?: CheckoutBuyerIdentityTypeResolver;
      CheckoutCompleteFreePayload?: CheckoutCompleteFreePayloadTypeResolver;
      CheckoutCompleteWithCreditCardV2Payload?: CheckoutCompleteWithCreditCardV2PayloadTypeResolver;
      CheckoutCompleteWithTokenizedPaymentV3Payload?: CheckoutCompleteWithTokenizedPaymentV3PayloadTypeResolver;
      CheckoutCreatePayload?: CheckoutCreatePayloadTypeResolver;
      CheckoutCustomerAssociateV2Payload?: CheckoutCustomerAssociateV2PayloadTypeResolver;
      CheckoutCustomerDisassociateV2Payload?: CheckoutCustomerDisassociateV2PayloadTypeResolver;
      CheckoutDiscountCodeApplyV2Payload?: CheckoutDiscountCodeApplyV2PayloadTypeResolver;
      CheckoutDiscountCodeRemovePayload?: CheckoutDiscountCodeRemovePayloadTypeResolver;
      CheckoutEmailUpdateV2Payload?: CheckoutEmailUpdateV2PayloadTypeResolver;
      CheckoutGiftCardRemoveV2Payload?: CheckoutGiftCardRemoveV2PayloadTypeResolver;
      CheckoutGiftCardsAppendPayload?: CheckoutGiftCardsAppendPayloadTypeResolver;
      CheckoutLineItem?: CheckoutLineItemTypeResolver;
      CheckoutLineItemConnection?: CheckoutLineItemConnectionTypeResolver;
      CheckoutLineItemEdge?: CheckoutLineItemEdgeTypeResolver;
      CheckoutLineItemsAddPayload?: CheckoutLineItemsAddPayloadTypeResolver;
      CheckoutLineItemsRemovePayload?: CheckoutLineItemsRemovePayloadTypeResolver;
      CheckoutLineItemsReplacePayload?: CheckoutLineItemsReplacePayloadTypeResolver;
      CheckoutLineItemsUpdatePayload?: CheckoutLineItemsUpdatePayloadTypeResolver;
      CheckoutShippingAddressUpdateV2Payload?: CheckoutShippingAddressUpdateV2PayloadTypeResolver;
      CheckoutShippingLineUpdatePayload?: CheckoutShippingLineUpdatePayloadTypeResolver;
      CheckoutUserError?: CheckoutUserErrorTypeResolver;
      Collection?: CollectionTypeResolver;
      CollectionConnection?: CollectionConnectionTypeResolver;
      CollectionEdge?: CollectionEdgeTypeResolver;
      Color?: GraphQLScalarType;
      Comment?: CommentTypeResolver;
      CommentAuthor?: CommentAuthorTypeResolver;
      CommentConnection?: CommentConnectionTypeResolver;
      CommentEdge?: CommentEdgeTypeResolver;
      CompletePaymentChallenge?: CompletePaymentChallengeTypeResolver;
      CompletionError?: CompletionErrorTypeResolver;
      Country?: CountryTypeResolver;
      CreditCard?: CreditCardTypeResolver;
      Currency?: CurrencyTypeResolver;
      Customer?: CustomerTypeResolver;
      CustomerAccessToken?: CustomerAccessTokenTypeResolver;
      CustomerAccessTokenCreatePayload?: CustomerAccessTokenCreatePayloadTypeResolver;
      CustomerAccessTokenCreateWithMultipassPayload?: CustomerAccessTokenCreateWithMultipassPayloadTypeResolver;
      CustomerAccessTokenDeletePayload?: CustomerAccessTokenDeletePayloadTypeResolver;
      CustomerAccessTokenRenewPayload?: CustomerAccessTokenRenewPayloadTypeResolver;
      CustomerActivateByUrlPayload?: CustomerActivateByUrlPayloadTypeResolver;
      CustomerActivatePayload?: CustomerActivatePayloadTypeResolver;
      CustomerAddressCreatePayload?: CustomerAddressCreatePayloadTypeResolver;
      CustomerAddressDeletePayload?: CustomerAddressDeletePayloadTypeResolver;
      CustomerAddressUpdatePayload?: CustomerAddressUpdatePayloadTypeResolver;
      CustomerCreatePayload?: CustomerCreatePayloadTypeResolver;
      CustomerDefaultAddressUpdatePayload?: CustomerDefaultAddressUpdatePayloadTypeResolver;
      CustomerRecoverPayload?: CustomerRecoverPayloadTypeResolver;
      CustomerResetByUrlPayload?: CustomerResetByUrlPayloadTypeResolver;
      CustomerResetPayload?: CustomerResetPayloadTypeResolver;
      CustomerUpdatePayload?: CustomerUpdatePayloadTypeResolver;
      CustomerUserError?: CustomerUserErrorTypeResolver;
      DateTime?: GraphQLScalarType;
      Decimal?: GraphQLScalarType;
      DeliveryAddress?: {
        __resolveType: DeliveryAddressTypeResolver
      };
      
      DiscountAllocation?: DiscountAllocationTypeResolver;
      DiscountApplication?: {
        __resolveType: DiscountApplicationTypeResolver
      };
      
      DiscountApplicationConnection?: DiscountApplicationConnectionTypeResolver;
      DiscountApplicationEdge?: DiscountApplicationEdgeTypeResolver;
      DiscountCodeApplication?: DiscountCodeApplicationTypeResolver;
      DisplayableError?: {
        __resolveType: DisplayableErrorTypeResolver
      };
      
      Domain?: DomainTypeResolver;
      ExternalVideo?: ExternalVideoTypeResolver;
      Filter?: FilterTypeResolver;
      FilterValue?: FilterValueTypeResolver;
      Fulfillment?: FulfillmentTypeResolver;
      FulfillmentLineItem?: FulfillmentLineItemTypeResolver;
      FulfillmentLineItemConnection?: FulfillmentLineItemConnectionTypeResolver;
      FulfillmentLineItemEdge?: FulfillmentLineItemEdgeTypeResolver;
      FulfillmentTrackingInfo?: FulfillmentTrackingInfoTypeResolver;
      GenericFile?: GenericFileTypeResolver;
      HTML?: GraphQLScalarType;
      HasMetafields?: {
        __resolveType: HasMetafieldsTypeResolver
      };
      
      Image?: ImageTypeResolver;
      ImageConnection?: ImageConnectionTypeResolver;
      ImageEdge?: ImageEdgeTypeResolver;
      JSON?: GraphQLScalarType;
      Language?: LanguageTypeResolver;
      Localization?: LocalizationTypeResolver;
      Location?: LocationTypeResolver;
      LocationAddress?: LocationAddressTypeResolver;
      LocationConnection?: LocationConnectionTypeResolver;
      LocationEdge?: LocationEdgeTypeResolver;
      MailingAddress?: MailingAddressTypeResolver;
      MailingAddressConnection?: MailingAddressConnectionTypeResolver;
      MailingAddressEdge?: MailingAddressEdgeTypeResolver;
      ManualDiscountApplication?: ManualDiscountApplicationTypeResolver;
      Market?: MarketTypeResolver;
      Media?: {
        __resolveType: MediaTypeResolver
      };
      
      MediaConnection?: MediaConnectionTypeResolver;
      MediaEdge?: MediaEdgeTypeResolver;
      MediaImage?: MediaImageTypeResolver;
      MediaPresentation?: MediaPresentationTypeResolver;
      Menu?: MenuTypeResolver;
      MenuItem?: MenuItemTypeResolver;
      MenuItemResource?: {
        __resolveType: MenuItemResourceTypeResolver
      };
      
      Merchandise?: {
        __resolveType: MerchandiseTypeResolver
      };
      
      Metafield?: MetafieldTypeResolver;
      MetafieldDeleteUserError?: MetafieldDeleteUserErrorTypeResolver;
      MetafieldParentResource?: {
        __resolveType: MetafieldParentResourceTypeResolver
      };
      
      MetafieldReference?: {
        __resolveType: MetafieldReferenceTypeResolver
      };
      
      MetafieldReferenceConnection?: MetafieldReferenceConnectionTypeResolver;
      MetafieldReferenceEdge?: MetafieldReferenceEdgeTypeResolver;
      MetafieldsSetUserError?: MetafieldsSetUserErrorTypeResolver;
      Metaobject?: MetaobjectTypeResolver;
      MetaobjectConnection?: MetaobjectConnectionTypeResolver;
      MetaobjectEdge?: MetaobjectEdgeTypeResolver;
      MetaobjectField?: MetaobjectFieldTypeResolver;
      Model3d?: Model3dTypeResolver;
      Model3dSource?: Model3dSourceTypeResolver;
      MoneyV2?: MoneyV2TypeResolver;
      Mutation?: MutationTypeResolver;
      Node?: {
        __resolveType: NodeTypeResolver
      };
      
      OnlineStorePublishable?: {
        __resolveType: OnlineStorePublishableTypeResolver
      };
      
      Order?: OrderTypeResolver;
      OrderConnection?: OrderConnectionTypeResolver;
      OrderEdge?: OrderEdgeTypeResolver;
      OrderLineItem?: OrderLineItemTypeResolver;
      OrderLineItemConnection?: OrderLineItemConnectionTypeResolver;
      OrderLineItemEdge?: OrderLineItemEdgeTypeResolver;
      Page?: PageTypeResolver;
      PageConnection?: PageConnectionTypeResolver;
      PageEdge?: PageEdgeTypeResolver;
      PageInfo?: PageInfoTypeResolver;
      Payment?: PaymentTypeResolver;
      PaymentSettings?: PaymentSettingsTypeResolver;
      PredictiveSearchResult?: PredictiveSearchResultTypeResolver;
      PricingPercentageValue?: PricingPercentageValueTypeResolver;
      PricingValue?: {
        __resolveType: PricingValueTypeResolver
      };
      
      Product?: ProductTypeResolver;
      ProductConnection?: ProductConnectionTypeResolver;
      ProductEdge?: ProductEdgeTypeResolver;
      ProductOption?: ProductOptionTypeResolver;
      ProductPriceRange?: ProductPriceRangeTypeResolver;
      ProductVariant?: ProductVariantTypeResolver;
      ProductVariantConnection?: ProductVariantConnectionTypeResolver;
      ProductVariantEdge?: ProductVariantEdgeTypeResolver;
      QueryRoot?: QueryRootTypeResolver;
      SEO?: SEOTypeResolver;
      ScriptDiscountApplication?: ScriptDiscountApplicationTypeResolver;
      SearchQuerySuggestion?: SearchQuerySuggestionTypeResolver;
      SearchResultItem?: {
        __resolveType: SearchResultItemTypeResolver
      };
      
      SearchResultItemConnection?: SearchResultItemConnectionTypeResolver;
      SearchResultItemEdge?: SearchResultItemEdgeTypeResolver;
      SelectedOption?: SelectedOptionTypeResolver;
      SellingPlan?: SellingPlanTypeResolver;
      SellingPlanAllocation?: SellingPlanAllocationTypeResolver;
      SellingPlanAllocationConnection?: SellingPlanAllocationConnectionTypeResolver;
      SellingPlanAllocationEdge?: SellingPlanAllocationEdgeTypeResolver;
      SellingPlanAllocationPriceAdjustment?: SellingPlanAllocationPriceAdjustmentTypeResolver;
      SellingPlanCheckoutCharge?: SellingPlanCheckoutChargeTypeResolver;
      SellingPlanCheckoutChargePercentageValue?: SellingPlanCheckoutChargePercentageValueTypeResolver;
      SellingPlanCheckoutChargeValue?: {
        __resolveType: SellingPlanCheckoutChargeValueTypeResolver
      };
      
      SellingPlanConnection?: SellingPlanConnectionTypeResolver;
      SellingPlanEdge?: SellingPlanEdgeTypeResolver;
      SellingPlanFixedAmountPriceAdjustment?: SellingPlanFixedAmountPriceAdjustmentTypeResolver;
      SellingPlanFixedPriceAdjustment?: SellingPlanFixedPriceAdjustmentTypeResolver;
      SellingPlanGroup?: SellingPlanGroupTypeResolver;
      SellingPlanGroupConnection?: SellingPlanGroupConnectionTypeResolver;
      SellingPlanGroupEdge?: SellingPlanGroupEdgeTypeResolver;
      SellingPlanGroupOption?: SellingPlanGroupOptionTypeResolver;
      SellingPlanOption?: SellingPlanOptionTypeResolver;
      SellingPlanPercentagePriceAdjustment?: SellingPlanPercentagePriceAdjustmentTypeResolver;
      SellingPlanPriceAdjustment?: SellingPlanPriceAdjustmentTypeResolver;
      SellingPlanPriceAdjustmentValue?: {
        __resolveType: SellingPlanPriceAdjustmentValueTypeResolver
      };
      
      ShippingRate?: ShippingRateTypeResolver;
      Shop?: ShopTypeResolver;
      ShopPolicy?: ShopPolicyTypeResolver;
      ShopPolicyWithDefault?: ShopPolicyWithDefaultTypeResolver;
      StoreAvailability?: StoreAvailabilityTypeResolver;
      StoreAvailabilityConnection?: StoreAvailabilityConnectionTypeResolver;
      StoreAvailabilityEdge?: StoreAvailabilityEdgeTypeResolver;
      StringConnection?: StringConnectionTypeResolver;
      StringEdge?: StringEdgeTypeResolver;
      SubmissionError?: SubmissionErrorTypeResolver;
      SubmitAlreadyAccepted?: SubmitAlreadyAcceptedTypeResolver;
      SubmitFailed?: SubmitFailedTypeResolver;
      SubmitSuccess?: SubmitSuccessTypeResolver;
      SubmitThrottled?: SubmitThrottledTypeResolver;
      Trackable?: {
        __resolveType: TrackableTypeResolver
      };
      
      Transaction?: TransactionTypeResolver;
      URL?: GraphQLScalarType;
      UnitPriceMeasurement?: UnitPriceMeasurementTypeResolver;
      UnsignedInt64?: GraphQLScalarType;
      UrlRedirect?: UrlRedirectTypeResolver;
      UrlRedirectConnection?: UrlRedirectConnectionTypeResolver;
      UrlRedirectEdge?: UrlRedirectEdgeTypeResolver;
      UserError?: UserErrorTypeResolver;
      Video?: VideoTypeResolver;
      VideoSource?: VideoSourceTypeResolver;
    }
    export interface ApiVersionTypeResolver<TParent = any> {
      displayName?: ApiVersionToDisplayNameResolver<TParent>;
      handle?: ApiVersionToHandleResolver<TParent>;
      supported?: ApiVersionToSupportedResolver<TParent>;
    }
    
    export interface ApiVersionToDisplayNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApiVersionToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApiVersionToSupportedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardTypeResolver<TParent = any> {
      amountUsed?: AppliedGiftCardToAmountUsedResolver<TParent>;
      amountUsedV2?: AppliedGiftCardToAmountUsedV2Resolver<TParent>;
      balance?: AppliedGiftCardToBalanceResolver<TParent>;
      balanceV2?: AppliedGiftCardToBalanceV2Resolver<TParent>;
      id?: AppliedGiftCardToIdResolver<TParent>;
      lastCharacters?: AppliedGiftCardToLastCharactersResolver<TParent>;
      presentmentAmountUsed?: AppliedGiftCardToPresentmentAmountUsedResolver<TParent>;
    }
    
    export interface AppliedGiftCardToAmountUsedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToAmountUsedV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToBalanceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToBalanceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToLastCharactersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AppliedGiftCardToPresentmentAmountUsedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleTypeResolver<TParent = any> {
      author?: ArticleToAuthorResolver<TParent>;
      authorV2?: ArticleToAuthorV2Resolver<TParent>;
      blog?: ArticleToBlogResolver<TParent>;
      comments?: ArticleToCommentsResolver<TParent>;
      content?: ArticleToContentResolver<TParent>;
      contentHtml?: ArticleToContentHtmlResolver<TParent>;
      excerpt?: ArticleToExcerptResolver<TParent>;
      excerptHtml?: ArticleToExcerptHtmlResolver<TParent>;
      handle?: ArticleToHandleResolver<TParent>;
      id?: ArticleToIdResolver<TParent>;
      image?: ArticleToImageResolver<TParent>;
      metafield?: ArticleToMetafieldResolver<TParent>;
      metafields?: ArticleToMetafieldsResolver<TParent>;
      onlineStoreUrl?: ArticleToOnlineStoreUrlResolver<TParent>;
      publishedAt?: ArticleToPublishedAtResolver<TParent>;
      seo?: ArticleToSeoResolver<TParent>;
      tags?: ArticleToTagsResolver<TParent>;
      title?: ArticleToTitleResolver<TParent>;
      trackingParameters?: ArticleToTrackingParametersResolver<TParent>;
    }
    
    export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToAuthorV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToBlogResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToCommentsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ArticleToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToContentArgs {
      truncateAt?: number;
    }
    export interface ArticleToContentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ArticleToContentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToContentHtmlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToExcerptArgs {
      truncateAt?: number;
    }
    export interface ArticleToExcerptResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ArticleToExcerptArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToExcerptHtmlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface ArticleToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ArticleToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface ArticleToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ArticleToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToOnlineStoreUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToPublishedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToSeoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToTagsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleToTrackingParametersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleAuthorTypeResolver<TParent = any> {
      bio?: ArticleAuthorToBioResolver<TParent>;
      email?: ArticleAuthorToEmailResolver<TParent>;
      firstName?: ArticleAuthorToFirstNameResolver<TParent>;
      lastName?: ArticleAuthorToLastNameResolver<TParent>;
      name?: ArticleAuthorToNameResolver<TParent>;
    }
    
    export interface ArticleAuthorToBioResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleAuthorToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleAuthorToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleAuthorToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleAuthorToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleConnectionTypeResolver<TParent = any> {
      edges?: ArticleConnectionToEdgesResolver<TParent>;
      nodes?: ArticleConnectionToNodesResolver<TParent>;
      pageInfo?: ArticleConnectionToPageInfoResolver<TParent>;
    }
    
    export interface ArticleConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleEdgeTypeResolver<TParent = any> {
      cursor?: ArticleEdgeToCursorResolver<TParent>;
      node?: ArticleEdgeToNodeResolver<TParent>;
    }
    
    export interface ArticleEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ArticleEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AttributeTypeResolver<TParent = any> {
      key?: AttributeToKeyResolver<TParent>;
      value?: AttributeToValueResolver<TParent>;
    }
    
    export interface AttributeToKeyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AttributeToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AutomaticDiscountApplicationTypeResolver<TParent = any> {
      allocationMethod?: AutomaticDiscountApplicationToAllocationMethodResolver<TParent>;
      targetSelection?: AutomaticDiscountApplicationToTargetSelectionResolver<TParent>;
      targetType?: AutomaticDiscountApplicationToTargetTypeResolver<TParent>;
      title?: AutomaticDiscountApplicationToTitleResolver<TParent>;
      value?: AutomaticDiscountApplicationToValueResolver<TParent>;
    }
    
    export interface AutomaticDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AutomaticDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AutomaticDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AutomaticDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AutomaticDiscountApplicationToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AvailableShippingRatesTypeResolver<TParent = any> {
      ready?: AvailableShippingRatesToReadyResolver<TParent>;
      shippingRates?: AvailableShippingRatesToShippingRatesResolver<TParent>;
    }
    
    export interface AvailableShippingRatesToReadyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AvailableShippingRatesToShippingRatesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BaseCartLineTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'CartLine' | Promise<'CartLine'>;
    }
    export interface BaseCartLineConnectionTypeResolver<TParent = any> {
      edges?: BaseCartLineConnectionToEdgesResolver<TParent>;
      nodes?: BaseCartLineConnectionToNodesResolver<TParent>;
      pageInfo?: BaseCartLineConnectionToPageInfoResolver<TParent>;
    }
    
    export interface BaseCartLineConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BaseCartLineConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BaseCartLineConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BaseCartLineEdgeTypeResolver<TParent = any> {
      cursor?: BaseCartLineEdgeToCursorResolver<TParent>;
      node?: BaseCartLineEdgeToNodeResolver<TParent>;
    }
    
    export interface BaseCartLineEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BaseCartLineEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogTypeResolver<TParent = any> {
      articleByHandle?: BlogToArticleByHandleResolver<TParent>;
      articles?: BlogToArticlesResolver<TParent>;
      authors?: BlogToAuthorsResolver<TParent>;
      handle?: BlogToHandleResolver<TParent>;
      id?: BlogToIdResolver<TParent>;
      metafield?: BlogToMetafieldResolver<TParent>;
      metafields?: BlogToMetafieldsResolver<TParent>;
      onlineStoreUrl?: BlogToOnlineStoreUrlResolver<TParent>;
      seo?: BlogToSeoResolver<TParent>;
      title?: BlogToTitleResolver<TParent>;
    }
    
    export interface BlogToArticleByHandleArgs {
      handle: string;
    }
    export interface BlogToArticleByHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: BlogToArticleByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToArticlesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ArticleSortKeys;
      query?: string;
    }
    export interface BlogToArticlesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: BlogToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToAuthorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface BlogToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: BlogToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface BlogToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: BlogToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToOnlineStoreUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToSeoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogConnectionTypeResolver<TParent = any> {
      edges?: BlogConnectionToEdgesResolver<TParent>;
      nodes?: BlogConnectionToNodesResolver<TParent>;
      pageInfo?: BlogConnectionToPageInfoResolver<TParent>;
    }
    
    export interface BlogConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogEdgeTypeResolver<TParent = any> {
      cursor?: BlogEdgeToCursorResolver<TParent>;
      node?: BlogEdgeToNodeResolver<TParent>;
    }
    
    export interface BlogEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BlogEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandTypeResolver<TParent = any> {
      colors?: BrandToColorsResolver<TParent>;
      coverImage?: BrandToCoverImageResolver<TParent>;
      logo?: BrandToLogoResolver<TParent>;
      shortDescription?: BrandToShortDescriptionResolver<TParent>;
      slogan?: BrandToSloganResolver<TParent>;
      squareLogo?: BrandToSquareLogoResolver<TParent>;
    }
    
    export interface BrandToColorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandToCoverImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandToLogoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandToShortDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandToSloganResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandToSquareLogoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandColorGroupTypeResolver<TParent = any> {
      background?: BrandColorGroupToBackgroundResolver<TParent>;
      foreground?: BrandColorGroupToForegroundResolver<TParent>;
    }
    
    export interface BrandColorGroupToBackgroundResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandColorGroupToForegroundResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandColorsTypeResolver<TParent = any> {
      primary?: BrandColorsToPrimaryResolver<TParent>;
      secondary?: BrandColorsToSecondaryResolver<TParent>;
    }
    
    export interface BrandColorsToPrimaryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BrandColorsToSecondaryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartTypeResolver<TParent = any> {
      attribute?: CartToAttributeResolver<TParent>;
      attributes?: CartToAttributesResolver<TParent>;
      buyerIdentity?: CartToBuyerIdentityResolver<TParent>;
      checkoutUrl?: CartToCheckoutUrlResolver<TParent>;
      cost?: CartToCostResolver<TParent>;
      createdAt?: CartToCreatedAtResolver<TParent>;
      deliveryGroups?: CartToDeliveryGroupsResolver<TParent>;
      discountAllocations?: CartToDiscountAllocationsResolver<TParent>;
      discountCodes?: CartToDiscountCodesResolver<TParent>;
      estimatedCost?: CartToEstimatedCostResolver<TParent>;
      id?: CartToIdResolver<TParent>;
      lines?: CartToLinesResolver<TParent>;
      metafield?: CartToMetafieldResolver<TParent>;
      metafields?: CartToMetafieldsResolver<TParent>;
      note?: CartToNoteResolver<TParent>;
      totalQuantity?: CartToTotalQuantityResolver<TParent>;
      updatedAt?: CartToUpdatedAtResolver<TParent>;
    }
    
    export interface CartToAttributeArgs {
      key: string;
    }
    export interface CartToAttributeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartToAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToBuyerIdentityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToCheckoutUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToCostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToDeliveryGroupsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CartToDeliveryGroupsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartToDeliveryGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToDiscountCodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToEstimatedCostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToLinesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CartToLinesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartToLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface CartToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface CartToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToNoteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToTotalQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartAttributesUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartAttributesUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartAttributesUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartAttributesUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartAttributesUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartAutomaticDiscountAllocationTypeResolver<TParent = any> {
      discountedAmount?: CartAutomaticDiscountAllocationToDiscountedAmountResolver<TParent>;
      title?: CartAutomaticDiscountAllocationToTitleResolver<TParent>;
    }
    
    export interface CartAutomaticDiscountAllocationToDiscountedAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartAutomaticDiscountAllocationToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityTypeResolver<TParent = any> {
      countryCode?: CartBuyerIdentityToCountryCodeResolver<TParent>;
      customer?: CartBuyerIdentityToCustomerResolver<TParent>;
      deliveryAddressPreferences?: CartBuyerIdentityToDeliveryAddressPreferencesResolver<TParent>;
      email?: CartBuyerIdentityToEmailResolver<TParent>;
      phone?: CartBuyerIdentityToPhoneResolver<TParent>;
      walletPreferences?: CartBuyerIdentityToWalletPreferencesResolver<TParent>;
    }
    
    export interface CartBuyerIdentityToCountryCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityToDeliveryAddressPreferencesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityToWalletPreferencesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartBuyerIdentityUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartBuyerIdentityUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartBuyerIdentityUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartBuyerIdentityUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCodeDiscountAllocationTypeResolver<TParent = any> {
      code?: CartCodeDiscountAllocationToCodeResolver<TParent>;
      discountedAmount?: CartCodeDiscountAllocationToDiscountedAmountResolver<TParent>;
    }
    
    export interface CartCodeDiscountAllocationToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCodeDiscountAllocationToDiscountedAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionActionTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'CompletePaymentChallenge' | Promise<'CompletePaymentChallenge'>;
    }
    export interface CartCompletionActionRequiredTypeResolver<TParent = any> {
      action?: CartCompletionActionRequiredToActionResolver<TParent>;
      id?: CartCompletionActionRequiredToIdResolver<TParent>;
    }
    
    export interface CartCompletionActionRequiredToActionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionActionRequiredToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionAttemptResultTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'CartCompletionActionRequired' | 'CartCompletionFailed' | 'CartCompletionProcessing' | 'CartCompletionSuccess' | Promise<'CartCompletionActionRequired' | 'CartCompletionFailed' | 'CartCompletionProcessing' | 'CartCompletionSuccess'>;
    }
    export interface CartCompletionFailedTypeResolver<TParent = any> {
      errors?: CartCompletionFailedToErrorsResolver<TParent>;
      id?: CartCompletionFailedToIdResolver<TParent>;
    }
    
    export interface CartCompletionFailedToErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionFailedToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionProcessingTypeResolver<TParent = any> {
      id?: CartCompletionProcessingToIdResolver<TParent>;
      pollDelay?: CartCompletionProcessingToPollDelayResolver<TParent>;
    }
    
    export interface CartCompletionProcessingToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionProcessingToPollDelayResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionSuccessTypeResolver<TParent = any> {
      completedAt?: CartCompletionSuccessToCompletedAtResolver<TParent>;
      id?: CartCompletionSuccessToIdResolver<TParent>;
      orderId?: CartCompletionSuccessToOrderIdResolver<TParent>;
      orderUrl?: CartCompletionSuccessToOrderUrlResolver<TParent>;
    }
    
    export interface CartCompletionSuccessToCompletedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionSuccessToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionSuccessToOrderIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCompletionSuccessToOrderUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostTypeResolver<TParent = any> {
      checkoutChargeAmount?: CartCostToCheckoutChargeAmountResolver<TParent>;
      subtotalAmount?: CartCostToSubtotalAmountResolver<TParent>;
      subtotalAmountEstimated?: CartCostToSubtotalAmountEstimatedResolver<TParent>;
      totalAmount?: CartCostToTotalAmountResolver<TParent>;
      totalAmountEstimated?: CartCostToTotalAmountEstimatedResolver<TParent>;
      totalDutyAmount?: CartCostToTotalDutyAmountResolver<TParent>;
      totalDutyAmountEstimated?: CartCostToTotalDutyAmountEstimatedResolver<TParent>;
      totalTaxAmount?: CartCostToTotalTaxAmountResolver<TParent>;
      totalTaxAmountEstimated?: CartCostToTotalTaxAmountEstimatedResolver<TParent>;
    }
    
    export interface CartCostToCheckoutChargeAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToSubtotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToSubtotalAmountEstimatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalAmountEstimatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalDutyAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalDutyAmountEstimatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalTaxAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCostToTotalTaxAmountEstimatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCreatePayloadTypeResolver<TParent = any> {
      cart?: CartCreatePayloadToCartResolver<TParent>;
      userErrors?: CartCreatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartCreatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCustomDiscountAllocationTypeResolver<TParent = any> {
      discountedAmount?: CartCustomDiscountAllocationToDiscountedAmountResolver<TParent>;
      title?: CartCustomDiscountAllocationToTitleResolver<TParent>;
    }
    
    export interface CartCustomDiscountAllocationToDiscountedAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartCustomDiscountAllocationToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupTypeResolver<TParent = any> {
      cartLines?: CartDeliveryGroupToCartLinesResolver<TParent>;
      deliveryAddress?: CartDeliveryGroupToDeliveryAddressResolver<TParent>;
      deliveryOptions?: CartDeliveryGroupToDeliveryOptionsResolver<TParent>;
      id?: CartDeliveryGroupToIdResolver<TParent>;
      selectedDeliveryOption?: CartDeliveryGroupToSelectedDeliveryOptionResolver<TParent>;
    }
    
    export interface CartDeliveryGroupToCartLinesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CartDeliveryGroupToCartLinesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartDeliveryGroupToCartLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupToDeliveryAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupToDeliveryOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupToSelectedDeliveryOptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupConnectionTypeResolver<TParent = any> {
      edges?: CartDeliveryGroupConnectionToEdgesResolver<TParent>;
      nodes?: CartDeliveryGroupConnectionToNodesResolver<TParent>;
      pageInfo?: CartDeliveryGroupConnectionToPageInfoResolver<TParent>;
    }
    
    export interface CartDeliveryGroupConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupEdgeTypeResolver<TParent = any> {
      cursor?: CartDeliveryGroupEdgeToCursorResolver<TParent>;
      node?: CartDeliveryGroupEdgeToNodeResolver<TParent>;
    }
    
    export interface CartDeliveryGroupEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryGroupEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionTypeResolver<TParent = any> {
      code?: CartDeliveryOptionToCodeResolver<TParent>;
      deliveryMethodType?: CartDeliveryOptionToDeliveryMethodTypeResolver<TParent>;
      description?: CartDeliveryOptionToDescriptionResolver<TParent>;
      estimatedCost?: CartDeliveryOptionToEstimatedCostResolver<TParent>;
      handle?: CartDeliveryOptionToHandleResolver<TParent>;
      title?: CartDeliveryOptionToTitleResolver<TParent>;
    }
    
    export interface CartDeliveryOptionToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionToDeliveryMethodTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionToEstimatedCostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDeliveryOptionToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDiscountAllocationTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'CartAutomaticDiscountAllocation' | 'CartCodeDiscountAllocation' | 'CartCustomDiscountAllocation' | Promise<'CartAutomaticDiscountAllocation' | 'CartCodeDiscountAllocation' | 'CartCustomDiscountAllocation'>;
    }
    export interface CartDiscountCodeTypeResolver<TParent = any> {
      applicable?: CartDiscountCodeToApplicableResolver<TParent>;
      code?: CartDiscountCodeToCodeResolver<TParent>;
    }
    
    export interface CartDiscountCodeToApplicableResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDiscountCodeToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDiscountCodesUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartDiscountCodesUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartDiscountCodesUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartDiscountCodesUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartDiscountCodesUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartEstimatedCostTypeResolver<TParent = any> {
      checkoutChargeAmount?: CartEstimatedCostToCheckoutChargeAmountResolver<TParent>;
      subtotalAmount?: CartEstimatedCostToSubtotalAmountResolver<TParent>;
      totalAmount?: CartEstimatedCostToTotalAmountResolver<TParent>;
      totalDutyAmount?: CartEstimatedCostToTotalDutyAmountResolver<TParent>;
      totalTaxAmount?: CartEstimatedCostToTotalTaxAmountResolver<TParent>;
    }
    
    export interface CartEstimatedCostToCheckoutChargeAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartEstimatedCostToSubtotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartEstimatedCostToTotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartEstimatedCostToTotalDutyAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartEstimatedCostToTotalTaxAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineTypeResolver<TParent = any> {
      attribute?: CartLineToAttributeResolver<TParent>;
      attributes?: CartLineToAttributesResolver<TParent>;
      cost?: CartLineToCostResolver<TParent>;
      discountAllocations?: CartLineToDiscountAllocationsResolver<TParent>;
      estimatedCost?: CartLineToEstimatedCostResolver<TParent>;
      id?: CartLineToIdResolver<TParent>;
      merchandise?: CartLineToMerchandiseResolver<TParent>;
      quantity?: CartLineToQuantityResolver<TParent>;
      sellingPlanAllocation?: CartLineToSellingPlanAllocationResolver<TParent>;
    }
    
    export interface CartLineToAttributeArgs {
      key: string;
    }
    export interface CartLineToAttributeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CartLineToAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToCostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToEstimatedCostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToMerchandiseResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineToSellingPlanAllocationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineCostTypeResolver<TParent = any> {
      amountPerQuantity?: CartLineCostToAmountPerQuantityResolver<TParent>;
      compareAtAmountPerQuantity?: CartLineCostToCompareAtAmountPerQuantityResolver<TParent>;
      subtotalAmount?: CartLineCostToSubtotalAmountResolver<TParent>;
      totalAmount?: CartLineCostToTotalAmountResolver<TParent>;
    }
    
    export interface CartLineCostToAmountPerQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineCostToCompareAtAmountPerQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineCostToSubtotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineCostToTotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineEstimatedCostTypeResolver<TParent = any> {
      amount?: CartLineEstimatedCostToAmountResolver<TParent>;
      compareAtAmount?: CartLineEstimatedCostToCompareAtAmountResolver<TParent>;
      subtotalAmount?: CartLineEstimatedCostToSubtotalAmountResolver<TParent>;
      totalAmount?: CartLineEstimatedCostToTotalAmountResolver<TParent>;
    }
    
    export interface CartLineEstimatedCostToAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineEstimatedCostToCompareAtAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineEstimatedCostToSubtotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLineEstimatedCostToTotalAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesAddPayloadTypeResolver<TParent = any> {
      cart?: CartLinesAddPayloadToCartResolver<TParent>;
      userErrors?: CartLinesAddPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartLinesAddPayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesRemovePayloadTypeResolver<TParent = any> {
      cart?: CartLinesRemovePayloadToCartResolver<TParent>;
      userErrors?: CartLinesRemovePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartLinesRemovePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartLinesUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartLinesUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartLinesUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartLinesUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartMetafieldDeletePayloadTypeResolver<TParent = any> {
      deletedId?: CartMetafieldDeletePayloadToDeletedIdResolver<TParent>;
      userErrors?: CartMetafieldDeletePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartMetafieldDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartMetafieldDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartMetafieldsSetPayloadTypeResolver<TParent = any> {
      metafields?: CartMetafieldsSetPayloadToMetafieldsResolver<TParent>;
      userErrors?: CartMetafieldsSetPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartMetafieldsSetPayloadToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartMetafieldsSetPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartNoteUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartNoteUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartNoteUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartNoteUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartNoteUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartPaymentUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartPaymentUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartPaymentUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartPaymentUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartPaymentUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartSelectedDeliveryOptionsUpdatePayloadTypeResolver<TParent = any> {
      cart?: CartSelectedDeliveryOptionsUpdatePayloadToCartResolver<TParent>;
      userErrors?: CartSelectedDeliveryOptionsUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartSelectedDeliveryOptionsUpdatePayloadToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartSelectedDeliveryOptionsUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartSubmitForCompletionPayloadTypeResolver<TParent = any> {
      result?: CartSubmitForCompletionPayloadToResultResolver<TParent>;
      userErrors?: CartSubmitForCompletionPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CartSubmitForCompletionPayloadToResultResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartSubmitForCompletionPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartSubmitForCompletionResultTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubmitAlreadyAccepted' | 'SubmitFailed' | 'SubmitSuccess' | 'SubmitThrottled' | Promise<'SubmitAlreadyAccepted' | 'SubmitFailed' | 'SubmitSuccess' | 'SubmitThrottled'>;
    }
    export interface CartUserErrorTypeResolver<TParent = any> {
      code?: CartUserErrorToCodeResolver<TParent>;
      field?: CartUserErrorToFieldResolver<TParent>;
      message?: CartUserErrorToMessageResolver<TParent>;
    }
    
    export interface CartUserErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartUserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CartUserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutTypeResolver<TParent = any> {
      appliedGiftCards?: CheckoutToAppliedGiftCardsResolver<TParent>;
      availableShippingRates?: CheckoutToAvailableShippingRatesResolver<TParent>;
      buyerIdentity?: CheckoutToBuyerIdentityResolver<TParent>;
      completedAt?: CheckoutToCompletedAtResolver<TParent>;
      createdAt?: CheckoutToCreatedAtResolver<TParent>;
      currencyCode?: CheckoutToCurrencyCodeResolver<TParent>;
      customAttributes?: CheckoutToCustomAttributesResolver<TParent>;
      discountApplications?: CheckoutToDiscountApplicationsResolver<TParent>;
      email?: CheckoutToEmailResolver<TParent>;
      id?: CheckoutToIdResolver<TParent>;
      lineItems?: CheckoutToLineItemsResolver<TParent>;
      lineItemsSubtotalPrice?: CheckoutToLineItemsSubtotalPriceResolver<TParent>;
      note?: CheckoutToNoteResolver<TParent>;
      order?: CheckoutToOrderResolver<TParent>;
      orderStatusUrl?: CheckoutToOrderStatusUrlResolver<TParent>;
      paymentDue?: CheckoutToPaymentDueResolver<TParent>;
      paymentDueV2?: CheckoutToPaymentDueV2Resolver<TParent>;
      ready?: CheckoutToReadyResolver<TParent>;
      requiresShipping?: CheckoutToRequiresShippingResolver<TParent>;
      shippingAddress?: CheckoutToShippingAddressResolver<TParent>;
      shippingDiscountAllocations?: CheckoutToShippingDiscountAllocationsResolver<TParent>;
      shippingLine?: CheckoutToShippingLineResolver<TParent>;
      subtotalPrice?: CheckoutToSubtotalPriceResolver<TParent>;
      subtotalPriceV2?: CheckoutToSubtotalPriceV2Resolver<TParent>;
      taxExempt?: CheckoutToTaxExemptResolver<TParent>;
      taxesIncluded?: CheckoutToTaxesIncludedResolver<TParent>;
      totalDuties?: CheckoutToTotalDutiesResolver<TParent>;
      totalPrice?: CheckoutToTotalPriceResolver<TParent>;
      totalPriceV2?: CheckoutToTotalPriceV2Resolver<TParent>;
      totalTax?: CheckoutToTotalTaxResolver<TParent>;
      totalTaxV2?: CheckoutToTotalTaxV2Resolver<TParent>;
      updatedAt?: CheckoutToUpdatedAtResolver<TParent>;
      webUrl?: CheckoutToWebUrlResolver<TParent>;
    }
    
    export interface CheckoutToAppliedGiftCardsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToAvailableShippingRatesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToBuyerIdentityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToCompletedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToCurrencyCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToCustomAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToDiscountApplicationsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CheckoutToDiscountApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CheckoutToDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToLineItemsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CheckoutToLineItemsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CheckoutToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToLineItemsSubtotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToNoteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToOrderResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToOrderStatusUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToPaymentDueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToPaymentDueV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToReadyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToRequiresShippingResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToShippingAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToShippingDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToShippingLineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToSubtotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToSubtotalPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTaxExemptResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTaxesIncludedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTotalDutiesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTotalPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTotalTaxResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToTotalTaxV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutToWebUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutAttributesUpdateV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutAttributesUpdateV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutAttributesUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutAttributesUpdateV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutAttributesUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutAttributesUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutAttributesUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutBuyerIdentityTypeResolver<TParent = any> {
      countryCode?: CheckoutBuyerIdentityToCountryCodeResolver<TParent>;
    }
    
    export interface CheckoutBuyerIdentityToCountryCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteFreePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCompleteFreePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCompleteFreePayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutCompleteFreePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCompleteFreePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteFreePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteFreePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithCreditCardV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCompleteWithCreditCardV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCompleteWithCreditCardV2PayloadToCheckoutUserErrorsResolver<TParent>;
      payment?: CheckoutCompleteWithCreditCardV2PayloadToPaymentResolver<TParent>;
      userErrors?: CheckoutCompleteWithCreditCardV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCompleteWithCreditCardV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithCreditCardV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithCreditCardV2PayloadToPaymentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithCreditCardV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithTokenizedPaymentV3PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutUserErrorsResolver<TParent>;
      payment?: CheckoutCompleteWithTokenizedPaymentV3PayloadToPaymentResolver<TParent>;
      userErrors?: CheckoutCompleteWithTokenizedPaymentV3PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToPaymentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCreatePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCreatePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCreatePayloadToCheckoutUserErrorsResolver<TParent>;
      queueToken?: CheckoutCreatePayloadToQueueTokenResolver<TParent>;
      userErrors?: CheckoutCreatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCreatePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCreatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCreatePayloadToQueueTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerAssociateV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCustomerAssociateV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCustomerAssociateV2PayloadToCheckoutUserErrorsResolver<TParent>;
      customer?: CheckoutCustomerAssociateV2PayloadToCustomerResolver<TParent>;
      userErrors?: CheckoutCustomerAssociateV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCustomerAssociateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerAssociateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerAssociateV2PayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerAssociateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerDisassociateV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutCustomerDisassociateV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutCustomerDisassociateV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutCustomerDisassociateV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutCustomerDisassociateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerDisassociateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutCustomerDisassociateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeApplyV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutDiscountCodeApplyV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutDiscountCodeApplyV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutDiscountCodeApplyV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutDiscountCodeApplyV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeApplyV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeApplyV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeRemovePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutDiscountCodeRemovePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutDiscountCodeRemovePayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutDiscountCodeRemovePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutDiscountCodeRemovePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeRemovePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutDiscountCodeRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutEmailUpdateV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutEmailUpdateV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutEmailUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutEmailUpdateV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutEmailUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutEmailUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutEmailUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardRemoveV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutGiftCardRemoveV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutGiftCardRemoveV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutGiftCardRemoveV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutGiftCardRemoveV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardRemoveV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardRemoveV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardsAppendPayloadTypeResolver<TParent = any> {
      checkout?: CheckoutGiftCardsAppendPayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutGiftCardsAppendPayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutGiftCardsAppendPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutGiftCardsAppendPayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardsAppendPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutGiftCardsAppendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemTypeResolver<TParent = any> {
      customAttributes?: CheckoutLineItemToCustomAttributesResolver<TParent>;
      discountAllocations?: CheckoutLineItemToDiscountAllocationsResolver<TParent>;
      id?: CheckoutLineItemToIdResolver<TParent>;
      quantity?: CheckoutLineItemToQuantityResolver<TParent>;
      title?: CheckoutLineItemToTitleResolver<TParent>;
      unitPrice?: CheckoutLineItemToUnitPriceResolver<TParent>;
      variant?: CheckoutLineItemToVariantResolver<TParent>;
    }
    
    export interface CheckoutLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToUnitPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemToVariantResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemConnectionTypeResolver<TParent = any> {
      edges?: CheckoutLineItemConnectionToEdgesResolver<TParent>;
      nodes?: CheckoutLineItemConnectionToNodesResolver<TParent>;
      pageInfo?: CheckoutLineItemConnectionToPageInfoResolver<TParent>;
    }
    
    export interface CheckoutLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemEdgeTypeResolver<TParent = any> {
      cursor?: CheckoutLineItemEdgeToCursorResolver<TParent>;
      node?: CheckoutLineItemEdgeToNodeResolver<TParent>;
    }
    
    export interface CheckoutLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsAddPayloadTypeResolver<TParent = any> {
      checkout?: CheckoutLineItemsAddPayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutLineItemsAddPayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutLineItemsAddPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutLineItemsAddPayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsAddPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsRemovePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutLineItemsRemovePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutLineItemsRemovePayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutLineItemsRemovePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutLineItemsRemovePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsRemovePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsReplacePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutLineItemsReplacePayloadToCheckoutResolver<TParent>;
      userErrors?: CheckoutLineItemsReplacePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutLineItemsReplacePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsReplacePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsUpdatePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutLineItemsUpdatePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutLineItemsUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutLineItemsUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutLineItemsUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutLineItemsUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingAddressUpdateV2PayloadTypeResolver<TParent = any> {
      checkout?: CheckoutShippingAddressUpdateV2PayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutShippingAddressUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutShippingAddressUpdateV2PayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutShippingAddressUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingAddressUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingAddressUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingLineUpdatePayloadTypeResolver<TParent = any> {
      checkout?: CheckoutShippingLineUpdatePayloadToCheckoutResolver<TParent>;
      checkoutUserErrors?: CheckoutShippingLineUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
      userErrors?: CheckoutShippingLineUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CheckoutShippingLineUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingLineUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutShippingLineUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutUserErrorTypeResolver<TParent = any> {
      code?: CheckoutUserErrorToCodeResolver<TParent>;
      field?: CheckoutUserErrorToFieldResolver<TParent>;
      message?: CheckoutUserErrorToMessageResolver<TParent>;
    }
    
    export interface CheckoutUserErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutUserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CheckoutUserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionTypeResolver<TParent = any> {
      description?: CollectionToDescriptionResolver<TParent>;
      descriptionHtml?: CollectionToDescriptionHtmlResolver<TParent>;
      handle?: CollectionToHandleResolver<TParent>;
      id?: CollectionToIdResolver<TParent>;
      image?: CollectionToImageResolver<TParent>;
      metafield?: CollectionToMetafieldResolver<TParent>;
      metafields?: CollectionToMetafieldsResolver<TParent>;
      onlineStoreUrl?: CollectionToOnlineStoreUrlResolver<TParent>;
      products?: CollectionToProductsResolver<TParent>;
      seo?: CollectionToSeoResolver<TParent>;
      title?: CollectionToTitleResolver<TParent>;
      trackingParameters?: CollectionToTrackingParametersResolver<TParent>;
      updatedAt?: CollectionToUpdatedAtResolver<TParent>;
    }
    
    export interface CollectionToDescriptionArgs {
      truncateAt?: number;
    }
    export interface CollectionToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CollectionToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToDescriptionHtmlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface CollectionToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CollectionToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface CollectionToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CollectionToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToOnlineStoreUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToProductsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ProductCollectionSortKeys;
      filters?: Array<ProductFilter>;
    }
    export interface CollectionToProductsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CollectionToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToSeoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToTrackingParametersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionConnectionTypeResolver<TParent = any> {
      edges?: CollectionConnectionToEdgesResolver<TParent>;
      nodes?: CollectionConnectionToNodesResolver<TParent>;
      pageInfo?: CollectionConnectionToPageInfoResolver<TParent>;
      totalCount?: CollectionConnectionToTotalCountResolver<TParent>;
    }
    
    export interface CollectionConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionConnectionToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionEdgeTypeResolver<TParent = any> {
      cursor?: CollectionEdgeToCursorResolver<TParent>;
      node?: CollectionEdgeToNodeResolver<TParent>;
    }
    
    export interface CollectionEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CollectionEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentTypeResolver<TParent = any> {
      author?: CommentToAuthorResolver<TParent>;
      content?: CommentToContentResolver<TParent>;
      contentHtml?: CommentToContentHtmlResolver<TParent>;
      id?: CommentToIdResolver<TParent>;
    }
    
    export interface CommentToAuthorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentToContentArgs {
      truncateAt?: number;
    }
    export interface CommentToContentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CommentToContentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentToContentHtmlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentAuthorTypeResolver<TParent = any> {
      email?: CommentAuthorToEmailResolver<TParent>;
      name?: CommentAuthorToNameResolver<TParent>;
    }
    
    export interface CommentAuthorToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentAuthorToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentConnectionTypeResolver<TParent = any> {
      edges?: CommentConnectionToEdgesResolver<TParent>;
      nodes?: CommentConnectionToNodesResolver<TParent>;
      pageInfo?: CommentConnectionToPageInfoResolver<TParent>;
    }
    
    export interface CommentConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentEdgeTypeResolver<TParent = any> {
      cursor?: CommentEdgeToCursorResolver<TParent>;
      node?: CommentEdgeToNodeResolver<TParent>;
    }
    
    export interface CommentEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CommentEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CompletePaymentChallengeTypeResolver<TParent = any> {
      redirectUrl?: CompletePaymentChallengeToRedirectUrlResolver<TParent>;
    }
    
    export interface CompletePaymentChallengeToRedirectUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CompletionErrorTypeResolver<TParent = any> {
      code?: CompletionErrorToCodeResolver<TParent>;
      message?: CompletionErrorToMessageResolver<TParent>;
    }
    
    export interface CompletionErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CompletionErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryTypeResolver<TParent = any> {
      availableLanguages?: CountryToAvailableLanguagesResolver<TParent>;
      currency?: CountryToCurrencyResolver<TParent>;
      isoCode?: CountryToIsoCodeResolver<TParent>;
      market?: CountryToMarketResolver<TParent>;
      name?: CountryToNameResolver<TParent>;
      unitSystem?: CountryToUnitSystemResolver<TParent>;
    }
    
    export interface CountryToAvailableLanguagesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryToCurrencyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryToIsoCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryToMarketResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CountryToUnitSystemResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardTypeResolver<TParent = any> {
      brand?: CreditCardToBrandResolver<TParent>;
      expiryMonth?: CreditCardToExpiryMonthResolver<TParent>;
      expiryYear?: CreditCardToExpiryYearResolver<TParent>;
      firstDigits?: CreditCardToFirstDigitsResolver<TParent>;
      firstName?: CreditCardToFirstNameResolver<TParent>;
      lastDigits?: CreditCardToLastDigitsResolver<TParent>;
      lastName?: CreditCardToLastNameResolver<TParent>;
      maskedNumber?: CreditCardToMaskedNumberResolver<TParent>;
    }
    
    export interface CreditCardToBrandResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToExpiryMonthResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToExpiryYearResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToFirstDigitsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToLastDigitsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CreditCardToMaskedNumberResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CurrencyTypeResolver<TParent = any> {
      isoCode?: CurrencyToIsoCodeResolver<TParent>;
      name?: CurrencyToNameResolver<TParent>;
      symbol?: CurrencyToSymbolResolver<TParent>;
    }
    
    export interface CurrencyToIsoCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CurrencyToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CurrencyToSymbolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerTypeResolver<TParent = any> {
      acceptsMarketing?: CustomerToAcceptsMarketingResolver<TParent>;
      addresses?: CustomerToAddressesResolver<TParent>;
      createdAt?: CustomerToCreatedAtResolver<TParent>;
      defaultAddress?: CustomerToDefaultAddressResolver<TParent>;
      displayName?: CustomerToDisplayNameResolver<TParent>;
      email?: CustomerToEmailResolver<TParent>;
      firstName?: CustomerToFirstNameResolver<TParent>;
      id?: CustomerToIdResolver<TParent>;
      lastIncompleteCheckout?: CustomerToLastIncompleteCheckoutResolver<TParent>;
      lastName?: CustomerToLastNameResolver<TParent>;
      metafield?: CustomerToMetafieldResolver<TParent>;
      metafields?: CustomerToMetafieldsResolver<TParent>;
      numberOfOrders?: CustomerToNumberOfOrdersResolver<TParent>;
      orders?: CustomerToOrdersResolver<TParent>;
      phone?: CustomerToPhoneResolver<TParent>;
      tags?: CustomerToTagsResolver<TParent>;
      updatedAt?: CustomerToUpdatedAtResolver<TParent>;
    }
    
    export interface CustomerToAcceptsMarketingResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToAddressesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface CustomerToAddressesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CustomerToAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToDefaultAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToDisplayNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToLastIncompleteCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface CustomerToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CustomerToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface CustomerToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CustomerToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToNumberOfOrdersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToOrdersArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: OrderSortKeys;
      query?: string;
    }
    export interface CustomerToOrdersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: CustomerToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToTagsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenTypeResolver<TParent = any> {
      accessToken?: CustomerAccessTokenToAccessTokenResolver<TParent>;
      expiresAt?: CustomerAccessTokenToExpiresAtResolver<TParent>;
    }
    
    export interface CustomerAccessTokenToAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenToExpiresAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenCreatePayloadTypeResolver<TParent = any> {
      customerAccessToken?: CustomerAccessTokenCreatePayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerAccessTokenCreatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerAccessTokenCreatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAccessTokenCreatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenCreateWithMultipassPayloadTypeResolver<TParent = any> {
      customerAccessToken?: CustomerAccessTokenCreateWithMultipassPayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerAccessTokenCreateWithMultipassPayloadToCustomerUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAccessTokenCreateWithMultipassPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenCreateWithMultipassPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenDeletePayloadTypeResolver<TParent = any> {
      deletedAccessToken?: CustomerAccessTokenDeletePayloadToDeletedAccessTokenResolver<TParent>;
      deletedCustomerAccessTokenId?: CustomerAccessTokenDeletePayloadToDeletedCustomerAccessTokenIdResolver<TParent>;
      userErrors?: CustomerAccessTokenDeletePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAccessTokenDeletePayloadToDeletedAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenDeletePayloadToDeletedCustomerAccessTokenIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenRenewPayloadTypeResolver<TParent = any> {
      customerAccessToken?: CustomerAccessTokenRenewPayloadToCustomerAccessTokenResolver<TParent>;
      userErrors?: CustomerAccessTokenRenewPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAccessTokenRenewPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAccessTokenRenewPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivateByUrlPayloadTypeResolver<TParent = any> {
      customer?: CustomerActivateByUrlPayloadToCustomerResolver<TParent>;
      customerAccessToken?: CustomerActivateByUrlPayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerActivateByUrlPayloadToCustomerUserErrorsResolver<TParent>;
    }
    
    export interface CustomerActivateByUrlPayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivateByUrlPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivateByUrlPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivatePayloadTypeResolver<TParent = any> {
      customer?: CustomerActivatePayloadToCustomerResolver<TParent>;
      customerAccessToken?: CustomerActivatePayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerActivatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerActivatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerActivatePayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressCreatePayloadTypeResolver<TParent = any> {
      customerAddress?: CustomerAddressCreatePayloadToCustomerAddressResolver<TParent>;
      customerUserErrors?: CustomerAddressCreatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerAddressCreatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAddressCreatePayloadToCustomerAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressDeletePayloadTypeResolver<TParent = any> {
      customerUserErrors?: CustomerAddressDeletePayloadToCustomerUserErrorsResolver<TParent>;
      deletedCustomerAddressId?: CustomerAddressDeletePayloadToDeletedCustomerAddressIdResolver<TParent>;
      userErrors?: CustomerAddressDeletePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAddressDeletePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressDeletePayloadToDeletedCustomerAddressIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressUpdatePayloadTypeResolver<TParent = any> {
      customerAddress?: CustomerAddressUpdatePayloadToCustomerAddressResolver<TParent>;
      customerUserErrors?: CustomerAddressUpdatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerAddressUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerAddressUpdatePayloadToCustomerAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerAddressUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerCreatePayloadTypeResolver<TParent = any> {
      customer?: CustomerCreatePayloadToCustomerResolver<TParent>;
      customerUserErrors?: CustomerCreatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerCreatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerCreatePayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerDefaultAddressUpdatePayloadTypeResolver<TParent = any> {
      customer?: CustomerDefaultAddressUpdatePayloadToCustomerResolver<TParent>;
      customerUserErrors?: CustomerDefaultAddressUpdatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerDefaultAddressUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerDefaultAddressUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerDefaultAddressUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerDefaultAddressUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerRecoverPayloadTypeResolver<TParent = any> {
      customerUserErrors?: CustomerRecoverPayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerRecoverPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerRecoverPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerRecoverPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetByUrlPayloadTypeResolver<TParent = any> {
      customer?: CustomerResetByUrlPayloadToCustomerResolver<TParent>;
      customerAccessToken?: CustomerResetByUrlPayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerResetByUrlPayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerResetByUrlPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerResetByUrlPayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetByUrlPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetByUrlPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetByUrlPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetPayloadTypeResolver<TParent = any> {
      customer?: CustomerResetPayloadToCustomerResolver<TParent>;
      customerAccessToken?: CustomerResetPayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerResetPayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerResetPayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerResetPayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerResetPayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUpdatePayloadTypeResolver<TParent = any> {
      customer?: CustomerUpdatePayloadToCustomerResolver<TParent>;
      customerAccessToken?: CustomerUpdatePayloadToCustomerAccessTokenResolver<TParent>;
      customerUserErrors?: CustomerUpdatePayloadToCustomerUserErrorsResolver<TParent>;
      userErrors?: CustomerUpdatePayloadToUserErrorsResolver<TParent>;
    }
    
    export interface CustomerUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUpdatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUserErrorTypeResolver<TParent = any> {
      code?: CustomerUserErrorToCodeResolver<TParent>;
      field?: CustomerUserErrorToFieldResolver<TParent>;
      message?: CustomerUserErrorToMessageResolver<TParent>;
    }
    
    export interface CustomerUserErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface CustomerUserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DeliveryAddressTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'MailingAddress' | Promise<'MailingAddress'>;
    }
    export interface DiscountAllocationTypeResolver<TParent = any> {
      allocatedAmount?: DiscountAllocationToAllocatedAmountResolver<TParent>;
      discountApplication?: DiscountAllocationToDiscountApplicationResolver<TParent>;
    }
    
    export interface DiscountAllocationToAllocatedAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountAllocationToDiscountApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountApplicationTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'AutomaticDiscountApplication' | 'DiscountCodeApplication' | 'ManualDiscountApplication' | 'ScriptDiscountApplication' | Promise<'AutomaticDiscountApplication' | 'DiscountCodeApplication' | 'ManualDiscountApplication' | 'ScriptDiscountApplication'>;
    }
    export interface DiscountApplicationConnectionTypeResolver<TParent = any> {
      edges?: DiscountApplicationConnectionToEdgesResolver<TParent>;
      nodes?: DiscountApplicationConnectionToNodesResolver<TParent>;
      pageInfo?: DiscountApplicationConnectionToPageInfoResolver<TParent>;
    }
    
    export interface DiscountApplicationConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountApplicationConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountApplicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountApplicationEdgeTypeResolver<TParent = any> {
      cursor?: DiscountApplicationEdgeToCursorResolver<TParent>;
      node?: DiscountApplicationEdgeToNodeResolver<TParent>;
    }
    
    export interface DiscountApplicationEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountApplicationEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationTypeResolver<TParent = any> {
      allocationMethod?: DiscountCodeApplicationToAllocationMethodResolver<TParent>;
      applicable?: DiscountCodeApplicationToApplicableResolver<TParent>;
      code?: DiscountCodeApplicationToCodeResolver<TParent>;
      targetSelection?: DiscountCodeApplicationToTargetSelectionResolver<TParent>;
      targetType?: DiscountCodeApplicationToTargetTypeResolver<TParent>;
      value?: DiscountCodeApplicationToValueResolver<TParent>;
    }
    
    export interface DiscountCodeApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationToApplicableResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationToTargetTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DiscountCodeApplicationToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DisplayableErrorTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'CartUserError' | 'CheckoutUserError' | 'CustomerUserError' | 'MetafieldDeleteUserError' | 'MetafieldsSetUserError' | 'UserError' | Promise<'CartUserError' | 'CheckoutUserError' | 'CustomerUserError' | 'MetafieldDeleteUserError' | 'MetafieldsSetUserError' | 'UserError'>;
    }
    export interface DomainTypeResolver<TParent = any> {
      host?: DomainToHostResolver<TParent>;
      sslEnabled?: DomainToSslEnabledResolver<TParent>;
      url?: DomainToUrlResolver<TParent>;
    }
    
    export interface DomainToHostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DomainToSslEnabledResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DomainToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoTypeResolver<TParent = any> {
      alt?: ExternalVideoToAltResolver<TParent>;
      embedUrl?: ExternalVideoToEmbedUrlResolver<TParent>;
      embeddedUrl?: ExternalVideoToEmbeddedUrlResolver<TParent>;
      host?: ExternalVideoToHostResolver<TParent>;
      id?: ExternalVideoToIdResolver<TParent>;
      mediaContentType?: ExternalVideoToMediaContentTypeResolver<TParent>;
      originUrl?: ExternalVideoToOriginUrlResolver<TParent>;
      presentation?: ExternalVideoToPresentationResolver<TParent>;
      previewImage?: ExternalVideoToPreviewImageResolver<TParent>;
    }
    
    export interface ExternalVideoToAltResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToEmbedUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToEmbeddedUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToHostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToMediaContentTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToOriginUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToPresentationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ExternalVideoToPreviewImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterTypeResolver<TParent = any> {
      id?: FilterToIdResolver<TParent>;
      label?: FilterToLabelResolver<TParent>;
      type?: FilterToTypeResolver<TParent>;
      values?: FilterToValuesResolver<TParent>;
    }
    
    export interface FilterToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterToLabelResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterToValuesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterValueTypeResolver<TParent = any> {
      count?: FilterValueToCountResolver<TParent>;
      id?: FilterValueToIdResolver<TParent>;
      input?: FilterValueToInputResolver<TParent>;
      label?: FilterValueToLabelResolver<TParent>;
    }
    
    export interface FilterValueToCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterValueToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterValueToInputResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FilterValueToLabelResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentTypeResolver<TParent = any> {
      fulfillmentLineItems?: FulfillmentToFulfillmentLineItemsResolver<TParent>;
      trackingCompany?: FulfillmentToTrackingCompanyResolver<TParent>;
      trackingInfo?: FulfillmentToTrackingInfoResolver<TParent>;
    }
    
    export interface FulfillmentToFulfillmentLineItemsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface FulfillmentToFulfillmentLineItemsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: FulfillmentToFulfillmentLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentToTrackingCompanyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentToTrackingInfoArgs {
      first?: number;
    }
    export interface FulfillmentToTrackingInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: FulfillmentToTrackingInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemTypeResolver<TParent = any> {
      lineItem?: FulfillmentLineItemToLineItemResolver<TParent>;
      quantity?: FulfillmentLineItemToQuantityResolver<TParent>;
    }
    
    export interface FulfillmentLineItemToLineItemResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemToQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemConnectionTypeResolver<TParent = any> {
      edges?: FulfillmentLineItemConnectionToEdgesResolver<TParent>;
      nodes?: FulfillmentLineItemConnectionToNodesResolver<TParent>;
      pageInfo?: FulfillmentLineItemConnectionToPageInfoResolver<TParent>;
    }
    
    export interface FulfillmentLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemEdgeTypeResolver<TParent = any> {
      cursor?: FulfillmentLineItemEdgeToCursorResolver<TParent>;
      node?: FulfillmentLineItemEdgeToNodeResolver<TParent>;
    }
    
    export interface FulfillmentLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentTrackingInfoTypeResolver<TParent = any> {
      number?: FulfillmentTrackingInfoToNumberResolver<TParent>;
      url?: FulfillmentTrackingInfoToUrlResolver<TParent>;
    }
    
    export interface FulfillmentTrackingInfoToNumberResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FulfillmentTrackingInfoToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileTypeResolver<TParent = any> {
      alt?: GenericFileToAltResolver<TParent>;
      id?: GenericFileToIdResolver<TParent>;
      mimeType?: GenericFileToMimeTypeResolver<TParent>;
      originalFileSize?: GenericFileToOriginalFileSizeResolver<TParent>;
      previewImage?: GenericFileToPreviewImageResolver<TParent>;
      url?: GenericFileToUrlResolver<TParent>;
    }
    
    export interface GenericFileToAltResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileToMimeTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileToOriginalFileSizeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileToPreviewImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GenericFileToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HasMetafieldsTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Blog' | 'Cart' | 'Collection' | 'Customer' | 'Location' | 'Market' | 'Order' | 'Page' | 'Product' | 'ProductVariant' | 'Shop' | Promise<'Article' | 'Blog' | 'Cart' | 'Collection' | 'Customer' | 'Location' | 'Market' | 'Order' | 'Page' | 'Product' | 'ProductVariant' | 'Shop'>;
    }
    export interface ImageTypeResolver<TParent = any> {
      altText?: ImageToAltTextResolver<TParent>;
      height?: ImageToHeightResolver<TParent>;
      id?: ImageToIdResolver<TParent>;
      originalSrc?: ImageToOriginalSrcResolver<TParent>;
      src?: ImageToSrcResolver<TParent>;
      transformedSrc?: ImageToTransformedSrcResolver<TParent>;
      url?: ImageToUrlResolver<TParent>;
      width?: ImageToWidthResolver<TParent>;
    }
    
    export interface ImageToAltTextResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToHeightResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToOriginalSrcResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToSrcResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToTransformedSrcArgs {
      maxWidth?: number;
      maxHeight?: number;
      crop?: CropRegion;
      scale?: number;
      preferredContentType?: ImageContentType;
    }
    export interface ImageToTransformedSrcResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ImageToTransformedSrcArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToUrlArgs {
      transform?: ImageTransformInput;
    }
    export interface ImageToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ImageToUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageToWidthResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageConnectionTypeResolver<TParent = any> {
      edges?: ImageConnectionToEdgesResolver<TParent>;
      nodes?: ImageConnectionToNodesResolver<TParent>;
      pageInfo?: ImageConnectionToPageInfoResolver<TParent>;
    }
    
    export interface ImageConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageEdgeTypeResolver<TParent = any> {
      cursor?: ImageEdgeToCursorResolver<TParent>;
      node?: ImageEdgeToNodeResolver<TParent>;
    }
    
    export interface ImageEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ImageEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LanguageTypeResolver<TParent = any> {
      endonymName?: LanguageToEndonymNameResolver<TParent>;
      isoCode?: LanguageToIsoCodeResolver<TParent>;
      name?: LanguageToNameResolver<TParent>;
    }
    
    export interface LanguageToEndonymNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LanguageToIsoCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LanguageToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocalizationTypeResolver<TParent = any> {
      availableCountries?: LocalizationToAvailableCountriesResolver<TParent>;
      availableLanguages?: LocalizationToAvailableLanguagesResolver<TParent>;
      country?: LocalizationToCountryResolver<TParent>;
      language?: LocalizationToLanguageResolver<TParent>;
      market?: LocalizationToMarketResolver<TParent>;
    }
    
    export interface LocalizationToAvailableCountriesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocalizationToAvailableLanguagesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocalizationToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocalizationToLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocalizationToMarketResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationTypeResolver<TParent = any> {
      address?: LocationToAddressResolver<TParent>;
      id?: LocationToIdResolver<TParent>;
      metafield?: LocationToMetafieldResolver<TParent>;
      metafields?: LocationToMetafieldsResolver<TParent>;
      name?: LocationToNameResolver<TParent>;
    }
    
    export interface LocationToAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface LocationToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: LocationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface LocationToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: LocationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressTypeResolver<TParent = any> {
      address1?: LocationAddressToAddress1Resolver<TParent>;
      address2?: LocationAddressToAddress2Resolver<TParent>;
      city?: LocationAddressToCityResolver<TParent>;
      country?: LocationAddressToCountryResolver<TParent>;
      countryCode?: LocationAddressToCountryCodeResolver<TParent>;
      formatted?: LocationAddressToFormattedResolver<TParent>;
      latitude?: LocationAddressToLatitudeResolver<TParent>;
      longitude?: LocationAddressToLongitudeResolver<TParent>;
      phone?: LocationAddressToPhoneResolver<TParent>;
      province?: LocationAddressToProvinceResolver<TParent>;
      provinceCode?: LocationAddressToProvinceCodeResolver<TParent>;
      zip?: LocationAddressToZipResolver<TParent>;
    }
    
    export interface LocationAddressToAddress1Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToAddress2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToCityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToCountryCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToFormattedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToLatitudeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToLongitudeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToProvinceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToProvinceCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationAddressToZipResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationConnectionTypeResolver<TParent = any> {
      edges?: LocationConnectionToEdgesResolver<TParent>;
      nodes?: LocationConnectionToNodesResolver<TParent>;
      pageInfo?: LocationConnectionToPageInfoResolver<TParent>;
    }
    
    export interface LocationConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationEdgeTypeResolver<TParent = any> {
      cursor?: LocationEdgeToCursorResolver<TParent>;
      node?: LocationEdgeToNodeResolver<TParent>;
    }
    
    export interface LocationEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LocationEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressTypeResolver<TParent = any> {
      address1?: MailingAddressToAddress1Resolver<TParent>;
      address2?: MailingAddressToAddress2Resolver<TParent>;
      city?: MailingAddressToCityResolver<TParent>;
      company?: MailingAddressToCompanyResolver<TParent>;
      country?: MailingAddressToCountryResolver<TParent>;
      countryCode?: MailingAddressToCountryCodeResolver<TParent>;
      countryCodeV2?: MailingAddressToCountryCodeV2Resolver<TParent>;
      firstName?: MailingAddressToFirstNameResolver<TParent>;
      formatted?: MailingAddressToFormattedResolver<TParent>;
      formattedArea?: MailingAddressToFormattedAreaResolver<TParent>;
      id?: MailingAddressToIdResolver<TParent>;
      lastName?: MailingAddressToLastNameResolver<TParent>;
      latitude?: MailingAddressToLatitudeResolver<TParent>;
      longitude?: MailingAddressToLongitudeResolver<TParent>;
      name?: MailingAddressToNameResolver<TParent>;
      phone?: MailingAddressToPhoneResolver<TParent>;
      province?: MailingAddressToProvinceResolver<TParent>;
      provinceCode?: MailingAddressToProvinceCodeResolver<TParent>;
      zip?: MailingAddressToZipResolver<TParent>;
    }
    
    export interface MailingAddressToAddress1Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToAddress2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToCityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToCompanyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToCountryCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToCountryCodeV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToFormattedArgs {
      withName?: boolean;
      withCompany?: boolean;
    }
    export interface MailingAddressToFormattedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MailingAddressToFormattedArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToFormattedAreaResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToLatitudeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToLongitudeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToProvinceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressToZipResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressConnectionTypeResolver<TParent = any> {
      edges?: MailingAddressConnectionToEdgesResolver<TParent>;
      nodes?: MailingAddressConnectionToNodesResolver<TParent>;
      pageInfo?: MailingAddressConnectionToPageInfoResolver<TParent>;
    }
    
    export interface MailingAddressConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressEdgeTypeResolver<TParent = any> {
      cursor?: MailingAddressEdgeToCursorResolver<TParent>;
      node?: MailingAddressEdgeToNodeResolver<TParent>;
    }
    
    export interface MailingAddressEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MailingAddressEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationTypeResolver<TParent = any> {
      allocationMethod?: ManualDiscountApplicationToAllocationMethodResolver<TParent>;
      description?: ManualDiscountApplicationToDescriptionResolver<TParent>;
      targetSelection?: ManualDiscountApplicationToTargetSelectionResolver<TParent>;
      targetType?: ManualDiscountApplicationToTargetTypeResolver<TParent>;
      title?: ManualDiscountApplicationToTitleResolver<TParent>;
      value?: ManualDiscountApplicationToValueResolver<TParent>;
    }
    
    export interface ManualDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ManualDiscountApplicationToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MarketTypeResolver<TParent = any> {
      handle?: MarketToHandleResolver<TParent>;
      id?: MarketToIdResolver<TParent>;
      metafield?: MarketToMetafieldResolver<TParent>;
      metafields?: MarketToMetafieldsResolver<TParent>;
    }
    
    export interface MarketToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MarketToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MarketToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface MarketToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MarketToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MarketToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface MarketToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MarketToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'ExternalVideo' | 'MediaImage' | 'Model3d' | 'Video' | Promise<'ExternalVideo' | 'MediaImage' | 'Model3d' | 'Video'>;
    }
    export interface MediaConnectionTypeResolver<TParent = any> {
      edges?: MediaConnectionToEdgesResolver<TParent>;
      nodes?: MediaConnectionToNodesResolver<TParent>;
      pageInfo?: MediaConnectionToPageInfoResolver<TParent>;
    }
    
    export interface MediaConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaEdgeTypeResolver<TParent = any> {
      cursor?: MediaEdgeToCursorResolver<TParent>;
      node?: MediaEdgeToNodeResolver<TParent>;
    }
    
    export interface MediaEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageTypeResolver<TParent = any> {
      alt?: MediaImageToAltResolver<TParent>;
      id?: MediaImageToIdResolver<TParent>;
      image?: MediaImageToImageResolver<TParent>;
      mediaContentType?: MediaImageToMediaContentTypeResolver<TParent>;
      presentation?: MediaImageToPresentationResolver<TParent>;
      previewImage?: MediaImageToPreviewImageResolver<TParent>;
    }
    
    export interface MediaImageToAltResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageToImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageToMediaContentTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageToPresentationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaImageToPreviewImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaPresentationTypeResolver<TParent = any> {
      asJson?: MediaPresentationToAsJsonResolver<TParent>;
      id?: MediaPresentationToIdResolver<TParent>;
    }
    
    export interface MediaPresentationToAsJsonArgs {
      format: MediaPresentationFormat;
    }
    export interface MediaPresentationToAsJsonResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MediaPresentationToAsJsonArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MediaPresentationToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuTypeResolver<TParent = any> {
      handle?: MenuToHandleResolver<TParent>;
      id?: MenuToIdResolver<TParent>;
      items?: MenuToItemsResolver<TParent>;
      itemsCount?: MenuToItemsCountResolver<TParent>;
      title?: MenuToTitleResolver<TParent>;
    }
    
    export interface MenuToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuToItemsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuToItemsCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemTypeResolver<TParent = any> {
      id?: MenuItemToIdResolver<TParent>;
      items?: MenuItemToItemsResolver<TParent>;
      resource?: MenuItemToResourceResolver<TParent>;
      resourceId?: MenuItemToResourceIdResolver<TParent>;
      tags?: MenuItemToTagsResolver<TParent>;
      title?: MenuItemToTitleResolver<TParent>;
      type?: MenuItemToTypeResolver<TParent>;
      url?: MenuItemToUrlResolver<TParent>;
    }
    
    export interface MenuItemToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToItemsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToResourceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToResourceIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToTagsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MenuItemResourceTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Blog' | 'Collection' | 'Page' | 'Product' | 'ShopPolicy' | Promise<'Article' | 'Blog' | 'Collection' | 'Page' | 'Product' | 'ShopPolicy'>;
    }
    export interface MerchandiseTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'ProductVariant' | Promise<'ProductVariant'>;
    }
    export interface MetafieldTypeResolver<TParent = any> {
      createdAt?: MetafieldToCreatedAtResolver<TParent>;
      description?: MetafieldToDescriptionResolver<TParent>;
      id?: MetafieldToIdResolver<TParent>;
      key?: MetafieldToKeyResolver<TParent>;
      namespace?: MetafieldToNamespaceResolver<TParent>;
      parentResource?: MetafieldToParentResourceResolver<TParent>;
      reference?: MetafieldToReferenceResolver<TParent>;
      references?: MetafieldToReferencesResolver<TParent>;
      type?: MetafieldToTypeResolver<TParent>;
      updatedAt?: MetafieldToUpdatedAtResolver<TParent>;
      value?: MetafieldToValueResolver<TParent>;
    }
    
    export interface MetafieldToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToKeyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToNamespaceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToParentResourceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToReferenceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToReferencesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
    }
    export interface MetafieldToReferencesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MetafieldToReferencesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldDeleteUserErrorTypeResolver<TParent = any> {
      code?: MetafieldDeleteUserErrorToCodeResolver<TParent>;
      field?: MetafieldDeleteUserErrorToFieldResolver<TParent>;
      message?: MetafieldDeleteUserErrorToMessageResolver<TParent>;
    }
    
    export interface MetafieldDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldParentResourceTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Blog' | 'Cart' | 'Collection' | 'Customer' | 'Location' | 'Market' | 'Order' | 'Page' | 'Product' | 'ProductVariant' | 'Shop' | Promise<'Article' | 'Blog' | 'Cart' | 'Collection' | 'Customer' | 'Location' | 'Market' | 'Order' | 'Page' | 'Product' | 'ProductVariant' | 'Shop'>;
    }
    export interface MetafieldReferenceTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Collection' | 'GenericFile' | 'MediaImage' | 'Metaobject' | 'Page' | 'Product' | 'ProductVariant' | 'Video' | Promise<'Collection' | 'GenericFile' | 'MediaImage' | 'Metaobject' | 'Page' | 'Product' | 'ProductVariant' | 'Video'>;
    }
    export interface MetafieldReferenceConnectionTypeResolver<TParent = any> {
      edges?: MetafieldReferenceConnectionToEdgesResolver<TParent>;
      nodes?: MetafieldReferenceConnectionToNodesResolver<TParent>;
      pageInfo?: MetafieldReferenceConnectionToPageInfoResolver<TParent>;
    }
    
    export interface MetafieldReferenceConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldReferenceConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldReferenceConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldReferenceEdgeTypeResolver<TParent = any> {
      cursor?: MetafieldReferenceEdgeToCursorResolver<TParent>;
      node?: MetafieldReferenceEdgeToNodeResolver<TParent>;
    }
    
    export interface MetafieldReferenceEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldReferenceEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldsSetUserErrorTypeResolver<TParent = any> {
      code?: MetafieldsSetUserErrorToCodeResolver<TParent>;
      elementIndex?: MetafieldsSetUserErrorToElementIndexResolver<TParent>;
      field?: MetafieldsSetUserErrorToFieldResolver<TParent>;
      message?: MetafieldsSetUserErrorToMessageResolver<TParent>;
    }
    
    export interface MetafieldsSetUserErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldsSetUserErrorToElementIndexResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldsSetUserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetafieldsSetUserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectTypeResolver<TParent = any> {
      field?: MetaobjectToFieldResolver<TParent>;
      fields?: MetaobjectToFieldsResolver<TParent>;
      handle?: MetaobjectToHandleResolver<TParent>;
      id?: MetaobjectToIdResolver<TParent>;
      type?: MetaobjectToTypeResolver<TParent>;
      updatedAt?: MetaobjectToUpdatedAtResolver<TParent>;
    }
    
    export interface MetaobjectToFieldArgs {
      key: string;
    }
    export interface MetaobjectToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MetaobjectToFieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectToFieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectConnectionTypeResolver<TParent = any> {
      edges?: MetaobjectConnectionToEdgesResolver<TParent>;
      nodes?: MetaobjectConnectionToNodesResolver<TParent>;
      pageInfo?: MetaobjectConnectionToPageInfoResolver<TParent>;
    }
    
    export interface MetaobjectConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectEdgeTypeResolver<TParent = any> {
      cursor?: MetaobjectEdgeToCursorResolver<TParent>;
      node?: MetaobjectEdgeToNodeResolver<TParent>;
    }
    
    export interface MetaobjectEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectFieldTypeResolver<TParent = any> {
      key?: MetaobjectFieldToKeyResolver<TParent>;
      reference?: MetaobjectFieldToReferenceResolver<TParent>;
      references?: MetaobjectFieldToReferencesResolver<TParent>;
      type?: MetaobjectFieldToTypeResolver<TParent>;
      value?: MetaobjectFieldToValueResolver<TParent>;
    }
    
    export interface MetaobjectFieldToKeyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectFieldToReferenceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectFieldToReferencesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
    }
    export interface MetaobjectFieldToReferencesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MetaobjectFieldToReferencesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectFieldToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MetaobjectFieldToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dTypeResolver<TParent = any> {
      alt?: Model3dToAltResolver<TParent>;
      id?: Model3dToIdResolver<TParent>;
      mediaContentType?: Model3dToMediaContentTypeResolver<TParent>;
      presentation?: Model3dToPresentationResolver<TParent>;
      previewImage?: Model3dToPreviewImageResolver<TParent>;
      sources?: Model3dToSourcesResolver<TParent>;
    }
    
    export interface Model3dToAltResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dToMediaContentTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dToPresentationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dToPreviewImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dToSourcesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dSourceTypeResolver<TParent = any> {
      filesize?: Model3dSourceToFilesizeResolver<TParent>;
      format?: Model3dSourceToFormatResolver<TParent>;
      mimeType?: Model3dSourceToMimeTypeResolver<TParent>;
      url?: Model3dSourceToUrlResolver<TParent>;
    }
    
    export interface Model3dSourceToFilesizeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dSourceToFormatResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dSourceToMimeTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface Model3dSourceToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoneyV2TypeResolver<TParent = any> {
      amount?: MoneyV2ToAmountResolver<TParent>;
      currencyCode?: MoneyV2ToCurrencyCodeResolver<TParent>;
    }
    
    export interface MoneyV2ToAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoneyV2ToCurrencyCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      cartAttributesUpdate?: MutationToCartAttributesUpdateResolver<TParent>;
      cartBuyerIdentityUpdate?: MutationToCartBuyerIdentityUpdateResolver<TParent>;
      cartCreate?: MutationToCartCreateResolver<TParent>;
      cartDiscountCodesUpdate?: MutationToCartDiscountCodesUpdateResolver<TParent>;
      cartLinesAdd?: MutationToCartLinesAddResolver<TParent>;
      cartLinesRemove?: MutationToCartLinesRemoveResolver<TParent>;
      cartLinesUpdate?: MutationToCartLinesUpdateResolver<TParent>;
      cartMetafieldDelete?: MutationToCartMetafieldDeleteResolver<TParent>;
      cartMetafieldsSet?: MutationToCartMetafieldsSetResolver<TParent>;
      cartNoteUpdate?: MutationToCartNoteUpdateResolver<TParent>;
      cartPaymentUpdate?: MutationToCartPaymentUpdateResolver<TParent>;
      cartSelectedDeliveryOptionsUpdate?: MutationToCartSelectedDeliveryOptionsUpdateResolver<TParent>;
      cartSubmitForCompletion?: MutationToCartSubmitForCompletionResolver<TParent>;
      checkoutAttributesUpdateV2?: MutationToCheckoutAttributesUpdateV2Resolver<TParent>;
      checkoutCompleteFree?: MutationToCheckoutCompleteFreeResolver<TParent>;
      checkoutCompleteWithCreditCardV2?: MutationToCheckoutCompleteWithCreditCardV2Resolver<TParent>;
      checkoutCompleteWithTokenizedPaymentV3?: MutationToCheckoutCompleteWithTokenizedPaymentV3Resolver<TParent>;
      checkoutCreate?: MutationToCheckoutCreateResolver<TParent>;
      checkoutCustomerAssociateV2?: MutationToCheckoutCustomerAssociateV2Resolver<TParent>;
      checkoutCustomerDisassociateV2?: MutationToCheckoutCustomerDisassociateV2Resolver<TParent>;
      checkoutDiscountCodeApplyV2?: MutationToCheckoutDiscountCodeApplyV2Resolver<TParent>;
      checkoutDiscountCodeRemove?: MutationToCheckoutDiscountCodeRemoveResolver<TParent>;
      checkoutEmailUpdateV2?: MutationToCheckoutEmailUpdateV2Resolver<TParent>;
      checkoutGiftCardRemoveV2?: MutationToCheckoutGiftCardRemoveV2Resolver<TParent>;
      checkoutGiftCardsAppend?: MutationToCheckoutGiftCardsAppendResolver<TParent>;
      checkoutLineItemsAdd?: MutationToCheckoutLineItemsAddResolver<TParent>;
      checkoutLineItemsRemove?: MutationToCheckoutLineItemsRemoveResolver<TParent>;
      checkoutLineItemsReplace?: MutationToCheckoutLineItemsReplaceResolver<TParent>;
      checkoutLineItemsUpdate?: MutationToCheckoutLineItemsUpdateResolver<TParent>;
      checkoutShippingAddressUpdateV2?: MutationToCheckoutShippingAddressUpdateV2Resolver<TParent>;
      checkoutShippingLineUpdate?: MutationToCheckoutShippingLineUpdateResolver<TParent>;
      customerAccessTokenCreate?: MutationToCustomerAccessTokenCreateResolver<TParent>;
      customerAccessTokenCreateWithMultipass?: MutationToCustomerAccessTokenCreateWithMultipassResolver<TParent>;
      customerAccessTokenDelete?: MutationToCustomerAccessTokenDeleteResolver<TParent>;
      customerAccessTokenRenew?: MutationToCustomerAccessTokenRenewResolver<TParent>;
      customerActivate?: MutationToCustomerActivateResolver<TParent>;
      customerActivateByUrl?: MutationToCustomerActivateByUrlResolver<TParent>;
      customerAddressCreate?: MutationToCustomerAddressCreateResolver<TParent>;
      customerAddressDelete?: MutationToCustomerAddressDeleteResolver<TParent>;
      customerAddressUpdate?: MutationToCustomerAddressUpdateResolver<TParent>;
      customerCreate?: MutationToCustomerCreateResolver<TParent>;
      customerDefaultAddressUpdate?: MutationToCustomerDefaultAddressUpdateResolver<TParent>;
      customerRecover?: MutationToCustomerRecoverResolver<TParent>;
      customerReset?: MutationToCustomerResetResolver<TParent>;
      customerResetByUrl?: MutationToCustomerResetByUrlResolver<TParent>;
      customerUpdate?: MutationToCustomerUpdateResolver<TParent>;
    }
    
    export interface MutationToCartAttributesUpdateArgs {
      attributes: Array<AttributeInput>;
      cartId: string;
    }
    export interface MutationToCartAttributesUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartAttributesUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartBuyerIdentityUpdateArgs {
      cartId: string;
      buyerIdentity: CartBuyerIdentityInput;
    }
    export interface MutationToCartBuyerIdentityUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartBuyerIdentityUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartCreateArgs {
      input?: CartInput;
    }
    export interface MutationToCartCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartDiscountCodesUpdateArgs {
      cartId: string;
      discountCodes?: Array<string>;
    }
    export interface MutationToCartDiscountCodesUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartDiscountCodesUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartLinesAddArgs {
      lines: Array<CartLineInput>;
      cartId: string;
    }
    export interface MutationToCartLinesAddResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartLinesAddArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartLinesRemoveArgs {
      cartId: string;
      lineIds: Array<string>;
    }
    export interface MutationToCartLinesRemoveResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartLinesRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartLinesUpdateArgs {
      cartId: string;
      lines: Array<CartLineUpdateInput>;
    }
    export interface MutationToCartLinesUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartLinesUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartMetafieldDeleteArgs {
      input: CartMetafieldDeleteInput;
    }
    export interface MutationToCartMetafieldDeleteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartMetafieldDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartMetafieldsSetArgs {
      metafields: Array<CartMetafieldsSetInput>;
    }
    export interface MutationToCartMetafieldsSetResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartMetafieldsSetArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartNoteUpdateArgs {
      cartId: string;
      note?: string;
    }
    export interface MutationToCartNoteUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartNoteUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartPaymentUpdateArgs {
      cartId: string;
      payment: CartPaymentInput;
    }
    export interface MutationToCartPaymentUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartPaymentUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartSelectedDeliveryOptionsUpdateArgs {
      cartId: string;
      selectedDeliveryOptions: Array<CartSelectedDeliveryOptionInput>;
    }
    export interface MutationToCartSelectedDeliveryOptionsUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartSelectedDeliveryOptionsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCartSubmitForCompletionArgs {
      cartId: string;
      attemptToken: string;
    }
    export interface MutationToCartSubmitForCompletionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCartSubmitForCompletionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutAttributesUpdateV2Args {
      checkoutId: string;
      input: CheckoutAttributesUpdateV2Input;
    }
    export interface MutationToCheckoutAttributesUpdateV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutAttributesUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCompleteFreeArgs {
      checkoutId: string;
    }
    export interface MutationToCheckoutCompleteFreeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCompleteFreeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCompleteWithCreditCardV2Args {
      checkoutId: string;
      payment: CreditCardPaymentInputV2;
    }
    export interface MutationToCheckoutCompleteWithCreditCardV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCompleteWithCreditCardV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCompleteWithTokenizedPaymentV3Args {
      checkoutId: string;
      payment: TokenizedPaymentInputV3;
    }
    export interface MutationToCheckoutCompleteWithTokenizedPaymentV3Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCompleteWithTokenizedPaymentV3Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCreateArgs {
      input: CheckoutCreateInput;
      queueToken?: string;
    }
    export interface MutationToCheckoutCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCustomerAssociateV2Args {
      checkoutId: string;
      customerAccessToken: string;
    }
    export interface MutationToCheckoutCustomerAssociateV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCustomerAssociateV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutCustomerDisassociateV2Args {
      checkoutId: string;
    }
    export interface MutationToCheckoutCustomerDisassociateV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutCustomerDisassociateV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutDiscountCodeApplyV2Args {
      discountCode: string;
      checkoutId: string;
    }
    export interface MutationToCheckoutDiscountCodeApplyV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutDiscountCodeApplyV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutDiscountCodeRemoveArgs {
      checkoutId: string;
    }
    export interface MutationToCheckoutDiscountCodeRemoveResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutDiscountCodeRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutEmailUpdateV2Args {
      checkoutId: string;
      email: string;
    }
    export interface MutationToCheckoutEmailUpdateV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutEmailUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutGiftCardRemoveV2Args {
      appliedGiftCardId: string;
      checkoutId: string;
    }
    export interface MutationToCheckoutGiftCardRemoveV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutGiftCardRemoveV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutGiftCardsAppendArgs {
      giftCardCodes: Array<string>;
      checkoutId: string;
    }
    export interface MutationToCheckoutGiftCardsAppendResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutGiftCardsAppendArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutLineItemsAddArgs {
      lineItems: Array<CheckoutLineItemInput>;
      checkoutId: string;
    }
    export interface MutationToCheckoutLineItemsAddResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutLineItemsAddArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutLineItemsRemoveArgs {
      checkoutId: string;
      lineItemIds: Array<string>;
    }
    export interface MutationToCheckoutLineItemsRemoveResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutLineItemsRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutLineItemsReplaceArgs {
      lineItems: Array<CheckoutLineItemInput>;
      checkoutId: string;
    }
    export interface MutationToCheckoutLineItemsReplaceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutLineItemsReplaceArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutLineItemsUpdateArgs {
      checkoutId: string;
      lineItems: Array<CheckoutLineItemUpdateInput>;
    }
    export interface MutationToCheckoutLineItemsUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutLineItemsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutShippingAddressUpdateV2Args {
      shippingAddress: MailingAddressInput;
      checkoutId: string;
    }
    export interface MutationToCheckoutShippingAddressUpdateV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutShippingAddressUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCheckoutShippingLineUpdateArgs {
      checkoutId: string;
      shippingRateHandle: string;
    }
    export interface MutationToCheckoutShippingLineUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCheckoutShippingLineUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAccessTokenCreateArgs {
      input: CustomerAccessTokenCreateInput;
    }
    export interface MutationToCustomerAccessTokenCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAccessTokenCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAccessTokenCreateWithMultipassArgs {
      multipassToken: string;
    }
    export interface MutationToCustomerAccessTokenCreateWithMultipassResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAccessTokenCreateWithMultipassArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAccessTokenDeleteArgs {
      customerAccessToken: string;
    }
    export interface MutationToCustomerAccessTokenDeleteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAccessTokenDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAccessTokenRenewArgs {
      customerAccessToken: string;
    }
    export interface MutationToCustomerAccessTokenRenewResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAccessTokenRenewArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerActivateArgs {
      id: string;
      input: CustomerActivateInput;
    }
    export interface MutationToCustomerActivateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerActivateByUrlArgs {
      activationUrl: URL;
      password: string;
    }
    export interface MutationToCustomerActivateByUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerActivateByUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAddressCreateArgs {
      customerAccessToken: string;
      address: MailingAddressInput;
    }
    export interface MutationToCustomerAddressCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAddressCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAddressDeleteArgs {
      id: string;
      customerAccessToken: string;
    }
    export interface MutationToCustomerAddressDeleteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAddressDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerAddressUpdateArgs {
      customerAccessToken: string;
      id: string;
      address: MailingAddressInput;
    }
    export interface MutationToCustomerAddressUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerAddressUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerCreateArgs {
      input: CustomerCreateInput;
    }
    export interface MutationToCustomerCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerDefaultAddressUpdateArgs {
      customerAccessToken: string;
      addressId: string;
    }
    export interface MutationToCustomerDefaultAddressUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerDefaultAddressUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerRecoverArgs {
      email: string;
    }
    export interface MutationToCustomerRecoverResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerRecoverArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerResetArgs {
      id: string;
      input: CustomerResetInput;
    }
    export interface MutationToCustomerResetResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerResetArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerResetByUrlArgs {
      resetUrl: URL;
      password: string;
    }
    export interface MutationToCustomerResetByUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerResetByUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCustomerUpdateArgs {
      customerAccessToken: string;
      customer: CustomerUpdateInput;
    }
    export interface MutationToCustomerUpdateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCustomerUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface NodeTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'AppliedGiftCard' | 'Article' | 'Blog' | 'Cart' | 'CartLine' | 'Checkout' | 'CheckoutLineItem' | 'Collection' | 'Comment' | 'ExternalVideo' | 'GenericFile' | 'Location' | 'MailingAddress' | 'Market' | 'MediaImage' | 'MediaPresentation' | 'Menu' | 'MenuItem' | 'Metafield' | 'Metaobject' | 'Model3d' | 'Order' | 'Page' | 'Payment' | 'Product' | 'ProductOption' | 'ProductVariant' | 'Shop' | 'ShopPolicy' | 'UrlRedirect' | 'Video' | Promise<'AppliedGiftCard' | 'Article' | 'Blog' | 'Cart' | 'CartLine' | 'Checkout' | 'CheckoutLineItem' | 'Collection' | 'Comment' | 'ExternalVideo' | 'GenericFile' | 'Location' | 'MailingAddress' | 'Market' | 'MediaImage' | 'MediaPresentation' | 'Menu' | 'MenuItem' | 'Metafield' | 'Metaobject' | 'Model3d' | 'Order' | 'Page' | 'Payment' | 'Product' | 'ProductOption' | 'ProductVariant' | 'Shop' | 'ShopPolicy' | 'UrlRedirect' | 'Video'>;
    }
    export interface OnlineStorePublishableTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Blog' | 'Collection' | 'Page' | 'Product' | Promise<'Article' | 'Blog' | 'Collection' | 'Page' | 'Product'>;
    }
    export interface OrderTypeResolver<TParent = any> {
      billingAddress?: OrderToBillingAddressResolver<TParent>;
      cancelReason?: OrderToCancelReasonResolver<TParent>;
      canceledAt?: OrderToCanceledAtResolver<TParent>;
      currencyCode?: OrderToCurrencyCodeResolver<TParent>;
      currentSubtotalPrice?: OrderToCurrentSubtotalPriceResolver<TParent>;
      currentTotalDuties?: OrderToCurrentTotalDutiesResolver<TParent>;
      currentTotalPrice?: OrderToCurrentTotalPriceResolver<TParent>;
      currentTotalTax?: OrderToCurrentTotalTaxResolver<TParent>;
      customAttributes?: OrderToCustomAttributesResolver<TParent>;
      customerLocale?: OrderToCustomerLocaleResolver<TParent>;
      customerUrl?: OrderToCustomerUrlResolver<TParent>;
      discountApplications?: OrderToDiscountApplicationsResolver<TParent>;
      edited?: OrderToEditedResolver<TParent>;
      email?: OrderToEmailResolver<TParent>;
      financialStatus?: OrderToFinancialStatusResolver<TParent>;
      fulfillmentStatus?: OrderToFulfillmentStatusResolver<TParent>;
      id?: OrderToIdResolver<TParent>;
      lineItems?: OrderToLineItemsResolver<TParent>;
      metafield?: OrderToMetafieldResolver<TParent>;
      metafields?: OrderToMetafieldsResolver<TParent>;
      name?: OrderToNameResolver<TParent>;
      orderNumber?: OrderToOrderNumberResolver<TParent>;
      originalTotalDuties?: OrderToOriginalTotalDutiesResolver<TParent>;
      originalTotalPrice?: OrderToOriginalTotalPriceResolver<TParent>;
      phone?: OrderToPhoneResolver<TParent>;
      processedAt?: OrderToProcessedAtResolver<TParent>;
      shippingAddress?: OrderToShippingAddressResolver<TParent>;
      shippingDiscountAllocations?: OrderToShippingDiscountAllocationsResolver<TParent>;
      statusUrl?: OrderToStatusUrlResolver<TParent>;
      subtotalPrice?: OrderToSubtotalPriceResolver<TParent>;
      subtotalPriceV2?: OrderToSubtotalPriceV2Resolver<TParent>;
      successfulFulfillments?: OrderToSuccessfulFulfillmentsResolver<TParent>;
      totalPrice?: OrderToTotalPriceResolver<TParent>;
      totalPriceV2?: OrderToTotalPriceV2Resolver<TParent>;
      totalRefunded?: OrderToTotalRefundedResolver<TParent>;
      totalRefundedV2?: OrderToTotalRefundedV2Resolver<TParent>;
      totalShippingPrice?: OrderToTotalShippingPriceResolver<TParent>;
      totalShippingPriceV2?: OrderToTotalShippingPriceV2Resolver<TParent>;
      totalTax?: OrderToTotalTaxResolver<TParent>;
      totalTaxV2?: OrderToTotalTaxV2Resolver<TParent>;
    }
    
    export interface OrderToBillingAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCancelReasonResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCanceledAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCurrencyCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCurrentSubtotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCurrentTotalDutiesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCurrentTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCurrentTotalTaxResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCustomAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCustomerLocaleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToCustomerUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToDiscountApplicationsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface OrderToDiscountApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: OrderToDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToEditedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToFinancialStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToFulfillmentStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToLineItemsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface OrderToLineItemsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: OrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface OrderToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: OrderToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface OrderToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: OrderToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToOrderNumberResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToOriginalTotalDutiesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToOriginalTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToProcessedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToShippingAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToShippingDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToStatusUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToSubtotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToSubtotalPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToSuccessfulFulfillmentsArgs {
      first?: number;
    }
    export interface OrderToSuccessfulFulfillmentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: OrderToSuccessfulFulfillmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalRefundedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalRefundedV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalShippingPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalShippingPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalTaxResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderToTotalTaxV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderConnectionTypeResolver<TParent = any> {
      edges?: OrderConnectionToEdgesResolver<TParent>;
      nodes?: OrderConnectionToNodesResolver<TParent>;
      pageInfo?: OrderConnectionToPageInfoResolver<TParent>;
      totalCount?: OrderConnectionToTotalCountResolver<TParent>;
    }
    
    export interface OrderConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderConnectionToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderEdgeTypeResolver<TParent = any> {
      cursor?: OrderEdgeToCursorResolver<TParent>;
      node?: OrderEdgeToNodeResolver<TParent>;
    }
    
    export interface OrderEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemTypeResolver<TParent = any> {
      currentQuantity?: OrderLineItemToCurrentQuantityResolver<TParent>;
      customAttributes?: OrderLineItemToCustomAttributesResolver<TParent>;
      discountAllocations?: OrderLineItemToDiscountAllocationsResolver<TParent>;
      discountedTotalPrice?: OrderLineItemToDiscountedTotalPriceResolver<TParent>;
      originalTotalPrice?: OrderLineItemToOriginalTotalPriceResolver<TParent>;
      quantity?: OrderLineItemToQuantityResolver<TParent>;
      title?: OrderLineItemToTitleResolver<TParent>;
      variant?: OrderLineItemToVariantResolver<TParent>;
    }
    
    export interface OrderLineItemToCurrentQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToDiscountedTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToOriginalTotalPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToQuantityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemToVariantResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemConnectionTypeResolver<TParent = any> {
      edges?: OrderLineItemConnectionToEdgesResolver<TParent>;
      nodes?: OrderLineItemConnectionToNodesResolver<TParent>;
      pageInfo?: OrderLineItemConnectionToPageInfoResolver<TParent>;
    }
    
    export interface OrderLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemEdgeTypeResolver<TParent = any> {
      cursor?: OrderLineItemEdgeToCursorResolver<TParent>;
      node?: OrderLineItemEdgeToNodeResolver<TParent>;
    }
    
    export interface OrderLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface OrderLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageTypeResolver<TParent = any> {
      body?: PageToBodyResolver<TParent>;
      bodySummary?: PageToBodySummaryResolver<TParent>;
      createdAt?: PageToCreatedAtResolver<TParent>;
      handle?: PageToHandleResolver<TParent>;
      id?: PageToIdResolver<TParent>;
      metafield?: PageToMetafieldResolver<TParent>;
      metafields?: PageToMetafieldsResolver<TParent>;
      onlineStoreUrl?: PageToOnlineStoreUrlResolver<TParent>;
      seo?: PageToSeoResolver<TParent>;
      title?: PageToTitleResolver<TParent>;
      trackingParameters?: PageToTrackingParametersResolver<TParent>;
      updatedAt?: PageToUpdatedAtResolver<TParent>;
    }
    
    export interface PageToBodyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToBodySummaryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface PageToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: PageToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface PageToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: PageToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToOnlineStoreUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToSeoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToTrackingParametersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageConnectionTypeResolver<TParent = any> {
      edges?: PageConnectionToEdgesResolver<TParent>;
      nodes?: PageConnectionToNodesResolver<TParent>;
      pageInfo?: PageConnectionToPageInfoResolver<TParent>;
    }
    
    export interface PageConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageEdgeTypeResolver<TParent = any> {
      cursor?: PageEdgeToCursorResolver<TParent>;
      node?: PageEdgeToNodeResolver<TParent>;
    }
    
    export interface PageEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageInfoTypeResolver<TParent = any> {
      endCursor?: PageInfoToEndCursorResolver<TParent>;
      hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
      hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
      startCursor?: PageInfoToStartCursorResolver<TParent>;
    }
    
    export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentTypeResolver<TParent = any> {
      amount?: PaymentToAmountResolver<TParent>;
      amountV2?: PaymentToAmountV2Resolver<TParent>;
      billingAddress?: PaymentToBillingAddressResolver<TParent>;
      checkout?: PaymentToCheckoutResolver<TParent>;
      creditCard?: PaymentToCreditCardResolver<TParent>;
      errorMessage?: PaymentToErrorMessageResolver<TParent>;
      id?: PaymentToIdResolver<TParent>;
      idempotencyKey?: PaymentToIdempotencyKeyResolver<TParent>;
      nextActionUrl?: PaymentToNextActionUrlResolver<TParent>;
      ready?: PaymentToReadyResolver<TParent>;
      test?: PaymentToTestResolver<TParent>;
      transaction?: PaymentToTransactionResolver<TParent>;
    }
    
    export interface PaymentToAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToAmountV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToBillingAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToCheckoutResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToCreditCardResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToErrorMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToIdempotencyKeyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToNextActionUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToReadyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToTestResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentToTransactionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsTypeResolver<TParent = any> {
      acceptedCardBrands?: PaymentSettingsToAcceptedCardBrandsResolver<TParent>;
      cardVaultUrl?: PaymentSettingsToCardVaultUrlResolver<TParent>;
      countryCode?: PaymentSettingsToCountryCodeResolver<TParent>;
      currencyCode?: PaymentSettingsToCurrencyCodeResolver<TParent>;
      enabledPresentmentCurrencies?: PaymentSettingsToEnabledPresentmentCurrenciesResolver<TParent>;
      shopifyPaymentsAccountId?: PaymentSettingsToShopifyPaymentsAccountIdResolver<TParent>;
      supportedDigitalWallets?: PaymentSettingsToSupportedDigitalWalletsResolver<TParent>;
    }
    
    export interface PaymentSettingsToAcceptedCardBrandsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToCardVaultUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToCountryCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToCurrencyCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToEnabledPresentmentCurrenciesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToShopifyPaymentsAccountIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PaymentSettingsToSupportedDigitalWalletsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PredictiveSearchResultTypeResolver<TParent = any> {
      articles?: PredictiveSearchResultToArticlesResolver<TParent>;
      collections?: PredictiveSearchResultToCollectionsResolver<TParent>;
      pages?: PredictiveSearchResultToPagesResolver<TParent>;
      products?: PredictiveSearchResultToProductsResolver<TParent>;
      queries?: PredictiveSearchResultToQueriesResolver<TParent>;
    }
    
    export interface PredictiveSearchResultToArticlesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PredictiveSearchResultToCollectionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PredictiveSearchResultToPagesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PredictiveSearchResultToProductsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PredictiveSearchResultToQueriesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PricingPercentageValueTypeResolver<TParent = any> {
      percentage?: PricingPercentageValueToPercentageResolver<TParent>;
    }
    
    export interface PricingPercentageValueToPercentageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PricingValueTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'PricingPercentageValue' | Promise<'MoneyV2' | 'PricingPercentageValue'>;
    }
    export interface ProductTypeResolver<TParent = any> {
      availableForSale?: ProductToAvailableForSaleResolver<TParent>;
      collections?: ProductToCollectionsResolver<TParent>;
      compareAtPriceRange?: ProductToCompareAtPriceRangeResolver<TParent>;
      createdAt?: ProductToCreatedAtResolver<TParent>;
      description?: ProductToDescriptionResolver<TParent>;
      descriptionHtml?: ProductToDescriptionHtmlResolver<TParent>;
      featuredImage?: ProductToFeaturedImageResolver<TParent>;
      handle?: ProductToHandleResolver<TParent>;
      id?: ProductToIdResolver<TParent>;
      images?: ProductToImagesResolver<TParent>;
      isGiftCard?: ProductToIsGiftCardResolver<TParent>;
      media?: ProductToMediaResolver<TParent>;
      metafield?: ProductToMetafieldResolver<TParent>;
      metafields?: ProductToMetafieldsResolver<TParent>;
      onlineStoreUrl?: ProductToOnlineStoreUrlResolver<TParent>;
      options?: ProductToOptionsResolver<TParent>;
      priceRange?: ProductToPriceRangeResolver<TParent>;
      productType?: ProductToProductTypeResolver<TParent>;
      publishedAt?: ProductToPublishedAtResolver<TParent>;
      requiresSellingPlan?: ProductToRequiresSellingPlanResolver<TParent>;
      sellingPlanGroups?: ProductToSellingPlanGroupsResolver<TParent>;
      seo?: ProductToSeoResolver<TParent>;
      tags?: ProductToTagsResolver<TParent>;
      title?: ProductToTitleResolver<TParent>;
      totalInventory?: ProductToTotalInventoryResolver<TParent>;
      trackingParameters?: ProductToTrackingParametersResolver<TParent>;
      updatedAt?: ProductToUpdatedAtResolver<TParent>;
      variantBySelectedOptions?: ProductToVariantBySelectedOptionsResolver<TParent>;
      variants?: ProductToVariantsResolver<TParent>;
      vendor?: ProductToVendorResolver<TParent>;
    }
    
    export interface ProductToAvailableForSaleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToCollectionsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface ProductToCollectionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToCompareAtPriceRangeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToDescriptionArgs {
      truncateAt?: number;
    }
    export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToDescriptionHtmlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToFeaturedImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToImagesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ProductImageSortKeys;
    }
    export interface ProductToImagesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToIsGiftCardResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToMediaArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ProductMediaSortKeys;
    }
    export interface ProductToMediaResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface ProductToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface ProductToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToOnlineStoreUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToOptionsArgs {
      first?: number;
    }
    export interface ProductToOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToPriceRangeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToProductTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToPublishedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToRequiresSellingPlanResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToSellingPlanGroupsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface ProductToSellingPlanGroupsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToSeoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToTagsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToTotalInventoryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToTrackingParametersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToVariantBySelectedOptionsArgs {
      selectedOptions: Array<SelectedOptionInput>;
    }
    export interface ProductToVariantBySelectedOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToVariantBySelectedOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToVariantsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ProductVariantSortKeys;
    }
    export interface ProductToVariantsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductToVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductToVendorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductConnectionTypeResolver<TParent = any> {
      edges?: ProductConnectionToEdgesResolver<TParent>;
      filters?: ProductConnectionToFiltersResolver<TParent>;
      nodes?: ProductConnectionToNodesResolver<TParent>;
      pageInfo?: ProductConnectionToPageInfoResolver<TParent>;
    }
    
    export interface ProductConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductConnectionToFiltersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductEdgeTypeResolver<TParent = any> {
      cursor?: ProductEdgeToCursorResolver<TParent>;
      node?: ProductEdgeToNodeResolver<TParent>;
    }
    
    export interface ProductEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductOptionTypeResolver<TParent = any> {
      id?: ProductOptionToIdResolver<TParent>;
      name?: ProductOptionToNameResolver<TParent>;
      values?: ProductOptionToValuesResolver<TParent>;
    }
    
    export interface ProductOptionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductOptionToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductOptionToValuesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductPriceRangeTypeResolver<TParent = any> {
      maxVariantPrice?: ProductPriceRangeToMaxVariantPriceResolver<TParent>;
      minVariantPrice?: ProductPriceRangeToMinVariantPriceResolver<TParent>;
    }
    
    export interface ProductPriceRangeToMaxVariantPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductPriceRangeToMinVariantPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantTypeResolver<TParent = any> {
      availableForSale?: ProductVariantToAvailableForSaleResolver<TParent>;
      barcode?: ProductVariantToBarcodeResolver<TParent>;
      compareAtPrice?: ProductVariantToCompareAtPriceResolver<TParent>;
      compareAtPriceV2?: ProductVariantToCompareAtPriceV2Resolver<TParent>;
      currentlyNotInStock?: ProductVariantToCurrentlyNotInStockResolver<TParent>;
      id?: ProductVariantToIdResolver<TParent>;
      image?: ProductVariantToImageResolver<TParent>;
      metafield?: ProductVariantToMetafieldResolver<TParent>;
      metafields?: ProductVariantToMetafieldsResolver<TParent>;
      price?: ProductVariantToPriceResolver<TParent>;
      priceV2?: ProductVariantToPriceV2Resolver<TParent>;
      product?: ProductVariantToProductResolver<TParent>;
      quantityAvailable?: ProductVariantToQuantityAvailableResolver<TParent>;
      requiresShipping?: ProductVariantToRequiresShippingResolver<TParent>;
      selectedOptions?: ProductVariantToSelectedOptionsResolver<TParent>;
      sellingPlanAllocations?: ProductVariantToSellingPlanAllocationsResolver<TParent>;
      sku?: ProductVariantToSkuResolver<TParent>;
      storeAvailability?: ProductVariantToStoreAvailabilityResolver<TParent>;
      title?: ProductVariantToTitleResolver<TParent>;
      unitPrice?: ProductVariantToUnitPriceResolver<TParent>;
      unitPriceMeasurement?: ProductVariantToUnitPriceMeasurementResolver<TParent>;
      weight?: ProductVariantToWeightResolver<TParent>;
      weightUnit?: ProductVariantToWeightUnitResolver<TParent>;
    }
    
    export interface ProductVariantToAvailableForSaleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToBarcodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToCompareAtPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToCompareAtPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToCurrentlyNotInStockResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface ProductVariantToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductVariantToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface ProductVariantToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductVariantToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToProductResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToQuantityAvailableResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToRequiresShippingResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToSelectedOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToSellingPlanAllocationsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface ProductVariantToSellingPlanAllocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductVariantToSellingPlanAllocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToSkuResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToStoreAvailabilityArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      near?: GeoCoordinateInput;
    }
    export interface ProductVariantToStoreAvailabilityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ProductVariantToStoreAvailabilityArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToUnitPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToUnitPriceMeasurementResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToWeightResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantToWeightUnitResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantConnectionTypeResolver<TParent = any> {
      edges?: ProductVariantConnectionToEdgesResolver<TParent>;
      nodes?: ProductVariantConnectionToNodesResolver<TParent>;
      pageInfo?: ProductVariantConnectionToPageInfoResolver<TParent>;
    }
    
    export interface ProductVariantConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantEdgeTypeResolver<TParent = any> {
      cursor?: ProductVariantEdgeToCursorResolver<TParent>;
      node?: ProductVariantEdgeToNodeResolver<TParent>;
    }
    
    export interface ProductVariantEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ProductVariantEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootTypeResolver<TParent = any> {
      article?: QueryRootToArticleResolver<TParent>;
      articles?: QueryRootToArticlesResolver<TParent>;
      blog?: QueryRootToBlogResolver<TParent>;
      blogByHandle?: QueryRootToBlogByHandleResolver<TParent>;
      blogs?: QueryRootToBlogsResolver<TParent>;
      cart?: QueryRootToCartResolver<TParent>;
      cartCompletionAttempt?: QueryRootToCartCompletionAttemptResolver<TParent>;
      collection?: QueryRootToCollectionResolver<TParent>;
      collectionByHandle?: QueryRootToCollectionByHandleResolver<TParent>;
      collections?: QueryRootToCollectionsResolver<TParent>;
      customer?: QueryRootToCustomerResolver<TParent>;
      localization?: QueryRootToLocalizationResolver<TParent>;
      locations?: QueryRootToLocationsResolver<TParent>;
      menu?: QueryRootToMenuResolver<TParent>;
      metaobject?: QueryRootToMetaobjectResolver<TParent>;
      metaobjects?: QueryRootToMetaobjectsResolver<TParent>;
      node?: QueryRootToNodeResolver<TParent>;
      nodes?: QueryRootToNodesResolver<TParent>;
      page?: QueryRootToPageResolver<TParent>;
      pageByHandle?: QueryRootToPageByHandleResolver<TParent>;
      pages?: QueryRootToPagesResolver<TParent>;
      predictiveSearch?: QueryRootToPredictiveSearchResolver<TParent>;
      product?: QueryRootToProductResolver<TParent>;
      productByHandle?: QueryRootToProductByHandleResolver<TParent>;
      productRecommendations?: QueryRootToProductRecommendationsResolver<TParent>;
      productTags?: QueryRootToProductTagsResolver<TParent>;
      productTypes?: QueryRootToProductTypesResolver<TParent>;
      products?: QueryRootToProductsResolver<TParent>;
      publicApiVersions?: QueryRootToPublicApiVersionsResolver<TParent>;
      search?: QueryRootToSearchResolver<TParent>;
      shop?: QueryRootToShopResolver<TParent>;
      urlRedirects?: QueryRootToUrlRedirectsResolver<TParent>;
    }
    
    export interface QueryRootToArticleArgs {
      id: string;
    }
    export interface QueryRootToArticleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToArticlesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ArticleSortKeys;
      query?: string;
    }
    export interface QueryRootToArticlesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToBlogArgs {
      id?: string;
      handle?: string;
    }
    export interface QueryRootToBlogResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToBlogArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToBlogByHandleArgs {
      handle: string;
    }
    export interface QueryRootToBlogByHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToBlogByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToBlogsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: BlogSortKeys;
      query?: string;
    }
    export interface QueryRootToBlogsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToBlogsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCartArgs {
      id: string;
    }
    export interface QueryRootToCartResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCartCompletionAttemptArgs {
      attemptId: string;
    }
    export interface QueryRootToCartCompletionAttemptResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCartCompletionAttemptArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCollectionArgs {
      id?: string;
      handle?: string;
    }
    export interface QueryRootToCollectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCollectionByHandleArgs {
      handle: string;
    }
    export interface QueryRootToCollectionByHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCollectionByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCollectionsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: CollectionSortKeys;
      query?: string;
    }
    export interface QueryRootToCollectionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToCustomerArgs {
      customerAccessToken: string;
    }
    export interface QueryRootToCustomerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToLocalizationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToLocationsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: LocationSortKeys;
      near?: GeoCoordinateInput;
    }
    export interface QueryRootToLocationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToMenuArgs {
      handle: string;
    }
    export interface QueryRootToMenuResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToMenuArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToMetaobjectArgs {
      id?: string;
      handle?: MetaobjectHandleInput;
    }
    export interface QueryRootToMetaobjectResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToMetaobjectArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToMetaobjectsArgs {
      type: string;
      sortKey?: string;
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface QueryRootToMetaobjectsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToMetaobjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToNodeArgs {
      id: string;
    }
    export interface QueryRootToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToNodesArgs {
      ids: Array<string>;
    }
    export interface QueryRootToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToPageArgs {
      id?: string;
      handle?: string;
    }
    export interface QueryRootToPageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToPageArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToPageByHandleArgs {
      handle: string;
    }
    export interface QueryRootToPageByHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToPageByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToPagesArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: PageSortKeys;
      query?: string;
    }
    export interface QueryRootToPagesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToPagesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToPredictiveSearchArgs {
      limit?: number;
      limitScope?: PredictiveSearchLimitScope;
      query: string;
      searchableFields?: Array<SearchableField>;
      types?: Array<PredictiveSearchType>;
      unavailableProducts?: SearchUnavailableProductsType;
    }
    export interface QueryRootToPredictiveSearchResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToPredictiveSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductArgs {
      id?: string;
      handle?: string;
    }
    export interface QueryRootToProductResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductByHandleArgs {
      handle: string;
    }
    export interface QueryRootToProductByHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductRecommendationsArgs {
      productId: string;
      intent?: ProductRecommendationIntent;
    }
    export interface QueryRootToProductRecommendationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductRecommendationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductTagsArgs {
      first: number;
    }
    export interface QueryRootToProductTagsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductTypesArgs {
      first: number;
    }
    export interface QueryRootToProductTypesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToProductsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      sortKey?: ProductSortKeys;
      query?: string;
    }
    export interface QueryRootToProductsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToPublicApiVersionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToSearchArgs {
      query: string;
      prefix?: SearchPrefixQueryType;
      productFilters?: Array<ProductFilter>;
      reverse?: boolean;
      sortKey?: SearchSortKeys;
      types?: Array<SearchType>;
      unavailableProducts?: SearchUnavailableProductsType;
      first?: number;
      after?: string;
      last?: number;
      before?: string;
    }
    export interface QueryRootToSearchResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToShopResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryRootToUrlRedirectsArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
      query?: string;
    }
    export interface QueryRootToUrlRedirectsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryRootToUrlRedirectsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SEOTypeResolver<TParent = any> {
      description?: SEOToDescriptionResolver<TParent>;
      title?: SEOToTitleResolver<TParent>;
    }
    
    export interface SEOToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SEOToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ScriptDiscountApplicationTypeResolver<TParent = any> {
      allocationMethod?: ScriptDiscountApplicationToAllocationMethodResolver<TParent>;
      targetSelection?: ScriptDiscountApplicationToTargetSelectionResolver<TParent>;
      targetType?: ScriptDiscountApplicationToTargetTypeResolver<TParent>;
      title?: ScriptDiscountApplicationToTitleResolver<TParent>;
      value?: ScriptDiscountApplicationToValueResolver<TParent>;
    }
    
    export interface ScriptDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ScriptDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ScriptDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ScriptDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ScriptDiscountApplicationToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchQuerySuggestionTypeResolver<TParent = any> {
      styledText?: SearchQuerySuggestionToStyledTextResolver<TParent>;
      text?: SearchQuerySuggestionToTextResolver<TParent>;
      trackingParameters?: SearchQuerySuggestionToTrackingParametersResolver<TParent>;
    }
    
    export interface SearchQuerySuggestionToStyledTextResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchQuerySuggestionToTextResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchQuerySuggestionToTrackingParametersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Page' | 'Product' | Promise<'Article' | 'Page' | 'Product'>;
    }
    export interface SearchResultItemConnectionTypeResolver<TParent = any> {
      edges?: SearchResultItemConnectionToEdgesResolver<TParent>;
      nodes?: SearchResultItemConnectionToNodesResolver<TParent>;
      pageInfo?: SearchResultItemConnectionToPageInfoResolver<TParent>;
      productFilters?: SearchResultItemConnectionToProductFiltersResolver<TParent>;
      totalCount?: SearchResultItemConnectionToTotalCountResolver<TParent>;
    }
    
    export interface SearchResultItemConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemConnectionToProductFiltersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemConnectionToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemEdgeTypeResolver<TParent = any> {
      cursor?: SearchResultItemEdgeToCursorResolver<TParent>;
      node?: SearchResultItemEdgeToNodeResolver<TParent>;
    }
    
    export interface SearchResultItemEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SearchResultItemEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SelectedOptionTypeResolver<TParent = any> {
      name?: SelectedOptionToNameResolver<TParent>;
      value?: SelectedOptionToValueResolver<TParent>;
    }
    
    export interface SelectedOptionToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SelectedOptionToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanTypeResolver<TParent = any> {
      checkoutCharge?: SellingPlanToCheckoutChargeResolver<TParent>;
      description?: SellingPlanToDescriptionResolver<TParent>;
      id?: SellingPlanToIdResolver<TParent>;
      name?: SellingPlanToNameResolver<TParent>;
      options?: SellingPlanToOptionsResolver<TParent>;
      priceAdjustments?: SellingPlanToPriceAdjustmentsResolver<TParent>;
      recurringDeliveries?: SellingPlanToRecurringDeliveriesResolver<TParent>;
    }
    
    export interface SellingPlanToCheckoutChargeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToPriceAdjustmentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanToRecurringDeliveriesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationTypeResolver<TParent = any> {
      checkoutChargeAmount?: SellingPlanAllocationToCheckoutChargeAmountResolver<TParent>;
      priceAdjustments?: SellingPlanAllocationToPriceAdjustmentsResolver<TParent>;
      remainingBalanceChargeAmount?: SellingPlanAllocationToRemainingBalanceChargeAmountResolver<TParent>;
      sellingPlan?: SellingPlanAllocationToSellingPlanResolver<TParent>;
    }
    
    export interface SellingPlanAllocationToCheckoutChargeAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationToPriceAdjustmentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationToRemainingBalanceChargeAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationToSellingPlanResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationConnectionTypeResolver<TParent = any> {
      edges?: SellingPlanAllocationConnectionToEdgesResolver<TParent>;
      nodes?: SellingPlanAllocationConnectionToNodesResolver<TParent>;
      pageInfo?: SellingPlanAllocationConnectionToPageInfoResolver<TParent>;
    }
    
    export interface SellingPlanAllocationConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationEdgeTypeResolver<TParent = any> {
      cursor?: SellingPlanAllocationEdgeToCursorResolver<TParent>;
      node?: SellingPlanAllocationEdgeToNodeResolver<TParent>;
    }
    
    export interface SellingPlanAllocationEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationPriceAdjustmentTypeResolver<TParent = any> {
      compareAtPrice?: SellingPlanAllocationPriceAdjustmentToCompareAtPriceResolver<TParent>;
      perDeliveryPrice?: SellingPlanAllocationPriceAdjustmentToPerDeliveryPriceResolver<TParent>;
      price?: SellingPlanAllocationPriceAdjustmentToPriceResolver<TParent>;
      unitPrice?: SellingPlanAllocationPriceAdjustmentToUnitPriceResolver<TParent>;
    }
    
    export interface SellingPlanAllocationPriceAdjustmentToCompareAtPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationPriceAdjustmentToPerDeliveryPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationPriceAdjustmentToPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanAllocationPriceAdjustmentToUnitPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanCheckoutChargeTypeResolver<TParent = any> {
      type?: SellingPlanCheckoutChargeToTypeResolver<TParent>;
      value?: SellingPlanCheckoutChargeToValueResolver<TParent>;
    }
    
    export interface SellingPlanCheckoutChargeToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanCheckoutChargeToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanCheckoutChargePercentageValueTypeResolver<TParent = any> {
      percentage?: SellingPlanCheckoutChargePercentageValueToPercentageResolver<TParent>;
    }
    
    export interface SellingPlanCheckoutChargePercentageValueToPercentageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanCheckoutChargeValueTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'SellingPlanCheckoutChargePercentageValue' | Promise<'MoneyV2' | 'SellingPlanCheckoutChargePercentageValue'>;
    }
    export interface SellingPlanConnectionTypeResolver<TParent = any> {
      edges?: SellingPlanConnectionToEdgesResolver<TParent>;
      nodes?: SellingPlanConnectionToNodesResolver<TParent>;
      pageInfo?: SellingPlanConnectionToPageInfoResolver<TParent>;
    }
    
    export interface SellingPlanConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanEdgeTypeResolver<TParent = any> {
      cursor?: SellingPlanEdgeToCursorResolver<TParent>;
      node?: SellingPlanEdgeToNodeResolver<TParent>;
    }
    
    export interface SellingPlanEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanFixedAmountPriceAdjustmentTypeResolver<TParent = any> {
      adjustmentAmount?: SellingPlanFixedAmountPriceAdjustmentToAdjustmentAmountResolver<TParent>;
    }
    
    export interface SellingPlanFixedAmountPriceAdjustmentToAdjustmentAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanFixedPriceAdjustmentTypeResolver<TParent = any> {
      price?: SellingPlanFixedPriceAdjustmentToPriceResolver<TParent>;
    }
    
    export interface SellingPlanFixedPriceAdjustmentToPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupTypeResolver<TParent = any> {
      appName?: SellingPlanGroupToAppNameResolver<TParent>;
      name?: SellingPlanGroupToNameResolver<TParent>;
      options?: SellingPlanGroupToOptionsResolver<TParent>;
      sellingPlans?: SellingPlanGroupToSellingPlansResolver<TParent>;
    }
    
    export interface SellingPlanGroupToAppNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupToOptionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupToSellingPlansArgs {
      first?: number;
      after?: string;
      last?: number;
      before?: string;
      reverse?: boolean;
    }
    export interface SellingPlanGroupToSellingPlansResolver<TParent = any, TResult = any> {
      (parent: TParent, args: SellingPlanGroupToSellingPlansArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupConnectionTypeResolver<TParent = any> {
      edges?: SellingPlanGroupConnectionToEdgesResolver<TParent>;
      nodes?: SellingPlanGroupConnectionToNodesResolver<TParent>;
      pageInfo?: SellingPlanGroupConnectionToPageInfoResolver<TParent>;
    }
    
    export interface SellingPlanGroupConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupEdgeTypeResolver<TParent = any> {
      cursor?: SellingPlanGroupEdgeToCursorResolver<TParent>;
      node?: SellingPlanGroupEdgeToNodeResolver<TParent>;
    }
    
    export interface SellingPlanGroupEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupOptionTypeResolver<TParent = any> {
      name?: SellingPlanGroupOptionToNameResolver<TParent>;
      values?: SellingPlanGroupOptionToValuesResolver<TParent>;
    }
    
    export interface SellingPlanGroupOptionToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanGroupOptionToValuesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanOptionTypeResolver<TParent = any> {
      name?: SellingPlanOptionToNameResolver<TParent>;
      value?: SellingPlanOptionToValueResolver<TParent>;
    }
    
    export interface SellingPlanOptionToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanOptionToValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanPercentagePriceAdjustmentTypeResolver<TParent = any> {
      adjustmentPercentage?: SellingPlanPercentagePriceAdjustmentToAdjustmentPercentageResolver<TParent>;
    }
    
    export interface SellingPlanPercentagePriceAdjustmentToAdjustmentPercentageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanPriceAdjustmentTypeResolver<TParent = any> {
      adjustmentValue?: SellingPlanPriceAdjustmentToAdjustmentValueResolver<TParent>;
      orderCount?: SellingPlanPriceAdjustmentToOrderCountResolver<TParent>;
    }
    
    export interface SellingPlanPriceAdjustmentToAdjustmentValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanPriceAdjustmentToOrderCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SellingPlanPriceAdjustmentValueTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'SellingPlanFixedAmountPriceAdjustment' | 'SellingPlanFixedPriceAdjustment' | 'SellingPlanPercentagePriceAdjustment' | Promise<'SellingPlanFixedAmountPriceAdjustment' | 'SellingPlanFixedPriceAdjustment' | 'SellingPlanPercentagePriceAdjustment'>;
    }
    export interface ShippingRateTypeResolver<TParent = any> {
      handle?: ShippingRateToHandleResolver<TParent>;
      price?: ShippingRateToPriceResolver<TParent>;
      priceV2?: ShippingRateToPriceV2Resolver<TParent>;
      title?: ShippingRateToTitleResolver<TParent>;
    }
    
    export interface ShippingRateToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShippingRateToPriceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShippingRateToPriceV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShippingRateToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopTypeResolver<TParent = any> {
      brand?: ShopToBrandResolver<TParent>;
      description?: ShopToDescriptionResolver<TParent>;
      id?: ShopToIdResolver<TParent>;
      metafield?: ShopToMetafieldResolver<TParent>;
      metafields?: ShopToMetafieldsResolver<TParent>;
      moneyFormat?: ShopToMoneyFormatResolver<TParent>;
      name?: ShopToNameResolver<TParent>;
      paymentSettings?: ShopToPaymentSettingsResolver<TParent>;
      primaryDomain?: ShopToPrimaryDomainResolver<TParent>;
      privacyPolicy?: ShopToPrivacyPolicyResolver<TParent>;
      refundPolicy?: ShopToRefundPolicyResolver<TParent>;
      shippingPolicy?: ShopToShippingPolicyResolver<TParent>;
      shipsToCountries?: ShopToShipsToCountriesResolver<TParent>;
      subscriptionPolicy?: ShopToSubscriptionPolicyResolver<TParent>;
      termsOfService?: ShopToTermsOfServiceResolver<TParent>;
    }
    
    export interface ShopToBrandResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToMetafieldArgs {
      namespace: string;
      key: string;
    }
    export interface ShopToMetafieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ShopToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToMetafieldsArgs {
      identifiers: Array<HasMetafieldsIdentifier>;
    }
    export interface ShopToMetafieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: ShopToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToMoneyFormatResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToPaymentSettingsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToPrimaryDomainResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToPrivacyPolicyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToRefundPolicyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToShippingPolicyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToShipsToCountriesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToSubscriptionPolicyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopToTermsOfServiceResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyTypeResolver<TParent = any> {
      body?: ShopPolicyToBodyResolver<TParent>;
      handle?: ShopPolicyToHandleResolver<TParent>;
      id?: ShopPolicyToIdResolver<TParent>;
      title?: ShopPolicyToTitleResolver<TParent>;
      url?: ShopPolicyToUrlResolver<TParent>;
    }
    
    export interface ShopPolicyToBodyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyWithDefaultTypeResolver<TParent = any> {
      body?: ShopPolicyWithDefaultToBodyResolver<TParent>;
      handle?: ShopPolicyWithDefaultToHandleResolver<TParent>;
      id?: ShopPolicyWithDefaultToIdResolver<TParent>;
      title?: ShopPolicyWithDefaultToTitleResolver<TParent>;
      url?: ShopPolicyWithDefaultToUrlResolver<TParent>;
    }
    
    export interface ShopPolicyWithDefaultToBodyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyWithDefaultToHandleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyWithDefaultToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyWithDefaultToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ShopPolicyWithDefaultToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityTypeResolver<TParent = any> {
      available?: StoreAvailabilityToAvailableResolver<TParent>;
      location?: StoreAvailabilityToLocationResolver<TParent>;
      pickUpTime?: StoreAvailabilityToPickUpTimeResolver<TParent>;
    }
    
    export interface StoreAvailabilityToAvailableResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityToLocationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityToPickUpTimeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityConnectionTypeResolver<TParent = any> {
      edges?: StoreAvailabilityConnectionToEdgesResolver<TParent>;
      nodes?: StoreAvailabilityConnectionToNodesResolver<TParent>;
      pageInfo?: StoreAvailabilityConnectionToPageInfoResolver<TParent>;
    }
    
    export interface StoreAvailabilityConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityEdgeTypeResolver<TParent = any> {
      cursor?: StoreAvailabilityEdgeToCursorResolver<TParent>;
      node?: StoreAvailabilityEdgeToNodeResolver<TParent>;
    }
    
    export interface StoreAvailabilityEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StoreAvailabilityEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StringConnectionTypeResolver<TParent = any> {
      edges?: StringConnectionToEdgesResolver<TParent>;
      pageInfo?: StringConnectionToPageInfoResolver<TParent>;
    }
    
    export interface StringConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StringConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StringEdgeTypeResolver<TParent = any> {
      cursor?: StringEdgeToCursorResolver<TParent>;
      node?: StringEdgeToNodeResolver<TParent>;
    }
    
    export interface StringEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface StringEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmissionErrorTypeResolver<TParent = any> {
      code?: SubmissionErrorToCodeResolver<TParent>;
      message?: SubmissionErrorToMessageResolver<TParent>;
    }
    
    export interface SubmissionErrorToCodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmissionErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmitAlreadyAcceptedTypeResolver<TParent = any> {
      attemptId?: SubmitAlreadyAcceptedToAttemptIdResolver<TParent>;
    }
    
    export interface SubmitAlreadyAcceptedToAttemptIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmitFailedTypeResolver<TParent = any> {
      checkoutUrl?: SubmitFailedToCheckoutUrlResolver<TParent>;
      errors?: SubmitFailedToErrorsResolver<TParent>;
    }
    
    export interface SubmitFailedToCheckoutUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmitFailedToErrorsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmitSuccessTypeResolver<TParent = any> {
      attemptId?: SubmitSuccessToAttemptIdResolver<TParent>;
    }
    
    export interface SubmitSuccessToAttemptIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubmitThrottledTypeResolver<TParent = any> {
      pollAfter?: SubmitThrottledToPollAfterResolver<TParent>;
    }
    
    export interface SubmitThrottledToPollAfterResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TrackableTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Collection' | 'Page' | 'Product' | 'SearchQuerySuggestion' | Promise<'Article' | 'Collection' | 'Page' | 'Product' | 'SearchQuerySuggestion'>;
    }
    export interface TransactionTypeResolver<TParent = any> {
      amount?: TransactionToAmountResolver<TParent>;
      amountV2?: TransactionToAmountV2Resolver<TParent>;
      kind?: TransactionToKindResolver<TParent>;
      status?: TransactionToStatusResolver<TParent>;
      statusV2?: TransactionToStatusV2Resolver<TParent>;
      test?: TransactionToTestResolver<TParent>;
    }
    
    export interface TransactionToAmountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TransactionToAmountV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TransactionToKindResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TransactionToStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TransactionToStatusV2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface TransactionToTestResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UnitPriceMeasurementTypeResolver<TParent = any> {
      measuredType?: UnitPriceMeasurementToMeasuredTypeResolver<TParent>;
      quantityUnit?: UnitPriceMeasurementToQuantityUnitResolver<TParent>;
      quantityValue?: UnitPriceMeasurementToQuantityValueResolver<TParent>;
      referenceUnit?: UnitPriceMeasurementToReferenceUnitResolver<TParent>;
      referenceValue?: UnitPriceMeasurementToReferenceValueResolver<TParent>;
    }
    
    export interface UnitPriceMeasurementToMeasuredTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UnitPriceMeasurementToQuantityUnitResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UnitPriceMeasurementToQuantityValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UnitPriceMeasurementToReferenceUnitResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UnitPriceMeasurementToReferenceValueResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectTypeResolver<TParent = any> {
      id?: UrlRedirectToIdResolver<TParent>;
      path?: UrlRedirectToPathResolver<TParent>;
      target?: UrlRedirectToTargetResolver<TParent>;
    }
    
    export interface UrlRedirectToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectToPathResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectToTargetResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectConnectionTypeResolver<TParent = any> {
      edges?: UrlRedirectConnectionToEdgesResolver<TParent>;
      nodes?: UrlRedirectConnectionToNodesResolver<TParent>;
      pageInfo?: UrlRedirectConnectionToPageInfoResolver<TParent>;
    }
    
    export interface UrlRedirectConnectionToEdgesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectConnectionToNodesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectConnectionToPageInfoResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectEdgeTypeResolver<TParent = any> {
      cursor?: UrlRedirectEdgeToCursorResolver<TParent>;
      node?: UrlRedirectEdgeToNodeResolver<TParent>;
    }
    
    export interface UrlRedirectEdgeToCursorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UrlRedirectEdgeToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserErrorTypeResolver<TParent = any> {
      field?: UserErrorToFieldResolver<TParent>;
      message?: UserErrorToMessageResolver<TParent>;
    }
    
    export interface UserErrorToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserErrorToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoTypeResolver<TParent = any> {
      alt?: VideoToAltResolver<TParent>;
      id?: VideoToIdResolver<TParent>;
      mediaContentType?: VideoToMediaContentTypeResolver<TParent>;
      presentation?: VideoToPresentationResolver<TParent>;
      previewImage?: VideoToPreviewImageResolver<TParent>;
      sources?: VideoToSourcesResolver<TParent>;
    }
    
    export interface VideoToAltResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoToMediaContentTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoToPresentationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoToPreviewImageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoToSourcesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoSourceTypeResolver<TParent = any> {
      format?: VideoSourceToFormatResolver<TParent>;
      height?: VideoSourceToHeightResolver<TParent>;
      mimeType?: VideoSourceToMimeTypeResolver<TParent>;
      url?: VideoSourceToUrlResolver<TParent>;
      width?: VideoSourceToWidthResolver<TParent>;
    }
    
    export interface VideoSourceToFormatResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoSourceToHeightResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoSourceToMimeTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoSourceToUrlResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface VideoSourceToWidthResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    